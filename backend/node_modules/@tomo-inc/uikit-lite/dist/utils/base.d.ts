export declare function noop(): void;
export declare const extend: {
    <T extends {}, U>(target: T, source: U): T & U;
    <T extends {}, U, V>(target: T, source1: U, source2: V): T & U & V;
    <T extends {}, U, V, W>(target: T, source1: U, source2: V, source3: W): T & U & V & W;
    (target: object, ...sources: any[]): any;
};
export declare const inBrowser: boolean;
export declare function isDef<T>(val: T): val is NonNullable<T>;
export declare function isFunction(val: unknown): val is Function;
export declare function isPromise<T = any>(val: unknown): val is Promise<T>;
export declare function isObject(val: unknown): val is Record<any, any>;
export declare function get(object: any, path: string): any;
export type Writeable<T> = {
    -readonly [P in keyof T]: T[P];
};
export declare function pick<T, U extends keyof T>(obj: T, keys: ReadonlyArray<U>, ignoreUndefined?: boolean): Writeable<Pick<T, U>>;
export declare function once(fn: ((...args: any) => void) | null): (...args: any) => void;
