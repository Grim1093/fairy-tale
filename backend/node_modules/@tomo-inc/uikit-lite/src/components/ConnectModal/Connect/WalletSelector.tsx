import { PopupHeader } from "@/components/Popup";
import { TouchMoveDistance, useTouchMoveDistance } from "@/hooks/useTouchMoveDistance";
import clsx from "clsx";
import React, { FC, forwardRef, memo, useCallback, useEffect, useRef, useState } from "react";
import ArrowUp from "../../../assets/images/arrow_up.svg";
import ArrowUpWide from "../../../assets/images/arrow_up_wide.svg";
import Popup from "../../Popup/Popup";
import { WalletItemProps } from "../type";
import { cn } from "../utils";
import { isMobileDevice } from "../utils/device";
import InputSearch from "./InputSearch";
import WalletItem from "./WalletItem";
import "./WalletSelector.css";
import { FULLSCREEN_POSITION, SECOND_LEVEL_POSITION, useScrollState } from "./hooks/useScrollState";
import Divider from "./Divider";
import ArrowRight from "../../../assets/images/arrow_up_wide_line.svg";

interface PropsType {
  className?: string;
  grid?: boolean;
  style?: React.CSSProperties;
  walletList: WalletItemProps[];
  handleClick: (item: WalletItemProps, index: number) => void;
  loadingIconKey?: string;
  socialsFirst?: boolean;
}
const WalletListComp = ({ className, grid, style, walletList, handleClick, loadingIconKey }: PropsType, ref: any) => {
  const oneLine = walletList.length <= 4;

  if (oneLine && !grid)
    return (
      <div className={cn(className, "uikit-px-[10px]")} style={style} ref={ref}>
        <div className={"uikit-flex uikit-items-center uikit-justify-center uikit-gap-y-2"}>
          {walletList.map((option, index) => {
            return (
              <WalletItem
                className="uikit-w-1/4"
                key={option.key}
                wallet={option}
                handleClick={() => {
                  handleClick(option, index);
                }}
                isLoading={loadingIconKey === option.key}
              />
            );
          })}
        </div>
      </div>
    );

  return (
    <div className={cn(className, "uikit-px-[10px]")} style={style} ref={ref}>
      <div className={"uikit-grid uikit-grid-cols-4 uikit-gap-y-4"}>
        {walletList.map((option, index) => {
          return (
            <WalletItem
              key={option.key}
              wallet={option}
              handleClick={() => {
                handleClick(option, index);
              }}
              isLoading={loadingIconKey === option.key}
            />
          );
        })}
      </div>
    </div>
  );
};
export const WalletList = forwardRef(WalletListComp);

const WalletSelector: FC<PropsType> = ({ walletList, handleClick, loadingIconKey, socialsFirst }) => {
  const [opened, setOpened] = useState(false);
  const [fullScreen, setFullScreen] = useState(false);
  const [keyWord, setKeyWord] = useState("");
  const firstWalletList = walletList.slice(0, 4);
  const isMobile = isMobileDevice();
  const walletListRef = useRef<HTMLDivElement>(null);
  const ref = useRef<HTMLDivElement>(null);

  const filterWalletList = walletList.filter((item) => item.name.toLowerCase().startsWith(keyWord.toLowerCase()));
  const showHeader = walletList.length > 4;
  const canFullScreen = walletList.length > 8;

  const onClose = useCallback(() => {
    setOpened(false);
    if (fullScreen) setFullScreen(false);
    if (walletListRef?.current) walletListRef.current.scrollTop = 0;
  }, [fullScreen]);

  const { scrollToFullScreen, scrollToSecondLevel } = useScrollState(
    ref,
    { fullScreen, canFullScreen },
    {
      setFullScreen,
      onClose,
    },
  );

  const onOpen = useCallback(() => {
    setOpened(true);
  }, []);

  useEffect(() => {
    if (opened) {
      socialsFirst && scrollToSecondLevel();
    }
  }, [opened, scrollToSecondLevel, socialsFirst]);

  const headerRef = useRef<HTMLDivElement>(null);
  const handleContainerTouchEnd = useCallback(
    (touchMoveDistance: TouchMoveDistance) => {
      const canUnfold = walletList.length > 4;
      if (canUnfold && touchMoveDistance.y < -1) onOpen();
    },
    [onOpen, walletList.length],
  );
  useTouchMoveDistance(headerRef, {
    enable: isMobile,
    handleTouchEnd: handleContainerTouchEnd,
  });

  return (
    <div
      className={cn(
        "uikit-rounded-t-lg uikit-border uikit-border-solid uikit-border-border uikit-border-b-0 uikit-pb-[26px]",
        {
          "uikit-border-none": !showHeader || !socialsFirst,
          "uikit-pt-4": !socialsFirst,
        },
      )}
    >
      <div
        ref={headerRef}
        className={clsx({
          "uikit-invisible": opened,
        })}
      >
        {socialsFirst && showHeader && (
          <Header
            className="uikit-mb-3"
            allLen={walletList.length}
            renderLen={firstWalletList.length}
            onClick={() => {
              onOpen();
            }}
          />
        )}
        <WalletList walletList={firstWalletList} handleClick={handleClick} loadingIconKey={loadingIconKey} />
      </div>

      {!socialsFirst ? (
        <Divider
          className="uikit-px-5 uikit-pt-5 uikit-cursor-pointer"
          position="right"
          content={
            <span className="uikit-flex uikit-flex-items-center" onClick={onOpen}>
              Other wallets
              <img src={ArrowRight} />
            </span>
          }
        />
      ) : null}

      <Popup
        ref={ref}
        fixed={false}
        opened={opened}
        onClose={onClose}
        header={
          fullScreen || !socialsFirst ? (
            <PopupHeader title="Select your wallet" close back onClose={onClose} onBack={onClose} />
          ) : (
            <Header
              allLen={walletList.length}
              renderLen={8}
              onClick={() => {
                if (!canFullScreen) {
                  onClose();
                } else {
                  scrollToFullScreen();
                }
              }}
            />
          )
        }
        bodyClassName={
          socialsFirst
            ? "uikit-popup-enable-scroll"
            : "sm:uikit-m-auto sm:uikit-w-auto sm:uikit-animate-none sm:uikit-min-w-[375px]"
        }
        bodyStyle={{
          top: !socialsFirst ? "0px" : canFullScreen ? `${FULLSCREEN_POSITION}px` : `${SECOND_LEVEL_POSITION}px`,
          height: canFullScreen || !socialsFirst ? "100%" : "364px",
        }}
      >
        {fullScreen || !socialsFirst ? (
          <>
            <InputSearch onSearch={(kw: string) => setKeyWord(kw)} />
            {filterWalletList.length > 0 ? (
              <WalletList
                ref={walletListRef}
                grid
                className="uikit uikit-pb-16 uikit-mt-5 uikit-h-[calc(100%-60px-60px-20px)] uikit-overflow-y-auto uikit-overscroll-y-contain uikit-flex-1 uikit-min-h-0"
                style={{
                  WebkitOverflowScrolling: "touch",
                }}
                walletList={filterWalletList}
                handleClick={handleClick}
                loadingIconKey={loadingIconKey}
              />
            ) : (
              <Empty />
            )}
          </>
        ) : (
          <>
            <div
              className={cn(
                "uikit-px-5 uikit-py-[9px] uikit-text-[20px] uikit-font-switzerBold uikit-text-[#12122A] dark:uikit-text-white",
              )}
            >
              Select your wallet
            </div>

            <WalletList
              className="uikit-mt-7 uikit-pb-16 uikit-overflow-hidden"
              walletList={walletList}
              handleClick={handleClick}
              loadingIconKey={loadingIconKey}
            />
          </>
        )}
        <Footer />
      </Popup>
      {opened && !fullScreen && <Footer />}
    </div>
  );
};

export const Empty = () => {
  return (
    <div
      className={
        "uikit-flex uikit-flex-col uikit-items-center uikit-gap-2.5 uikit-pt-28 uikit-text-sm uikit-text-tc2 dark:uikit-text-tc2-dark"
      }
    >
      <WalletIcon />
      <div>No Wallet found</div>
    </div>
  );
};

export function WalletIcon(props: React.SVGProps<SVGSVGElement>) {
  return (
    <svg xmlns="http://www.w3.org/2000/svg" width="80" height="80" viewBox="0 0 80 80" fill="none" {...props}>
      <path
        d="M69.7188 18.6328C69.9766 18.6328 70.2344 18.6563 70.4844 18.6875C69.8047 18.1563 68.9766 17.7813 68.0625 17.6407L18.3203 9.69534C15.4219 9.2344 12.6953 11.2032 12.2344 14.1016L11.5078 18.6407H69.7188V18.6328ZM75.0312 26.4453C75.0312 23.5078 72.6562 21.1328 69.7188 21.1328H10.3281C7.39062 21.1328 5.01562 23.5078 5.01562 26.4453V64.0625C5.01562 67 7.39062 69.375 10.3281 69.375H69.7109C72.6484 69.375 75.0234 67 75.0234 64.0625V53.961H54.4766C49.2422 53.961 45 49.7188 45 44.4844C45 39.25 49.2422 35.0078 54.4766 35.0078H75.0234V26.4453H75.0312Z"
        fill="currentColor"
      />
      <path
        fillRule="evenodd"
        clipRule="evenodd"
        d="M63.7036 11.437C63.6785 11.6532 63.5784 11.8537 63.4207 12.0038C63.263 12.1538 63.0577 12.2438 62.8406 12.2581C62.6234 12.2724 62.4081 12.2101 62.2321 12.082C62.0561 11.954 61.9306 11.7683 61.8773 11.5572L60.7175 3.22704C60.6917 2.82362 60.8269 2.42644 61.0933 2.12244C61.3598 1.81843 61.7358 1.63237 62.1391 1.60496C62.3509 1.59625 62.5622 1.63057 62.7603 1.70583C62.9584 1.7811 63.1392 1.89575 63.2917 2.04286C63.4443 2.18996 63.5654 2.36647 63.6478 2.56172C63.7303 2.75696 63.7722 2.96689 63.7712 3.17881L63.7036 11.437ZM67.0321 13.3952C66.8913 13.5611 66.6967 13.6724 66.4823 13.7096C66.2678 13.7469 66.0471 13.7078 65.8585 13.5992C65.6699 13.4906 65.5254 13.3193 65.4501 13.1151C65.3747 12.9109 65.3734 12.6867 65.4462 12.4817L69.1046 4.90842C69.3071 4.55856 69.64 4.30318 70.0303 4.19817C70.4207 4.09316 70.8368 4.14707 71.1875 4.34811C71.3684 4.45838 71.5252 4.60421 71.6482 4.77677C71.7712 4.94932 71.858 5.14504 71.9033 5.35207C71.9485 5.55911 71.9513 5.77317 71.9115 5.98133C71.8717 6.18948 71.7901 6.3874 71.6716 6.56313L67.0321 13.3952ZM69.0431 15.933C69.2451 16.0141 69.4691 16.0218 69.6762 15.9548L77.2159 12.5852C77.4091 12.498 77.5826 12.3726 77.726 12.2166C77.8693 12.0605 77.9796 11.8769 78.05 11.6771C78.1204 11.4772 78.1496 11.2651 78.1357 11.0536C78.1219 10.8422 78.0653 10.6357 77.9694 10.4467C77.7769 10.0912 77.4514 9.82651 77.0642 9.71046C76.677 9.59441 76.2595 9.6365 75.9033 9.8275L68.808 14.3436C68.6382 14.4797 68.5214 14.671 68.4781 14.8843C68.4347 15.0976 68.4675 15.3193 68.5708 15.5109C68.674 15.7025 68.8411 15.8519 69.0431 15.933Z"
        fill="#DFDFDF"
      />
      <path
        d="M52.9026 45.1103C52.9841 45.4558 53.133 45.7819 53.3405 46.0698C53.5481 46.3578 53.8104 46.602 54.1123 46.7886C54.4143 46.9752 54.7501 47.1005 55.1005 47.1574C55.4509 47.2142 55.8091 47.2015 56.1545 47.1199C56.5 47.0383 56.826 46.8895 57.114 46.6819C57.402 46.4744 57.6462 46.2121 57.8328 45.9101C58.0194 45.6081 58.1447 45.2724 58.2016 44.922C58.2584 44.5716 58.2457 44.2134 58.1641 43.8679C58.0825 43.5224 57.9337 43.1964 57.7261 42.9085C57.5185 42.6205 57.2563 42.3762 56.9543 42.1896C56.6523 42.003 56.3166 41.8777 55.9662 41.8209C55.6158 41.764 55.2576 41.7768 54.9121 41.8584C54.5666 41.9399 54.2406 42.0888 53.9526 42.2963C53.6647 42.5039 53.4204 42.7662 53.2338 43.0682C53.0472 43.3701 52.9219 43.7059 52.8651 44.0563C52.8082 44.4067 52.821 44.7649 52.9026 45.1103Z"
        fill="currentColor"
      />
    </svg>
  );
}

const Header = ({
  className,
  allLen,
  renderLen,
  onClick,
}: {
  className?: string;
  allLen: number;
  renderLen: number;
  onClick?: (needFold?: boolean) => void;
}) => {
  const diff = Math.ceil((allLen - renderLen) / 4);
  const isMobile = isMobileDevice();

  if (isMobile) return <Rounded />;

  const needDoubleUnfold = renderLen <= 4 && diff >= 2;
  const needFold = allLen > 4 && allLen <= 8 && renderLen === 8;

  return (
    <div
      className={cn(className, "uikit-pt-2 uikit-flex uikit-items-center uikit-justify-center uikit-cursor-pointer")}
      onClick={() => {
        onClick?.(needFold);
      }}
    >
      {needDoubleUnfold ? (
        <img className="uikit-w-6 uikit-h-6" src={ArrowUpWide} />
      ) : (
        <img
          className={cn("uikit-w-6 uikit-h-6", {
            "uikit-rotate-180": needFold,
          })}
          src={ArrowUp}
        />
      )}
    </div>
  );
};

const Rounded = ({ onClick }: { onClick?: () => void }) => {
  return (
    <div
      onClick={() => {
        onClick?.();
      }}
      className="uikit-py-2 uikit-flex uikit-items-center uikit-justify-center"
    >
      <div className="uikit-w-10 uikit-h-1 uikit-rounded-[2.5px] uikit-bg-[#C1C0D8]"></div>
    </div>
  );
};

export const Footer = () => {
  return (
    <div className="uikit-z-[50] wallt-selector-power-by uikit-gap-1 uikit-text-[#C1C0D8] uikit-absolute uikit-bottom-0 uikit-py-2 uikit-left-[10px] uikit-right-[10px] uikit-flex uikit-items-center uikit-justify-center animate__animated animate__fadeIn animate__fast">
      <span className="uikit-text-t3 uikit-text-xs">Powered by</span>
      <PowerBy className="uikit-text-white dark:uikit-text-[#121212]" />
    </div>
  );
};

export default memo(WalletSelector);

const PowerBy = (props: React.SVGProps<SVGSVGElement> & { className?: string }) => {
  return (
    <svg width="69" height="16" viewBox="0 0 69 16" fill="none" xmlns="http://www.w3.org/2000/svg" {...props}>
      <path
        fillRule="evenodd"
        clipRule="evenodd"
        d="M9.70529 0.991901C9.93626 0.726658 10.3483 0.726658 10.5793 0.991901L11.4199 1.95718C11.5931 2.15611 11.8788 2.21294 12.115 2.09545L13.261 1.52532C13.5759 1.36866 13.9566 1.52636 14.0685 1.8598L14.4757 3.07327C14.5596 3.32335 14.8018 3.4852 15.065 3.46703L16.3419 3.37885C16.6928 3.35462 16.9842 3.64601 16.96 3.99688L16.8718 5.27381C16.8536 5.53697 17.0155 5.7792 17.2655 5.86311L18.479 6.2703C18.8124 6.38219 18.9701 6.76291 18.8135 7.07781L18.2434 8.22378C18.1259 8.45996 18.1827 8.74568 18.3816 8.91892L19.3469 9.75949C19.6121 9.99046 19.6121 10.4025 19.3469 10.6335L18.446 11.4181C18.2187 11.616 18.181 11.9551 18.3594 12.198L18.9398 12.9886C19.2207 13.3713 18.9474 13.911 18.4726 13.911H16.8409H13.9493C15.4298 13.3781 16.1109 11.6655 15.3951 10.2596C14.6127 8.72299 12.5844 8.34907 11.3055 9.50569L11.2259 9.57772C10.6088 10.1358 9.66927 10.1358 9.05217 9.57772L8.97253 9.50569C7.69364 8.34907 5.66532 8.723 4.88293 10.2596C4.16713 11.6655 4.84823 13.3781 6.32876 13.911H3.44369H1.81196C1.33716 13.911 1.06386 13.3713 1.34484 12.9886L1.92521 12.198C2.10357 11.9551 2.06593 11.616 1.83865 11.4181L0.937701 10.6335C0.672459 10.4025 0.672459 9.99046 0.937702 9.75949L1.90298 8.91892C2.10191 8.74568 2.15874 8.45996 2.04125 8.22378L1.47112 7.07781C1.31446 6.76291 1.47216 6.38219 1.8056 6.2703L3.01907 5.86311C3.26915 5.7792 3.431 5.53697 3.41283 5.27381L3.32465 3.99689C3.30042 3.64601 3.59181 3.35462 3.94269 3.37885L5.21961 3.46703C5.48277 3.4852 5.725 3.32335 5.80891 3.07327L6.2161 1.8598C6.32799 1.52636 6.70871 1.36866 7.02361 1.52532L8.16958 2.09545C8.40576 2.21294 8.69148 2.15611 8.86472 1.95718L9.70529 0.991901ZM10.1981 13.771C10.8981 13.771 11.4656 13.4047 11.4656 12.9529C11.4656 12.5011 10.8981 12.1348 10.1981 12.1348C9.49812 12.1348 8.93066 12.5011 8.93066 12.9529C8.93066 13.4047 9.49812 13.771 10.1981 13.771ZM7.90647 11.3822C7.90647 11.7993 7.56834 12.1374 7.15123 12.1374C6.73413 12.1374 6.396 11.7993 6.396 11.3822C6.396 10.9651 6.73413 10.627 7.15123 10.627C7.56834 10.627 7.90647 10.9651 7.90647 11.3822ZM13.2469 12.1374C13.664 12.1374 14.0022 11.7993 14.0022 11.3822C14.0022 10.9651 13.664 10.627 13.2469 10.627C12.8298 10.627 12.4917 10.9651 12.4917 11.3822C12.4917 11.7993 12.8298 12.1374 13.2469 12.1374Z"
        fill="#2B2D33"
      />
      <path
        fillRule="evenodd"
        clipRule="evenodd"
        d="M60.4695 13.3845C61.1206 13.6575 61.8295 13.794 62.5961 13.794C63.3628 13.794 64.0664 13.6575 64.707 13.3845C65.3581 13.1009 65.9199 12.7071 66.3925 12.203C66.8756 11.6989 67.2484 11.1056 67.511 10.423C67.7735 9.72984 67.9048 8.97896 67.9048 8.17033C67.9048 7.36169 67.7735 6.61606 67.511 5.93345C67.2484 5.25083 66.8756 4.66273 66.3925 4.16915C65.9199 3.66506 65.3581 3.27649 64.707 3.00345C64.0664 2.7199 63.3628 2.57812 62.5961 2.57812C61.8295 2.57812 61.1206 2.7199 60.4695 3.00345C59.8184 3.27649 59.2566 3.66506 58.784 4.16915C58.3114 4.66273 57.9438 5.25083 57.6813 5.93345C57.4187 6.61606 57.2875 7.36169 57.2875 8.17033C57.2875 8.97896 57.4187 9.72984 57.6813 10.423C57.9438 11.1056 58.3114 11.6989 58.784 12.203C59.2566 12.7071 59.8184 13.1009 60.4695 13.3845ZM63.9194 10.864C63.5518 11.1161 63.1107 11.2421 62.5961 11.2421C62.092 11.2421 61.651 11.1161 61.2729 10.864C60.9053 10.6015 60.6165 10.2392 60.4065 9.7771C60.207 9.31502 60.1072 8.77943 60.1072 8.17033C60.1072 7.56122 60.207 7.03088 60.4065 6.57931C60.6165 6.11723 60.9053 5.76017 61.2729 5.50812C61.651 5.25608 62.092 5.13006 62.5961 5.13006C63.1107 5.13006 63.5518 5.26133 63.9194 5.52388C64.2869 5.77592 64.5705 6.12773 64.77 6.57931C64.98 7.03088 65.0851 7.56122 65.0851 8.17033C65.0851 8.77943 64.98 9.31502 64.77 9.7771C64.5705 10.2392 64.2869 10.6015 63.9194 10.864ZM44.5136 8.18577V13.5417H45.8211H47.1128V9.98158V6.40572C47.4278 7.58192 47.7429 8.77387 48.058 9.98158C48.373 11.1788 48.6881 12.3655 49.0031 13.5417H50.2003H51.3975C51.7126 12.3445 52.0329 11.1368 52.3584 9.91857C52.684 8.68986 53.0043 7.4769 53.3194 6.2797V9.91857V13.5417H54.6426H55.9816C55.9711 11.7774 55.9606 9.99208 55.95 8.18577C55.9395 6.37947 55.929 4.59416 55.9185 2.82986H53.981H52.0276C51.7336 3.90104 51.4343 4.98798 51.1297 6.09067C50.8357 7.18285 50.5416 8.26454 50.2476 9.33572C49.9535 8.26454 49.6542 7.18285 49.3497 6.09067C49.0556 4.98798 48.7563 3.90104 48.4518 2.82986H46.4827H44.5136V8.18577ZM37.8991 13.794C37.1325 13.794 36.4236 13.6575 35.7725 13.3845C35.1214 13.1009 34.5595 12.7071 34.0869 12.203C33.6144 11.6989 33.2468 11.1056 32.9842 10.423C32.7217 9.72984 32.5904 8.97896 32.5904 8.17033C32.5904 7.36169 32.7217 6.61606 32.9842 5.93345C33.2468 5.25083 33.6144 4.66273 34.0869 4.16915C34.5595 3.66506 35.1214 3.27649 35.7725 3.00345C36.4236 2.7199 37.1325 2.57812 37.8991 2.57812C38.6657 2.57812 39.3693 2.7199 40.0099 3.00345C40.6611 3.27649 41.2229 3.66506 41.6955 4.16915C42.1786 4.66273 42.5514 5.25083 42.8139 5.93345C43.0765 6.61606 43.2077 7.36169 43.2077 8.17033C43.2077 8.97896 43.0765 9.72984 42.8139 10.423C42.5514 11.1056 42.1786 11.6989 41.6955 12.203C41.2229 12.7071 40.6611 13.1009 40.0099 13.3845C39.3693 13.6575 38.6657 13.794 37.8991 13.794ZM37.8991 11.2421C38.4137 11.2421 38.8547 11.1161 39.2223 10.864C39.5899 10.6015 39.8734 10.2392 40.073 9.7771C40.283 9.31502 40.388 8.77943 40.388 8.17033C40.388 7.56122 40.283 7.03088 40.073 6.57931C39.8734 6.12773 39.5899 5.77592 39.2223 5.52388C38.8547 5.26133 38.4137 5.13006 37.8991 5.13006C37.395 5.13006 36.9539 5.25608 36.5759 5.50812C36.2083 5.76017 35.9195 6.11723 35.7095 6.57931C35.5099 7.03088 35.4102 7.56122 35.4102 8.17033C35.4102 8.77943 35.5099 9.31502 35.7095 9.7771C35.9195 10.2392 36.2083 10.6015 36.5759 10.864C36.9539 11.1161 37.395 11.2421 37.8991 11.2421ZM26.1175 9.44599V13.5417H27.5037H28.8742V9.44599V5.33454H30.0871H31.2843V4.09008V2.82986H27.488H23.6916V4.09008V5.33454H24.9045H26.1175V9.44599Z"
        fill="#2B2D33"
      />
    </svg>
  );
};
