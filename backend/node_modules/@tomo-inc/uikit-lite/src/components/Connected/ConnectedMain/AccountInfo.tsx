import { TCopy } from "@/components/Copy";
import { TIcon } from "@/components/Icon";
import useHover from "@/hooks/useHover";
import { shortenAddress } from "@/utils/helper";
import clsx from "clsx";
import { useState } from "react"; // 添加 useState 引入
import SettingPopup from "../SettingPopup/SettingPopup";
import { Theme } from "@/constant";

export interface AccountInfoProps {
  name: string;
  address: string;
  icon?: React.ReactNode;
  iconSrc?: string;
  activeBGColor?: string;
  activeIconColor?: string;
}
interface PropsType {
  className?: string;
  accountInfo: AccountInfoProps;
  showSetting?: boolean;
  onChangePayPin?: () => void;
  onClose?: () => void;
  onBack?: () => void;
  theme: Theme;
}

const AccountInfo = ({ accountInfo, showSetting = true, onChangePayPin, theme }: PropsType) => {
  // const copyMsg = "Copied to clipboard successfully";
  const onCopyAddress = async () => {
    try {
      await navigator.clipboard.writeText(accountInfo.address);
      // Toast.show(copyMsg);
    } catch (err) {
      console.error("Failed to copy: ", err);
    }
  };
  const [hoverRef, isHover] = useHover();
  const [hoverSettingRef, isHoverSetting] = useHover();

  const [showSettingPopup, setShowSettingPopup] = useState(false);

  const onClose = () => {
    setShowSettingPopup(false);
  };

  return (
    <div className="uikit-py-4 uikit-px-3 uikit-flex uikit-items-center uikit-justify-between uikit-font-switzer uikit-rounded-lg uikit-border uikit-border-border uikit-border-solid uikit-box-border">
      <div className="uikit-flex uikit-items-center uikit-gap-3">
        <div className="uikit-size-14 uikit-flex uikit-items-center uikit-justify-center">
          {accountInfo.iconSrc ? (
            <img
              className="uikit-size-[46px] uikit-rounded-[10px] uikit-border-solid uikit-border uikit-border-l1"
              src={accountInfo.iconSrc}
              alt=""
            />
          ) : (
            accountInfo.icon
          )}
        </div>
        <div className="uikit-flex uikit-flex-col uikit-gap-[2px]">
          <span className="uikit-text-t1 uikit-text-base uikit-font-medium uikit-font-switzer uikit-max-w-[141px]">
            {shortenAddress(accountInfo.address, 6, 4)}
          </span>
          <span className="uikit-text-t3 uikit-text-tiny uikit-font-switzer ">{accountInfo.name}</span>
        </div>
      </div>
      <div className="uikit-flex uikit-gap-x-3">
        <div
          ref={hoverRef}
          className={clsx(
            "uikit-flex uikit-items-center uikit-justify-center uikit-size-8 uikit-rounded-full uikit-bg-bg4 dark:uikit-bg-[#282828] uikit-cursor-pointer",
            {
              "uikit-opacity-50": isHover && !accountInfo?.activeBGColor,
            },
          )}
          style={{
            ...(isHover
              ? { backgroundColor: accountInfo?.activeBGColor, "--active-icon-color": accountInfo?.activeIconColor }
              : {}),
          }}
        >
          <TCopy
            className={clsx("uikit-bg-transparent", { "uikit-text-[var(--active-icon-color)]": isHover })}
            text={accountInfo.address}
            onCopy={onCopyAddress}
          />
        </div>
        {showSetting && (
          <div
            ref={hoverSettingRef}
            className={clsx(
              "uikit-flex uikit-items-center uikit-justify-center uikit-size-8 uikit-rounded-full uikit-bg-bg4 dark:uikit-bg-[#282828] uikit-cursor-pointer",
              {
                "uikit-opacity-50": isHoverSetting && !accountInfo?.activeBGColor,
              },
            )}
            style={{
              ...(isHoverSetting
                ? { backgroundColor: accountInfo?.activeBGColor, "--active-icon-color": accountInfo?.activeIconColor }
                : {}),
            }}
          >
            <TIcon
              name="tg_wallet_more"
              className={clsx("uikit-text-t1", { "uikit-text-[var(--active-icon-color)]": isHoverSetting })}
              onClick={() => setShowSettingPopup(true)}
            />
          </div>
        )}
      </div>
      <SettingPopup
        close
        back
        opened={showSettingPopup}
        onChangePayPin={onChangePayPin}
        onClose={onClose}
        onBack={onClose}
        theme={theme}
      />
    </div>
  );
};

export default AccountInfo;
