"use client";
import {
  coinbaseWallet,
  getInjectedConnector,
  getWalletConnectConnector,
  hasInjectedProvider,
  isAndroid,
  isIOS,
  isMobile,
  isSafari,
  metaMaskWallet,
  rainbowWallet,
  safeWallet,
  walletConnectWallet
} from "./chunk-QHNELB2K.js";

// src/wallets/walletConnectors/argentWallet/argentWallet.ts
var argentWallet = ({
  projectId,
  walletConnectParameters
}) => ({
  id: "argent",
  name: "Argent",
  iconUrl: async () => (await import("./argentWallet-M6SBG4CU.js")).default,
  iconBackground: "#fff",
  downloadUrls: {
    android: "https://play.google.com/store/apps/details?id=im.argent.contractwalletclient",
    ios: "https://apps.apple.com/us/app/argent/id1358741926",
    mobile: "https://argent.xyz/download-argent",
    qrCode: "https://argent.link/app"
  },
  mobile: {
    getUri: (uri) => {
      return isAndroid() ? uri : `argent://app/wc?uri=${encodeURIComponent(uri)}`;
    }
  },
  qrCode: {
    getUri: (uri) => uri,
    instructions: {
      learnMoreUrl: "https://argent.xyz/learn/what-is-a-crypto-wallet/",
      steps: [
        {
          description: "wallet_connectors.argent.qr_code.step1.description",
          step: "install",
          title: "wallet_connectors.argent.qr_code.step1.title"
        },
        {
          description: "wallet_connectors.argent.qr_code.step2.description",
          step: "create",
          title: "wallet_connectors.argent.qr_code.step2.title"
        },
        {
          description: "wallet_connectors.argent.qr_code.step3.description",
          step: "scan",
          title: "wallet_connectors.argent.qr_code.step3.title"
        }
      ]
    }
  },
  createConnector: getWalletConnectConnector({
    projectId,
    walletConnectParameters
  })
});

// src/wallets/walletConnectors/berasigWallet/berasigWallet.ts
var berasigWallet = ({
  projectId,
  walletConnectParameters
}) => {
  const isBerasigWalletInjected = hasInjectedProvider({
    namespace: "berasig.ethereum"
  });
  const shouldUseWalletConnect = !isBerasigWalletInjected;
  return {
    id: "berasig",
    name: "BeraSig",
    iconUrl: async () => (await import("./berasigWallet-NNBFDHFK.js")).default,
    iconBackground: "#ffffff",
    installed: isBerasigWalletInjected,
    downloadUrls: {
      android: "https://play.google.com/store/apps/details?id=io.berasig.ios",
      ios: "https://apps.apple.com/us/app/berasig-wallet-on-berachain/id6502052535",
      qrCode: "https://berasig.com",
      mobile: "https://berasig.com",
      browserExtension: "https://chromewebstore.google.com/detail/berasig/ckedkkegjbflcfblcjklibnedmfjppbj"
    },
    extension: {
      instructions: {
        steps: [
          {
            description: "wallet_connectors.berasig.extension.step1.description",
            step: "install",
            title: "wallet_connectors.berasig.extension.step1.title"
          },
          {
            description: "wallet_connectors.berasig.extension.step2.description",
            step: "create",
            title: "wallet_connectors.berasig.extension.step2.title"
          },
          {
            description: "wallet_connectors.berasig.extension.step3.description",
            step: "refresh",
            title: "wallet_connectors.berasig.extension.step3.title"
          }
        ],
        learnMoreUrl: "https://berasig.com"
      }
    },
    createConnector: shouldUseWalletConnect ? getWalletConnectConnector({
      projectId,
      walletConnectParameters
    }) : getInjectedConnector({
      namespace: "berasig.ethereum"
    })
  };
};

// src/wallets/walletConnectors/bestWallet/bestWallet.ts
var bestWallet = ({
  projectId,
  walletConnectParameters
}) => ({
  id: "bestWallet",
  name: "Best Wallet",
  iconUrl: async () => (await import("./bestWallet-XRIABRUE.js")).default,
  iconBackground: "#5961FF",
  downloadUrls: {
    android: "https://best.sng.link/Dnio2/rto7?_smtype=3",
    ios: "https://best.sng.link/Dnio2/rto7?_smtype=3",
    mobile: "https://best.sng.link/Dnio2/rto7?_smtype=3",
    qrCode: "https://best.sng.link/Dnio2/rto7?_smtype=3"
  },
  mobile: {
    getUri: (uri) => {
      return `bw://connect/wc?uri=${encodeURIComponent(uri)}`;
    }
  },
  qrCode: {
    getUri: (uri) => uri,
    instructions: {
      learnMoreUrl: "https://best.sng.link/Dnio2/rto7?_smtype=3",
      steps: [
        {
          description: "wallet_connectors.best.qr_code.step1.description",
          step: "install",
          title: "wallet_connectors.best.qr_code.step1.title"
        },
        {
          description: "wallet_connectors.best.qr_code.step2.description",
          step: "create",
          title: "wallet_connectors.best.qr_code.step2.title"
        },
        {
          description: "wallet_connectors.best.qr_code.step3.description",
          step: "scan",
          title: "wallet_connectors.best.qr_code.step3.title"
        }
      ]
    }
  },
  createConnector: getWalletConnectConnector({
    projectId,
    walletConnectParameters
  })
});

// src/wallets/walletConnectors/bifrostWallet/bifrostWallet.ts
var bifrostWallet = ({
  projectId,
  walletConnectParameters
}) => {
  const isBifrostInjected = hasInjectedProvider({ flag: "isBifrost" });
  const shouldUseWalletConnect = !isBifrostInjected;
  const getUri = (uri) => {
    return isAndroid() ? uri : `https://app.bifrostwallet.com/wc?uri=${encodeURIComponent(uri)}`;
  };
  return {
    id: "bifrostWallet",
    name: "Bifrost Wallet",
    iconUrl: async () => (await import("./bifrostWallet-ORF3DABG.js")).default,
    iconBackground: "#fff",
    installed: !shouldUseWalletConnect ? isBifrostInjected : void 0,
    downloadUrls: {
      android: "https://play.google.com/store/apps/details?id=com.bifrostwallet.app",
      ios: "https://apps.apple.com/us/app/bifrost-wallet/id1577198351",
      qrCode: "https://bifrostwallet.com/#download-app"
    },
    mobile: {
      getUri: shouldUseWalletConnect ? getUri : void 0
    },
    qrCode: shouldUseWalletConnect ? {
      getUri: (uri) => uri,
      instructions: {
        learnMoreUrl: "https://support.bifrostwallet.com/en/articles/6886814-how-to-use-walletconnect",
        steps: [
          {
            description: "wallet_connectors.bifrost.qr_code.step1.description",
            step: "install",
            title: "wallet_connectors.bifrost.qr_code.step1.title"
          },
          {
            description: "wallet_connectors.bifrost.qr_code.step2.description",
            step: "create",
            title: "wallet_connectors.bifrost.qr_code.step2.title"
          },
          {
            description: "wallet_connectors.bifrost.qr_code.step3.description",
            step: "scan",
            title: "wallet_connectors.bifrost.qr_code.step3.title"
          }
        ]
      }
    } : void 0,
    createConnector: shouldUseWalletConnect ? getWalletConnectConnector({
      projectId,
      walletConnectParameters
    }) : getInjectedConnector({
      flag: "isBifrost"
    })
  };
};

// src/wallets/walletConnectors/binanceWallet/binanceWallet.ts
var binanceWallet = ({
  projectId,
  walletConnectParameters
}) => ({
  id: "binance",
  name: "Binance Wallet",
  iconUrl: async () => (await import("./binanceWallet-BCWLBY3Q.js")).default,
  iconBackground: "#000000",
  downloadUrls: {
    android: "https://play.google.com/store/apps/details?id=com.binance.dev",
    ios: "https://apps.apple.com/us/app/id1436799971",
    mobile: "https://www.binance.com/en/download",
    qrCode: "https://www.binance.com/en/web3wallet"
  },
  mobile: {
    getUri: (uri) => {
      return isAndroid() ? uri : `bnc://app.binance.com/cedefi/wc?uri=${encodeURIComponent(uri)}`;
    }
  },
  qrCode: {
    getUri: (uri) => uri,
    instructions: {
      learnMoreUrl: "https://www.binance.com/en/web3wallet",
      steps: [
        {
          description: "wallet_connectors.binance.qr_code.step1.description",
          step: "install",
          title: "wallet_connectors.binance.qr_code.step1.title"
        },
        {
          description: "wallet_connectors.binance.qr_code.step2.description",
          step: "create",
          title: "wallet_connectors.binance.qr_code.step2.title"
        },
        {
          description: "wallet_connectors.binance.qr_code.step3.description",
          step: "scan",
          title: "wallet_connectors.binance.qr_code.step3.title"
        }
      ]
    }
  },
  createConnector: getWalletConnectConnector({
    projectId,
    walletConnectParameters
  })
});

// src/wallets/walletConnectors/bitgetWallet/bitgetWallet.ts
var bitgetWallet = ({
  projectId,
  walletConnectParameters
}) => {
  const isBitKeepInjected = hasInjectedProvider({
    namespace: "bitkeep.ethereum",
    flag: "isBitKeep"
  });
  const shouldUseWalletConnect = !isBitKeepInjected;
  return {
    id: "bitget",
    name: "Bitget Wallet",
    rdns: "com.bitget.web3",
    iconUrl: async () => (await import("./bitgetWallet-CLYTW54T.js")).default,
    iconAccent: "#f6851a",
    iconBackground: "#fff",
    installed: !shouldUseWalletConnect ? isBitKeepInjected : void 0,
    downloadUrls: {
      android: "https://web3.bitget.com/en/wallet-download?type=0",
      ios: "https://apps.apple.com/app/bitkeep/id1395301115",
      mobile: "https://web3.bitget.com/en/wallet-download?type=2",
      qrCode: "https://web3.bitget.com/en/wallet-download",
      chrome: "https://chrome.google.com/webstore/detail/bitkeep-crypto-nft-wallet/jiidiaalihmmhddjgbnbgdfflelocpak",
      browserExtension: "https://web3.bitget.com/en/wallet-download"
    },
    extension: {
      instructions: {
        learnMoreUrl: "https://web3.bitget.com/en/academy",
        steps: [
          {
            description: "wallet_connectors.bitget.extension.step1.description",
            step: "install",
            title: "wallet_connectors.bitget.extension.step1.title"
          },
          {
            description: "wallet_connectors.bitget.extension.step2.description",
            step: "create",
            title: "wallet_connectors.bitget.extension.step2.title"
          },
          {
            description: "wallet_connectors.bitget.extension.step3.description",
            step: "refresh",
            title: "wallet_connectors.bitget.extension.step3.description"
          }
        ]
      }
    },
    mobile: {
      getUri: shouldUseWalletConnect ? (uri) => {
        return isAndroid() ? uri : `bitkeep://wc?uri=${encodeURIComponent(uri)}`;
      } : void 0
    },
    qrCode: shouldUseWalletConnect ? {
      getUri: (uri) => uri,
      instructions: {
        learnMoreUrl: "https://web3.bitget.com/en/academy",
        steps: [
          {
            description: "wallet_connectors.bitget.qr_code.step1.description",
            step: "install",
            title: "wallet_connectors.bitget.qr_code.step1.title"
          },
          {
            description: "wallet_connectors.bitget.qr_code.step2.description",
            step: "create",
            title: "wallet_connectors.bitget.qr_code.step2.title"
          },
          {
            description: "wallet_connectors.bitget.qr_code.step3.description",
            step: "scan",
            title: "wallet_connectors.bitget.qr_code.step3.title"
          }
        ]
      }
    } : void 0,
    createConnector: shouldUseWalletConnect ? getWalletConnectConnector({
      projectId,
      walletConnectParameters
    }) : getInjectedConnector({
      namespace: "bitkeep.ethereum",
      flag: "isBitKeep"
    })
  };
};

// src/wallets/walletConnectors/bitskiWallet/bitskiWallet.ts
var bitskiWallet = () => ({
  id: "bitski",
  name: "Bitski",
  installed: hasInjectedProvider({ flag: "isBitski" }),
  iconUrl: async () => (await import("./bitskiWallet-X5NWL5CE.js")).default,
  iconBackground: "#fff",
  downloadUrls: {
    chrome: "https://chrome.google.com/webstore/detail/bitski/feejiigddaafeojfddjjlmfkabimkell",
    browserExtension: "https://bitski.com"
  },
  extension: {
    instructions: {
      learnMoreUrl: "https://bitski.zendesk.com/hc/articles/12803972818836-How-to-install-the-Bitski-browser-extension",
      steps: [
        {
          description: "wallet_connectors.bitski.extension.step1.description",
          step: "install",
          title: "wallet_connectors.bitski.extension.step1.title"
        },
        {
          description: "wallet_connectors.bitski.extension.step2.description",
          step: "create",
          title: "wallet_connectors.bitski.extension.step2.title"
        },
        {
          description: "wallet_connectors.bitski.extension.step3.description",
          step: "refresh",
          title: "wallet_connectors.bitski.extension.step3.title"
        }
      ]
    }
  },
  createConnector: getInjectedConnector({ flag: "isBitski" })
});

// src/wallets/walletConnectors/bitverseWallet/bitverseWallet.ts
var bitverseWallet = ({
  projectId,
  walletConnectParameters
}) => ({
  id: "bitverse",
  name: "Bitverse Wallet",
  iconUrl: async () => (await import("./bitverseWallet-6SGDFATJ.js")).default,
  iconBackground: "#171728",
  downloadUrls: {
    android: "https://play.google.com/store/apps/details?id=com.bitverse.app&pli=1",
    ios: "https://apps.apple.com/us/app/bitverse-discover-web3-wealth/id1645515614",
    qrCode: "https://www.bitverse.zone/download"
  },
  mobile: {
    getUri: (uri) => `bitverseapp://open/wallet/wc?uri=${encodeURIComponent(uri)}`
  },
  qrCode: {
    getUri: (uri) => uri,
    instructions: {
      learnMoreUrl: "https://www.bitverse.zone",
      steps: [
        {
          description: "wallet_connectors.bitverse.qr_code.step1.description",
          step: "install",
          title: "wallet_connectors.bitverse.qr_code.step1.title"
        },
        {
          description: "wallet_connectors.bitverse.qr_code.step2.description",
          step: "create",
          title: "wallet_connectors.bitverse.qr_code.step2.title"
        },
        {
          description: "wallet_connectors.bitverse.qr_code.step3.description",
          step: "scan",
          title: "wallet_connectors.bitverse.qr_code.step3.title"
        }
      ]
    }
  },
  createConnector: getWalletConnectConnector({
    projectId,
    walletConnectParameters
  })
});

// src/wallets/walletConnectors/bloomWallet/bloomWallet.ts
var bloomWallet = ({
  projectId,
  walletConnectParameters
}) => ({
  id: "bloom",
  name: "Bloom Wallet",
  iconBackground: "#000",
  iconAccent: "#000",
  iconUrl: async () => (await import("./bloomWallet-MXLAOWS6.js")).default,
  downloadUrls: {
    desktop: "https://bloomwallet.io/"
  },
  desktop: {
    getUri: (uri) => `bloom://wallet-connect/wc?uri=${encodeURIComponent(uri)}`,
    instructions: {
      learnMoreUrl: "https://bloomwallet.io/",
      steps: [
        {
          description: "wallet_connectors.bloom.desktop.step1.description",
          step: "install",
          title: "wallet_connectors.bloom.desktop.step1.title"
        },
        {
          description: "wallet_connectors.bloom.desktop.step2.description",
          step: "create",
          title: "wallet_connectors.bloom.desktop.step2.title"
        },
        {
          description: "wallet_connectors.bloom.desktop.step3.description",
          step: "refresh",
          title: "wallet_connectors.bloom.desktop.step3.title"
        }
      ]
    }
  },
  createConnector: getWalletConnectConnector({
    projectId,
    walletConnectParameters
  })
});

// src/wallets/walletConnectors/braveWallet/braveWallet.ts
var braveWallet = () => ({
  id: "brave",
  name: "Brave Wallet",
  rdns: "com.brave.wallet",
  iconUrl: async () => (await import("./braveWallet-6QAF4GDN.js")).default,
  iconBackground: "#fff",
  installed: hasInjectedProvider({ flag: "isBraveWallet" }),
  downloadUrls: {
    // We're opting not to provide a download prompt if Brave isn't the current
    // browser since it's unlikely to be a desired behavior for users. It's
    // more of a convenience for users who are already using Brave rather than
    // an explicit wallet choice for users coming from other browsers.
  },
  createConnector: getInjectedConnector({ flag: "isBraveWallet" })
});

// src/wallets/walletConnectors/bybitWallet/bybitWallet.ts
var bybitWallet = ({
  projectId,
  walletConnectParameters
}) => {
  const isBybitInjected = hasInjectedProvider({
    namespace: "bybitWallet"
  });
  const shouldUseWalletConnect = !isBybitInjected;
  const getUri = (uri) => {
    return `bybitapp://open/route?targetUrl=by://web3/walletconnect/wc?uri=${encodeURIComponent(
      uri
    )}`;
  };
  return {
    id: "bybit",
    name: "Bybit Wallet",
    rdns: "com.bybit",
    iconUrl: async () => (await import("./bybitWallet-GR4PFINZ.js")).default,
    installed: !shouldUseWalletConnect ? isBybitInjected : void 0,
    iconBackground: "#000000",
    downloadUrls: {
      chrome: "https://chromewebstore.google.com/detail/bybit-wallet/pdliaogehgdbhbnmkklieghmmjkpigpa",
      browserExtension: "https://www.bybit.com/en/web3",
      android: "https://play.google.com/store/apps/details?id=com.bybit.app",
      ios: "https://apps.apple.com/us/app/bybit-buy-trade-crypto/id1488296980",
      mobile: "https://www.bybit.com/en/web3",
      qrCode: "https://www.bybit.com/en/web3"
    },
    mobile: {
      getUri: shouldUseWalletConnect ? getUri : void 0
    },
    qrCode: shouldUseWalletConnect ? {
      getUri: (uri) => uri,
      instructions: {
        learnMoreUrl: "https://www.bybit.com/en/web3",
        steps: [
          {
            description: "wallet_connectors.bybit.qr_code.step1.description",
            step: "install",
            title: "wallet_connectors.bybit.qr_code.step1.title"
          },
          {
            description: "wallet_connectors.bybit.qr_code.step2.description",
            step: "create",
            title: "wallet_connectors.bybit.qr_code.step2.title"
          },
          {
            description: "wallet_connectors.bybit.qr_code.step3.description",
            step: "scan",
            title: "wallet_connectors.bybit.qr_code.step3.title"
          }
        ]
      }
    } : void 0,
    extension: {
      instructions: {
        learnMoreUrl: "https://www.bybit.com/en/web3",
        steps: [
          {
            description: "wallet_connectors.bybit.extension.step1.description",
            step: "install",
            title: "wallet_connectors.bybit.extension.step1.title"
          },
          {
            description: "wallet_connectors.bybit.extension.step2.description",
            step: "create",
            title: "wallet_connectors.bybit.extension.step2.title"
          },
          {
            description: "wallet_connectors.bybit.extension.step3.description",
            step: "refresh",
            title: "wallet_connectors.bybit.extension.step3.title"
          }
        ]
      }
    },
    createConnector: shouldUseWalletConnect ? getWalletConnectConnector({
      projectId,
      walletConnectParameters
    }) : getInjectedConnector({
      namespace: "bybitWallet"
    })
  };
};

// src/wallets/walletConnectors/clvWallet/clvWallet.ts
var clvWallet = ({
  projectId,
  walletConnectParameters
}) => {
  const isCLVInjected = hasInjectedProvider({ namespace: "clover" });
  const shouldUseWalletConnect = !isCLVInjected;
  return {
    id: "clv",
    name: "CLV",
    iconUrl: async () => (await import("./clvWallet-ZIMSRU5J.js")).default,
    iconBackground: "#fff",
    iconAccent: "#BDFDE2",
    installed: isCLVInjected,
    downloadUrls: {
      chrome: "https://chrome.google.com/webstore/detail/clv-wallet/nhnkbkgjikgcigadomkphalanndcapjk",
      ios: "https://apps.apple.com/app/clover-wallet/id1570072858",
      mobile: "https://apps.apple.com/app/clover-wallet/id1570072858",
      qrCode: "https://clv.org/"
    },
    extension: {
      instructions: {
        learnMoreUrl: "https://clv.org/",
        steps: [
          {
            description: "wallet_connectors.clv.extension.step1.description",
            step: "install",
            title: "wallet_connectors.clv.extension.step1.title"
          },
          {
            description: "wallet_connectors.clv.extension.step2.description",
            step: "create",
            title: "wallet_connectors.clv.extension.step2.title"
          },
          {
            description: "wallet_connectors.clv.extension.step3.description",
            step: "refresh",
            title: "wallet_connectors.clv.extension.step3.title"
          }
        ]
      }
    },
    mobile: {
      getUri: shouldUseWalletConnect ? (uri) => uri : void 0
    },
    qrCode: shouldUseWalletConnect ? {
      getUri: (uri) => uri,
      instructions: {
        learnMoreUrl: "https://clv.org/",
        steps: [
          {
            description: "wallet_connectors.clv.qr_code.step1.description",
            step: "install",
            title: "wallet_connectors.clv.qr_code.step1.title"
          },
          {
            description: "wallet_connectors.clv.qr_code.step2.description",
            step: "create",
            title: "wallet_connectors.clv.qr_code.step2.title"
          },
          {
            description: "wallet_connectors.clv.qr_code.step3.description",
            step: "scan",
            title: "wallet_connectors.clv.qr_code.step3.title"
          }
        ]
      }
    } : void 0,
    createConnector: shouldUseWalletConnect ? getWalletConnectConnector({
      projectId,
      walletConnectParameters
    }) : getInjectedConnector({ namespace: "clover" })
  };
};

// src/wallets/walletConnectors/coin98Wallet/coin98Wallet.ts
var coin98Wallet = ({
  projectId,
  walletConnectParameters
}) => {
  const isCoin98WalletInjected = hasInjectedProvider({
    namespace: "coin98.provider",
    flag: "isCoin98"
  });
  const shouldUseWalletConnect = !isCoin98WalletInjected;
  return {
    id: "coin98",
    name: "Coin98 Wallet",
    iconUrl: async () => (await import("./coin98Wallet-RFXRNVWP.js")).default,
    installed: isCoin98WalletInjected,
    iconAccent: "#CDA349",
    iconBackground: "#fff",
    rdns: "coin98.com",
    downloadUrls: {
      android: "https://play.google.com/store/apps/details?id=coin98.crypto.finance.media",
      ios: "https://apps.apple.com/vn/app/coin98-super-app/id1561969966",
      mobile: "https://coin98.com/wallet",
      qrCode: "https://coin98.com/wallet",
      chrome: "https://chrome.google.com/webstore/detail/coin98-wallet/aeachknmefphepccionboohckonoeemg",
      browserExtension: "https://coin98.com/wallet"
    },
    mobile: {
      getUri: shouldUseWalletConnect ? (uri) => uri : void 0
    },
    qrCode: shouldUseWalletConnect ? {
      getUri: (uri) => uri,
      instructions: {
        learnMoreUrl: "https://coin98.com/wallet",
        steps: [
          {
            description: "wallet_connectors.coin98.qr_code.step1.description",
            step: "install",
            title: "wallet_connectors.coin98.qr_code.step1.title"
          },
          {
            description: "wallet_connectors.coin98.qr_code.step2.description",
            step: "create",
            title: "wallet_connectors.coin98.qr_code.step2.title"
          },
          {
            description: "wallet_connectors.coin98.qr_code.step3.description",
            step: "scan",
            title: "wallet_connectors.coin98.qr_code.step3.title"
          }
        ]
      }
    } : void 0,
    extension: {
      instructions: {
        learnMoreUrl: "https://coin98.com/wallet",
        steps: [
          {
            description: "wallet_connectors.coin98.extension.step1.description",
            step: "install",
            title: "wallet_connectors.coin98.extension.step1.title"
          },
          {
            description: "wallet_connectors.coin98.extension.step2.description",
            step: "create",
            title: "wallet_connectors.coin98.extension.step2.title"
          },
          {
            description: "wallet_connectors.coin98.extension.step3.description",
            step: "refresh",
            title: "wallet_connectors.coin98.extension.step3.title"
          }
        ]
      }
    },
    createConnector: shouldUseWalletConnect ? getWalletConnectConnector({
      projectId,
      walletConnectParameters
    }) : getInjectedConnector({
      namespace: "coin98Wallet",
      flag: "isCoin98"
    })
  };
};

// src/wallets/walletConnectors/compassWallet/compassWallet.ts
var compassWallet = () => {
  const isCompassInjected = hasInjectedProvider({ namespace: "compassEvm" });
  return {
    id: "compass",
    name: "Compass Wallet",
    installed: isCompassInjected,
    rdns: "io.leapwallet.CompassWallet",
    iconUrl: async () => (await import("./compassWallet-3LBTWCKI.js")).default,
    iconBackground: "#fff",
    downloadUrls: {
      chrome: "https://chromewebstore.google.com/detail/compass-wallet-for-sei/anokgmphncpekkhclmingpimjmcooifb",
      browserExtension: "https://compasswallet.io/download"
    },
    extension: {
      instructions: {
        learnMoreUrl: "https://compasswallet.io/download",
        steps: [
          {
            description: "wallet_connectors.compass.extension.step1.description",
            step: "install",
            title: "wallet_connectors.compass.extension.step1.title"
          },
          {
            description: "wallet_connectors.compass.extension.step2.description",
            step: "create",
            title: "wallet_connectors.compass.extension.step2.title"
          },
          {
            description: "wallet_connectors.compass.extension.step3.description",
            step: "refresh",
            title: "wallet_connectors.compass.extension.step3.title"
          }
        ]
      }
    },
    createConnector: getInjectedConnector({ namespace: "compassEvm" })
  };
};

// src/wallets/walletConnectors/coreWallet/coreWallet.ts
var coreWallet = ({
  projectId,
  walletConnectParameters
}) => {
  const isCoreInjected = hasInjectedProvider({
    namespace: "avalanche",
    flag: "isAvalanche"
  });
  const shouldUseWalletConnect = !isCoreInjected;
  return {
    id: "core",
    name: "Core",
    rdns: "app.core.extension",
    iconUrl: async () => (await import("./coreWallet-52SXITOT.js")).default,
    iconBackground: "#1A1A1C",
    installed: !shouldUseWalletConnect ? isCoreInjected : void 0,
    downloadUrls: {
      android: "https://play.google.com/store/apps/details?id=com.avaxwallet",
      ios: "https://apps.apple.com/us/app/core-wallet/id6443685999",
      mobile: "https://core.app/?downloadCoreMobile=1",
      qrCode: "https://core.app/?downloadCoreMobile=1",
      chrome: "https://chrome.google.com/webstore/detail/core-crypto-wallet-nft-ex/agoakfejjabomempkjlepdflaleeobhb",
      browserExtension: "https://extension.core.app/"
    },
    mobile: {
      getUri: shouldUseWalletConnect ? (uri) => uri : void 0
    },
    qrCode: shouldUseWalletConnect ? {
      getUri: (uri) => uri,
      instructions: {
        learnMoreUrl: "https://support.avax.network/en/articles/6115608-core-mobile-how-to-add-the-core-mobile-to-my-phone",
        steps: [
          {
            description: "wallet_connectors.core.qr_code.step1.description",
            step: "install",
            title: "wallet_connectors.core.qr_code.step1.title"
          },
          {
            description: "wallet_connectors.core.qr_code.step2.description",
            step: "create",
            title: "wallet_connectors.core.qr_code.step2.title"
          },
          {
            description: "wallet_connectors.core.qr_code.step3.description",
            step: "scan",
            title: "wallet_connectors.core.qr_code.step3.title"
          }
        ]
      }
    } : void 0,
    extension: {
      instructions: {
        learnMoreUrl: "https://extension.core.app/",
        steps: [
          {
            description: "wallet_connectors.core.extension.step1.description",
            step: "install",
            title: "wallet_connectors.core.extension.step1.title"
          },
          {
            description: "wallet_connectors.core.extension.step2.description",
            step: "create",
            title: "wallet_connectors.core.extension.step2.title"
          },
          {
            description: "wallet_connectors.core.extension.step3.description",
            step: "refresh",
            title: "wallet_connectors.core.extension.step3.title"
          }
        ]
      }
    },
    createConnector: shouldUseWalletConnect ? getWalletConnectConnector({
      projectId,
      walletConnectParameters
    }) : getInjectedConnector({
      namespace: "avalanche",
      flag: "isAvalanche"
    })
  };
};

// src/wallets/walletConnectors/dawnWallet/dawnWallet.ts
var dawnWallet = () => ({
  id: "dawn",
  name: "Dawn",
  iconUrl: async () => (await import("./dawnWallet-ONVAA3S4.js")).default,
  iconBackground: "#000000",
  installed: hasInjectedProvider({ flag: "isDawn" }),
  hidden: () => !isIOS(),
  downloadUrls: {
    ios: "https://apps.apple.com/us/app/dawn-ethereum-wallet/id1673143782",
    mobile: "https://dawnwallet.xyz"
  },
  createConnector: getInjectedConnector({ flag: "isDawn" })
});

// src/wallets/walletConnectors/desigWallet/desigWallet.ts
var desigWallet = () => {
  return {
    id: "desig",
    name: "Desig Wallet",
    iconUrl: async () => (await import("./desigWallet-WJMSF3PS.js")).default,
    iconBackground: "#ffffff",
    installed: hasInjectedProvider({ namespace: "desig.ethereum" }),
    downloadUrls: {
      android: "https://play.google.com/store/apps/details?id=io.desig.app",
      ios: "https://apps.apple.com/app/desig-wallet/id6450106028",
      qrCode: "https://desig.io",
      mobile: "https://desig.io",
      browserExtension: "https://chrome.google.com/webstore/detail/desig-wallet/panpgppehdchfphcigocleabcmcgfoca"
    },
    extension: {
      instructions: {
        steps: [
          {
            description: "wallet_connectors.desig.extension.step1.description",
            step: "install",
            title: "wallet_connectors.desig.extension.step1.title"
          },
          {
            description: "wallet_connectors.desig.extension.step2.description",
            step: "create",
            title: "wallet_connectors.desig.extension.step2.title"
          },
          {
            description: "wallet_connectors.desig.extension.step3.description",
            step: "refresh",
            title: "wallet_connectors.desig.extension.step3.title"
          }
        ],
        learnMoreUrl: "https://desig.io"
      }
    },
    createConnector: getInjectedConnector({
      namespace: "desig.ethereum"
    })
  };
};

// src/wallets/walletConnectors/enkryptWallet/enkryptWallet.ts
var enkryptWallet = () => {
  return {
    id: "enkrypt",
    name: "Enkrypt Wallet",
    rdns: "com.enkrypt",
    installed: hasInjectedProvider({ namespace: "enkrypt.providers.ethereum" }),
    iconUrl: async () => (await import("./enkryptWallet-FR4QCDFK.js")).default,
    iconBackground: "#FFFFFF",
    downloadUrls: {
      qrCode: "https://www.enkrypt.com",
      chrome: "https://chrome.google.com/webstore/detail/enkrypt-ethereum-polkadot/kkpllkodjeloidieedojogacfhpaihoh",
      browserExtension: "https://www.enkrypt.com/",
      edge: "https://microsoftedge.microsoft.com/addons/detail/enkrypt-ethereum-polkad/gfenajajnjjmmdojhdjmnngomkhlnfjl",
      firefox: "https://addons.mozilla.org/en-US/firefox/addon/enkrypt/",
      opera: "https://addons.opera.com/en/extensions/details/enkrypt/",
      safari: "https://apps.apple.com/app/enkrypt-web3-wallet/id1640164309"
    },
    extension: {
      instructions: {
        learnMoreUrl: "https://blog.enkrypt.com/what-is-a-web3-wallet/",
        steps: [
          {
            description: "wallet_connectors.enkrypt.extension.step1.description",
            step: "install",
            title: "wallet_connectors.enkrypt.extension.step1.title"
          },
          {
            description: "wallet_connectors.enkrypt.extension.step2.description",
            step: "create",
            title: "wallet_connectors.enkrypt.extension.step2.title"
          },
          {
            description: "wallet_connectors.enkrypt.extension.step3.description",
            step: "refresh",
            title: "wallet_connectors.enkrypt.extension.step3.title"
          }
        ]
      }
    },
    createConnector: getInjectedConnector({
      namespace: "enkrypt.providers.ethereum"
    })
  };
};

// src/wallets/walletConnectors/foxWallet/foxWallet.ts
var foxWallet = ({
  projectId,
  walletConnectParameters
}) => {
  const isFoxInjected = hasInjectedProvider({
    namespace: "foxwallet.ethereum"
  });
  const shouldUseWalletConnect = !isFoxInjected;
  return {
    id: "foxwallet",
    name: "FoxWallet",
    iconUrl: async () => (await import("./foxWallet-5ESSNXJV.js")).default,
    iconBackground: "#fff",
    downloadUrls: {
      android: "https://play.google.com/store/apps/details?id=com.foxwallet.play",
      ios: "https://apps.apple.com/app/foxwallet-crypto-web3/id1590983231",
      qrCode: "https://foxwallet.com/download"
    },
    mobile: {
      getUri: shouldUseWalletConnect ? (uri) => {
        return `foxwallet://wc?uri=${encodeURIComponent(uri)}`;
      } : void 0
    },
    qrCode: shouldUseWalletConnect ? {
      getUri: (uri) => uri,
      instructions: {
        learnMoreUrl: "https://foxwallet.com",
        steps: [
          {
            description: "wallet_connectors.fox.qr_code.step1.description",
            step: "install",
            title: "wallet_connectors.fox.qr_code.step1.title"
          },
          {
            description: "wallet_connectors.fox.qr_code.step2.description",
            step: "create",
            title: "wallet_connectors.fox.qr_code.step2.title"
          },
          {
            description: "wallet_connectors.fox.qr_code.step3.description",
            step: "scan",
            title: "wallet_connectors.fox.qr_code.step3.title"
          }
        ]
      }
    } : void 0,
    createConnector: shouldUseWalletConnect ? getWalletConnectConnector({
      projectId,
      walletConnectParameters
    }) : getInjectedConnector({ namespace: "foxwallet.ethereum" })
  };
};

// src/wallets/walletConnectors/frameWallet/frameWallet.ts
var frameWallet = () => ({
  id: "frame",
  name: "Frame",
  rdns: "sh.frame",
  installed: hasInjectedProvider({ flag: "isFrame" }),
  iconUrl: async () => (await import("./frameWallet-FDBUY4AA.js")).default,
  iconBackground: "#121C20",
  downloadUrls: {
    browserExtension: "https://frame.sh/"
  },
  extension: {
    instructions: {
      learnMoreUrl: "https://docs.frame.sh/docs/Getting%20Started/Installation/",
      steps: [
        {
          description: "wallet_connectors.frame.extension.step1.description",
          step: "install",
          title: "wallet_connectors.frame.extension.step1.title"
        },
        {
          description: "wallet_connectors.frame.extension.step2.description",
          step: "create",
          title: "wallet_connectors.frame.extension.step2.title"
        },
        {
          description: "wallet_connectors.frame.extension.step3.description",
          step: "refresh",
          title: "wallet_connectors.frame.extension.step3.title"
        }
      ]
    }
  },
  createConnector: getInjectedConnector({ flag: "isFrame" })
});

// src/wallets/walletConnectors/frontierWallet/frontierWallet.ts
var frontierWallet = ({
  projectId,
  walletConnectParameters
}) => {
  const isFrontierInjected = hasInjectedProvider({
    namespace: "frontier.ethereum",
    flag: "isFrontier"
  });
  const shouldUseWalletConnect = !isFrontierInjected;
  return {
    id: "frontier",
    name: "Frontier Wallet",
    rdns: "xyz.frontier.wallet",
    installed: isFrontierInjected,
    iconUrl: async () => (await import("./frontierWallet-HNIG7QYQ.js")).default,
    iconBackground: "#CC703C",
    downloadUrls: {
      android: "https://play.google.com/store/apps/details?id=com.frontierwallet",
      ios: "https://apps.apple.com/us/app/frontier-crypto-defi-wallet/id1482380988",
      qrCode: "https://www.frontier.xyz/download",
      chrome: "https://chrome.google.com/webstore/detail/frontier-wallet/kppfdiipphfccemcignhifpjkapfbihd",
      browserExtension: "https://www.frontier.xyz/download"
    },
    mobile: {
      getUri: shouldUseWalletConnect ? (uri) => {
        return isAndroid() ? `frontier://wc?uri=${encodeURIComponent(uri)}` : uri;
      } : void 0
    },
    qrCode: shouldUseWalletConnect ? {
      getUri: (uri) => {
        return isAndroid() ? `frontier://wc?uri=${encodeURIComponent(uri)}` : uri;
      },
      instructions: {
        learnMoreUrl: "https://help.frontier.xyz/en/",
        steps: [
          {
            description: "wallet_connectors.im_token.qr_code.step1.description",
            step: "install",
            title: "wallet_connectors.im_token.qr_code.step1.title"
          },
          {
            description: "wallet_connectors.im_token.qr_code.step2.description",
            step: "create",
            title: "wallet_connectors.im_token.qr_code.step2.title"
          },
          {
            description: "wallet_connectors.im_token.qr_code.step3.description",
            step: "scan",
            title: "wallet_connectors.im_token.qr_code.step3.title"
          }
        ]
      }
    } : void 0,
    extension: {
      instructions: {
        learnMoreUrl: "https://help.frontier.xyz/en/articles/6967236-setting-up-frontier-on-your-device",
        steps: [
          {
            description: "wallet_connectors.frontier.extension.step1.description",
            step: "install",
            title: "wallet_connectors.frontier.extension.step1.title"
          },
          {
            description: "wallet_connectors.frontier.extension.step2.description",
            step: "create",
            title: "wallet_connectors.frontier.extension.step2.title"
          },
          {
            description: "wallet_connectors.frontier.extension.step3.description",
            step: "refresh",
            title: "wallet_connectors.frontier.extension.step3.title"
          }
        ]
      }
    },
    createConnector: shouldUseWalletConnect ? getWalletConnectConnector({ projectId, walletConnectParameters }) : getInjectedConnector({
      namespace: "frontier.ethereum",
      flag: "isFrontier"
    })
  };
};

// src/wallets/walletConnectors/gateWallet/gateWallet.ts
var gateWallet = ({
  projectId,
  walletConnectParameters
}) => {
  const isGateInjected = hasInjectedProvider({ namespace: "gatewallet" });
  const shouldUseWalletConnect = !isGateInjected;
  return {
    id: "gate",
    name: "Gate Wallet",
    rdns: "io.gate.wallet",
    iconUrl: async () => (await import("./gateWallet-ZVEZILRP.js")).default,
    iconAccent: "#fff",
    iconBackground: "#fff",
    downloadUrls: {
      android: "https://play.google.com/store/apps/details?id=com.gateio.gateio",
      ios: "https://apps.apple.com/us/app/gate-io-buy-bitcoin-crypto/id1294998195",
      mobile: "https://www.gate.io/mobileapp",
      qrCode: "https://www.gate.io/web3",
      chrome: "https://chromewebstore.google.com/detail/gate-wallet/cpmkedoipcpimgecpmgpldfpohjplkpp",
      browserExtension: "https://www.gate.io/web3"
    },
    mobile: {
      getUri: shouldUseWalletConnect ? (uri) => {
        return isAndroid() ? uri : `gtweb3wallet://wc?uri=${encodeURIComponent(uri)}`;
      } : void 0
    },
    qrCode: shouldUseWalletConnect ? {
      getUri: (uri) => uri,
      instructions: {
        learnMoreUrl: "https://www.gate.io/learn",
        steps: [
          {
            description: "wallet_connectors.gate.qr_code.step1.description",
            step: "install",
            title: "wallet_connectors.gate.qr_code.step1.title"
          },
          {
            description: "wallet_connectors.gate.qr_code.step2.description",
            step: "create",
            title: "wallet_connectors.gate.qr_code.step2.title"
          },
          {
            description: "wallet_connectors.gate.qr_code.step3.description",
            step: "scan",
            title: "wallet_connectors.gate.qr_code.step3.title"
          }
        ]
      }
    } : void 0,
    extension: {
      instructions: {
        learnMoreUrl: "https://www.gate.io/learn",
        steps: [
          {
            description: "wallet_connectors.gate.extension.step1.description",
            step: "install",
            title: "wallet_connectors.gate.extension.step1.title"
          },
          {
            description: "wallet_connectors.gate.extension.step2.description",
            step: "create",
            title: "wallet_connectors.gate.extension.step2.title"
          },
          {
            description: "wallet_connectors.gate.extension.step3.description",
            step: "refresh",
            title: "wallet_connectors.gate.extension.step3.title"
          }
        ]
      }
    },
    createConnector: shouldUseWalletConnect ? getWalletConnectConnector({
      projectId,
      walletConnectParameters
    }) : getInjectedConnector({ namespace: "gatewallet" })
  };
};

// src/wallets/walletConnectors/imTokenWallet/imTokenWallet.ts
var imTokenWallet = ({
  projectId,
  walletConnectParameters
}) => ({
  id: "imToken",
  name: "imToken",
  iconUrl: async () => (await import("./imTokenWallet-N2MYFADO.js")).default,
  iconBackground: "#098de6",
  downloadUrls: {
    android: "https://play.google.com/store/apps/details?id=im.token.app",
    ios: "https://itunes.apple.com/us/app/imtoken2/id1384798940",
    mobile: "https://token.im/download",
    qrCode: "https://token.im/download"
  },
  mobile: {
    getUri: (uri) => {
      return `imtokenv2://wc?uri=${encodeURIComponent(uri)}`;
    }
  },
  qrCode: {
    getUri: (uri) => uri,
    instructions: {
      learnMoreUrl: typeof window !== "undefined" && window.navigator.language.includes("zh") ? "https://support.token.im/hc/zh-cn/categories/360000925393" : "https://support.token.im/hc/en-us/categories/360000925393",
      steps: [
        {
          description: "wallet_connectors.im_token.qr_code.step1.description",
          step: "install",
          title: "wallet_connectors.im_token.qr_code.step1.title"
        },
        {
          description: "wallet_connectors.im_token.qr_code.step2.description",
          step: "create",
          title: "wallet_connectors.im_token.qr_code.step2.title"
        },
        {
          description: "wallet_connectors.im_token.qr_code.step3.description",
          step: "scan",
          title: "wallet_connectors.im_token.qr_code.step3.title"
        }
      ]
    }
  },
  createConnector: getWalletConnectConnector({
    projectId,
    walletConnectParameters
  })
});

// src/wallets/walletConnectors/injectedWallet/injectedWallet.ts
var injectedWallet = () => ({
  id: "injected",
  name: "Browser Wallet",
  iconUrl: async () => (await import("./injectedWallet-H7LYKTQS.js")).default,
  iconBackground: "#fff",
  createConnector: getInjectedConnector({})
});

// src/wallets/walletConnectors/iopayWallet/iopayWallet.ts
function isIoPayMobile() {
  return typeof navigator !== "undefined" && typeof navigator.userAgent !== "undefined" && (navigator?.userAgent.includes("IoPayAndroid") || navigator?.userAgent.includes("IoPayiOs"));
}
var iopayWallet = ({
  projectId,
  walletConnectParameters
}) => ({
  id: "iopay",
  name: "ioPay Wallet",
  iconUrl: async () => (await import("./iopayWallet-IJHJ7NYT.js")).default,
  iconBackground: "#fff",
  downloadUrls: {
    android: "https://play.google.com/store/apps/details?id=io.iotex.iopay.gp&pli=1",
    ios: "https://apps.apple.com/us/app/iopay-multichain-crypto-wallet/id1478086371",
    qrCode: "https://iopay.me/",
    browserExtension: "https://iopay.me/"
  },
  mobile: {
    getUri: (uri) => {
      return isAndroid() ? uri : `iopay://wc?uri=${encodeURIComponent(uri)}`;
    }
  },
  qrCode: {
    getUri: (uri) => uri,
    instructions: {
      learnMoreUrl: "https://iopay.me/",
      steps: [
        {
          description: "wallet_connectors.iopay.qr_code.step1.description",
          step: "install",
          title: "wallet_connectors.iopay.qr_code.step1.title"
        },
        {
          description: "wallet_connectors.iopay.qr_code.step2.description",
          step: "create",
          title: "wallet_connectors.iopay.qr_code.step2.title"
        },
        {
          description: "wallet_connectors.iopay.qr_code.step3.description",
          step: "scan",
          title: "wallet_connectors.iopay.qr_code.step3.title"
        }
      ]
    }
  },
  createConnector: isIoPayMobile() ? getInjectedConnector({}) : getWalletConnectConnector({
    projectId,
    walletConnectParameters
  })
});

// src/wallets/walletConnectors/kaiaWallet/kaiaWallet.ts
var kaiaWallet = ({
  projectId,
  walletConnectParameters
}) => {
  const isKaiaWalletInjected = hasInjectedProvider({
    namespace: "klaytn"
  });
  const shouldUseWalletConnect = !isKaiaWalletInjected;
  const getUri = (uri) => {
    return `kaikas://walletconnect?uri=${encodeURIComponent(uri)}`;
  };
  return {
    id: "kaia",
    name: "Kaia Wallet",
    iconUrl: async () => (await import("./kaiaWallet-5K6WZ3AH.js")).default,
    installed: isKaiaWalletInjected || void 0,
    iconBackground: "#fff",
    downloadUrls: {
      chrome: "https://chromewebstore.google.com/detail/kaia-wallet/jblndlipeogpafnldhgmapagcccfchpi",
      browserExtension: "https://app.kaiawallet.io",
      qrCode: "https://app.kaiawallet.io",
      ios: "https://apps.apple.com/us/app/kaia-wallet/id6502896387",
      android: "https://play.google.com/store/apps/details?id=io.klutch.wallet",
      mobile: "https://app.kaiawallet.io"
    },
    mobile: { getUri: shouldUseWalletConnect ? getUri : void 0 },
    qrCode: shouldUseWalletConnect ? {
      getUri: (uri) => uri,
      instructions: {
        learnMoreUrl: "https://kaiawallet.io",
        steps: [
          {
            description: "wallet_connectors.kaia.qr_code.step1.description",
            step: "install",
            title: "wallet_connectors.kaia.qr_code.step1.title"
          },
          {
            description: "wallet_connectors.kaia.qr_code.step2.description",
            step: "create",
            title: "wallet_connectors.kaia.qr_code.step2.title"
          },
          {
            description: "wallet_connectors.kaia.qr_code.step3.description",
            step: "refresh",
            title: "wallet_connectors.kaia.qr_code.step3.title"
          }
        ]
      }
    } : void 0,
    extension: {
      instructions: {
        learnMoreUrl: "https://kaiawallet.io",
        steps: [
          {
            description: "wallet_connectors.kaia.extension.step1.description",
            step: "install",
            title: "wallet_connectors.kaia.extension.step1.title"
          },
          {
            description: "wallet_connectors.kaia.extension.step2.description",
            step: "create",
            title: "wallet_connectors.kaia.extension.step2.title"
          },
          {
            description: "wallet_connectors.kaia.extension.step3.description",
            step: "refresh",
            title: "wallet_connectors.kaia.extension.step3.title"
          }
        ]
      }
    },
    createConnector: shouldUseWalletConnect ? getWalletConnectConnector({
      projectId,
      walletConnectParameters
    }) : getInjectedConnector({
      namespace: "klaytn"
    })
  };
};

// src/wallets/walletConnectors/kaikasWallet/kaikasWallet.ts
var kaikasWallet = ({
  projectId,
  walletConnectParameters
}) => {
  const isKaikasWalletInjected = hasInjectedProvider({
    namespace: "klaytn"
  });
  const shouldUseWalletConnect = !isKaikasWalletInjected;
  const getUri = (uri) => {
    return `kaikas://walletconnect?uri=${encodeURIComponent(uri)}`;
  };
  return {
    id: "kaikas",
    name: "Kaikas Wallet",
    iconUrl: async () => (await import("./kaikasWallet-F6Z6IPWN.js")).default,
    installed: isKaikasWalletInjected || void 0,
    iconBackground: "#fff",
    downloadUrls: {
      chrome: "https://chromewebstore.google.com/detail/kaikas/jblndlipeogpafnldhgmapagcccfchpi",
      browserExtension: "https://app.kaikas.io",
      qrCode: "https://app.kaikas.io",
      ios: "https://apps.apple.com/us/app/kaikas-mobile-crypto-wallet/id1626107061",
      android: "https://play.google.com/store/apps/details?id=io.klutch.wallet",
      mobile: "https://app.kaikas.io"
    },
    mobile: { getUri: shouldUseWalletConnect ? getUri : void 0 },
    qrCode: shouldUseWalletConnect ? {
      getUri: (uri) => uri,
      instructions: {
        learnMoreUrl: "https://kaikas.io",
        steps: [
          {
            description: "wallet_connectors.kaikas.qr_code.step1.description",
            step: "install",
            title: "wallet_connectors.kaikas.qr_code.step1.title"
          },
          {
            description: "wallet_connectors.kaikas.qr_code.step2.description",
            step: "create",
            title: "wallet_connectors.kaikas.qr_code.step2.title"
          },
          {
            description: "wallet_connectors.kaikas.qr_code.step3.description",
            step: "refresh",
            title: "wallet_connectors.kaikas.qr_code.step3.title"
          }
        ]
      }
    } : void 0,
    extension: {
      instructions: {
        learnMoreUrl: "https://kaikas.io",
        steps: [
          {
            description: "wallet_connectors.kaikas.extension.step1.description",
            step: "install",
            title: "wallet_connectors.kaikas.extension.step1.title"
          },
          {
            description: "wallet_connectors.kaikas.extension.step2.description",
            step: "create",
            title: "wallet_connectors.kaikas.extension.step2.title"
          },
          {
            description: "wallet_connectors.kaikas.extension.step3.description",
            step: "refresh",
            title: "wallet_connectors.kaikas.extension.step3.title"
          }
        ]
      }
    },
    createConnector: shouldUseWalletConnect ? getWalletConnectConnector({
      projectId,
      walletConnectParameters
    }) : getInjectedConnector({
      namespace: "klaytn"
    })
  };
};

// src/wallets/walletConnectors/krakenWallet/krakenWallet.ts
var krakenWallet = ({
  projectId,
  walletConnectParameters
}) => ({
  id: "kraken",
  name: "Kraken Wallet",
  iconUrl: async () => (await import("./krakenWallet-DAOXUKWO.js")).default,
  iconBackground: "#FFD8EA",
  downloadUrls: {
    ios: "https://apps.apple.com/us/app/kraken-wallet/id1626327149",
    mobile: "https://kraken.com/wallet",
    qrCode: "https://kraken.com/wallet"
  },
  mobile: {
    getUri: (uri) => {
      return `krakenwallet://wc?uri=${encodeURIComponent(uri)}`;
    }
  },
  qrCode: {
    getUri: (uri) => uri,
    instructions: {
      learnMoreUrl: "https://kraken.com/wallet",
      steps: [
        {
          description: "wallet_connectors.kraken.qr_code.step1.description",
          step: "install",
          title: "wallet_connectors.kraken.qr_code.step1.title"
        },
        {
          description: "wallet_connectors.kraken.qr_code.step2.description",
          step: "create",
          title: "wallet_connectors.kraken.qr_code.step2.title"
        },
        {
          description: "wallet_connectors.kraken.qr_code.step3.description",
          step: "scan",
          title: "wallet_connectors.kraken.qr_code.step3.title"
        }
      ]
    }
  },
  createConnector: getWalletConnectConnector({
    projectId,
    walletConnectParameters
  })
});

// src/wallets/walletConnectors/kresusWallet/kresusWallet.ts
var kresusWallet = ({
  projectId,
  walletConnectParameters
}) => ({
  id: "kresus-wallet",
  name: "Kresus Wallet",
  iconUrl: async () => (await import("./kresusWallet-AUJWLAOF.js")).default,
  iconBackground: "#fff",
  downloadUrls: {
    android: "https://play.google.com/store/apps/details?id=com.kresus.superapp",
    ios: "https://apps.apple.com/us/app/kresus-crypto-nft-superapp/id6444355152",
    qrCode: "https://kresusconnect.kresus.com/download"
  },
  mobile: {
    getUri: (uri) => `com.kresus.superapp://wc?uri=${encodeURIComponent(uri)}`
  },
  qrCode: {
    getUri: (uri) => uri,
    instructions: {
      learnMoreUrl: "https://kresus.com/",
      steps: [
        {
          description: "wallet_connectors.kresus.qr_code.step1.description",
          step: "install",
          title: "wallet_connectors.kresus.qr_code.step1.title"
        },
        {
          description: "wallet_connectors.kresus.qr_code.step2.description",
          step: "create",
          title: "wallet_connectors.kresus.qr_code.step2.title"
        },
        {
          description: "wallet_connectors.kresus.qr_code.step3.description",
          step: "scan",
          title: "wallet_connectors.kresus.qr_code.step3.title"
        }
      ]
    }
  },
  createConnector: getWalletConnectConnector({
    projectId,
    walletConnectParameters
  })
});

// src/wallets/walletConnectors/ledgerWallet/ledgerWallet.ts
var ledgerWallet = ({
  projectId,
  walletConnectParameters
}) => ({
  id: "ledger",
  iconBackground: "#000",
  iconAccent: "#000",
  name: "Ledger",
  iconUrl: async () => (await import("./ledgerWallet-KZKJ5Q2S.js")).default,
  downloadUrls: {
    android: "https://play.google.com/store/apps/details?id=com.ledger.live",
    ios: "https://apps.apple.com/us/app/ledger-live-web3-wallet/id1361671700",
    mobile: "https://www.ledger.com/ledger-live",
    qrCode: "https://r354.adj.st/?adj_t=t2esmlk",
    windows: "https://www.ledger.com/ledger-live/download",
    macos: "https://www.ledger.com/ledger-live/download",
    linux: "https://www.ledger.com/ledger-live/download",
    desktop: "https://www.ledger.com/ledger-live"
  },
  mobile: {
    getUri: (uri) => {
      return isAndroid() ? uri : `ledgerlive://wc?uri=${encodeURIComponent(uri)}`;
    }
  },
  desktop: {
    getUri: (uri) => {
      return `ledgerlive://wc?uri=${encodeURIComponent(uri)}`;
    },
    instructions: {
      learnMoreUrl: "https://support.ledger.com/hc/en-us/articles/4404389503889-Getting-started-with-Ledger-Live",
      steps: [
        {
          description: "wallet_connectors.ledger.desktop.step1.description",
          step: "install",
          title: "wallet_connectors.ledger.desktop.step1.title"
        },
        {
          description: "wallet_connectors.ledger.desktop.step2.description",
          step: "create",
          title: "wallet_connectors.ledger.desktop.step2.title"
        },
        {
          description: "wallet_connectors.ledger.desktop.step3.description",
          step: "connect",
          title: "wallet_connectors.ledger.desktop.step3.title"
        }
      ]
    }
  },
  qrCode: {
    getUri: (uri) => {
      return `ledgerlive://wc?uri=${encodeURIComponent(uri)}`;
    },
    instructions: {
      learnMoreUrl: "https://support.ledger.com/hc/en-us/articles/4404389503889-Getting-started-with-Ledger-Live",
      steps: [
        {
          description: "wallet_connectors.ledger.qr_code.step1.description",
          step: "install",
          title: "wallet_connectors.ledger.qr_code.step1.title"
        },
        {
          description: "wallet_connectors.ledger.qr_code.step2.description",
          step: "create",
          title: "wallet_connectors.ledger.qr_code.step2.title"
        },
        {
          description: "wallet_connectors.ledger.qr_code.step3.description",
          step: "scan",
          title: "wallet_connectors.ledger.qr_code.step3.title"
        }
      ]
    }
  },
  createConnector: getWalletConnectConnector({
    projectId,
    walletConnectParameters
  })
});

// src/wallets/walletConnectors/magicEdenWallet/magicEdenWallet.ts
var magicEdenWallet = () => {
  return {
    id: "magicEden",
    name: "Magic Eden Wallet",
    rdns: "io.magiceden.wallet",
    iconUrl: async () => (await import("./magicEden-PKT2ZXEQ.js")).default,
    iconBackground: "#36114D",
    installed: hasInjectedProvider({ namespace: "magicEden.ethereum" }),
    downloadUrls: {
      chrome: "https://chromewebstore.google.com/detail/magic-eden-wallet/mkpegjkblkkefacfnmkajcjmabijhclg",
      browserExtension: "https://wallet.magiceden.io/"
    },
    extension: {
      instructions: {
        steps: [
          {
            description: "wallet_connectors.magicEden.extension.step1.description",
            step: "install",
            title: "wallet_connectors.magicEden.extension.step1.title"
          },
          {
            description: "wallet_connectors.magicEden.extension.step2.description",
            step: "create",
            title: "wallet_connectors.magicEden.extension.step2.title"
          },
          {
            description: "wallet_connectors.magicEden.extension.step3.description",
            step: "refresh",
            title: "wallet_connectors.magicEden.extension.step3.title"
          }
        ],
        learnMoreUrl: "https://wallet.magiceden.io/support"
      }
    },
    createConnector: getInjectedConnector({
      namespace: "magicEden.ethereum"
    })
  };
};

// src/wallets/walletConnectors/mewWallet/mewWallet.ts
var mewWallet = () => {
  return {
    id: "mew",
    name: "MEW wallet",
    iconUrl: async () => (await import("./mewWallet-6V4UZOQC.js")).default,
    iconBackground: "#fff",
    installed: hasInjectedProvider({ flag: "isMEWwallet" }),
    downloadUrls: {
      android: "https://play.google.com/store/apps/details?id=com.myetherwallet.mewwallet&referrer=utm_source%3Drainbow",
      ios: "https://apps.apple.com/app/apple-store/id1464614025?pt=118781877&mt=8&ct=rainbow",
      mobile: "https://mewwallet.com",
      qrCode: "https://mewwallet.com"
    },
    createConnector: getInjectedConnector({ flag: "isMEWwallet" })
  };
};

// src/wallets/walletConnectors/nestWallet/nestWallet.ts
var nestWallet = () => ({
  id: "nest",
  name: "Nest",
  rdns: "xyz.nestwallet",
  iconUrl: async () => (await import("./nestWallet-BFZZZYLV.js")).default,
  iconBackground: "#fff0",
  installed: hasInjectedProvider({ flag: "isNestWallet" }),
  downloadUrls: {
    browserExtension: "https://nestwallet.xyz"
  },
  extension: {
    instructions: {
      learnMoreUrl: "https://nestwallet.xyz",
      steps: [
        {
          description: "wallet_connectors.nestwallet.extension.step1.description",
          step: "install",
          title: "wallet_connectors.nestwallet.extension.step1.title"
        },
        {
          description: "wallet_connectors.nestwallet.extension.step2.description",
          step: "create",
          title: "wallet_connectors.nestwallet.extension.step2.title"
        },
        {
          description: "wallet_connectors.nestwallet.extension.step3.description",
          step: "refresh",
          title: "wallet_connectors.nestwallet.extension.step3.title"
        }
      ]
    }
  },
  createConnector: getInjectedConnector({ flag: "isNestWallet" })
});

// src/wallets/walletConnectors/oktoWallet/oktoWallet.ts
var oktoWallet = ({
  projectId,
  walletConnectParameters
}) => ({
  id: "Okto",
  name: "Okto",
  iconUrl: async () => (await import("./oktoWallet-GJFOPPEA.js")).default,
  iconBackground: "#fff",
  downloadUrls: {
    android: "https://play.google.com/store/apps/details?id=im.okto.contractwalletclient",
    ios: "https://apps.apple.com/in/app/okto-wallet/id6450688229",
    mobile: "https://okto.tech/",
    qrCode: "https://okto.tech/"
  },
  mobile: {
    getUri: (uri) => {
      return isAndroid() ? uri : `okto://wc?uri=${encodeURIComponent(uri)}`;
    }
  },
  qrCode: {
    getUri: (uri) => uri,
    instructions: {
      learnMoreUrl: "https://okto.tech/",
      steps: [
        {
          description: "wallet_connectors.okto.qr_code.step1.description",
          step: "install",
          title: "wallet_connectors.okto.qr_code.step1.title"
        },
        {
          description: "wallet_connectors.okto.qr_code.step2.description",
          step: "create",
          title: "wallet_connectors.okto.qr_code.step2.title"
        },
        {
          description: "wallet_connectors.okto.qr_code.step3.description",
          step: "scan",
          title: "wallet_connectors.okto.qr_code.step3.title"
        }
      ]
    }
  },
  createConnector: getWalletConnectConnector({
    projectId,
    walletConnectParameters
  })
});

// src/wallets/walletConnectors/okxWallet/okxWallet.ts
var okxWallet = ({
  projectId,
  walletConnectParameters
}) => {
  const isOKXInjected = hasInjectedProvider({ namespace: "okxwallet" });
  const shouldUseWalletConnect = !isOKXInjected;
  return {
    id: "okx",
    name: "OKX Wallet",
    rdns: "com.okex.wallet",
    iconUrl: async () => (await import("./okxWallet-GJMKZIND.js")).default,
    iconAccent: "#000",
    iconBackground: "#000",
    downloadUrls: {
      android: "https://play.google.com/store/apps/details?id=com.okinc.okex.gp",
      ios: "https://itunes.apple.com/app/id1327268470?mt=8",
      mobile: "https://okx.com/download",
      qrCode: "https://okx.com/download",
      chrome: "https://chrome.google.com/webstore/detail/okx-wallet/mcohilncbfahbmgdjkbpemcciiolgcge",
      edge: "https://microsoftedge.microsoft.com/addons/detail/okx-wallet/pbpjkcldjiffchgbbndmhojiacbgflha",
      firefox: "https://addons.mozilla.org/firefox/addon/okexwallet/",
      browserExtension: "https://okx.com/download"
    },
    mobile: {
      getUri: shouldUseWalletConnect ? (uri) => {
        return isAndroid() ? uri : `okex://main/wc?uri=${encodeURIComponent(uri)}`;
      } : void 0
    },
    qrCode: shouldUseWalletConnect ? {
      getUri: (uri) => uri,
      instructions: {
        learnMoreUrl: "https://okx.com/web3/",
        steps: [
          {
            description: "wallet_connectors.okx.qr_code.step1.description",
            step: "install",
            title: "wallet_connectors.okx.qr_code.step1.title"
          },
          {
            description: "wallet_connectors.okx.qr_code.step2.description",
            step: "create",
            title: "wallet_connectors.okx.qr_code.step2.title"
          },
          {
            description: "wallet_connectors.okx.qr_code.step3.description",
            step: "scan",
            title: "wallet_connectors.okx.qr_code.step3.title"
          }
        ]
      }
    } : void 0,
    extension: {
      instructions: {
        learnMoreUrl: "https://okx.com/web3/",
        steps: [
          {
            description: "wallet_connectors.okx.extension.step1.description",
            step: "install",
            title: "wallet_connectors.okx.extension.step1.title"
          },
          {
            description: "wallet_connectors.okx.extension.step2.description",
            step: "create",
            title: "wallet_connectors.okx.extension.step2.title"
          },
          {
            description: "wallet_connectors.okx.extension.step3.description",
            step: "refresh",
            title: "wallet_connectors.okx.extension.step3.title"
          }
        ]
      }
    },
    createConnector: shouldUseWalletConnect ? getWalletConnectConnector({
      projectId,
      walletConnectParameters
    }) : getInjectedConnector({ namespace: "okxwallet" })
  };
};

// src/wallets/walletConnectors/omniWallet/omniWallet.ts
var omniWallet = ({
  projectId,
  walletConnectParameters
}) => ({
  id: "omni",
  name: "Omni",
  iconUrl: async () => (await import("./omniWallet-DEYUMT4A.js")).default,
  iconBackground: "#000",
  downloadUrls: {
    android: "https://play.google.com/store/apps/details?id=fi.steakwallet.app",
    ios: "https://itunes.apple.com/us/app/id1569375204",
    mobile: "https://omniwallet.app.link",
    qrCode: "https://omniwallet.app.link"
  },
  mobile: {
    getUri: (uri) => {
      return isAndroid() ? uri : `omni://wc?uri=${encodeURIComponent(uri)}`;
    }
  },
  qrCode: {
    getUri: (uri) => uri,
    instructions: {
      learnMoreUrl: "https://omni.app/support",
      steps: [
        {
          description: "wallet_connectors.omni.qr_code.step1.description",
          step: "install",
          title: "wallet_connectors.omni.qr_code.step1.title"
        },
        {
          description: "wallet_connectors.omni.qr_code.step2.description",
          step: "create",
          title: "wallet_connectors.omni.qr_code.step2.title"
        },
        {
          description: "wallet_connectors.omni.qr_code.step3.description",
          step: "scan",
          title: "wallet_connectors.omni.qr_code.step3.title"
        }
      ]
    }
  },
  createConnector: getWalletConnectConnector({
    projectId,
    walletConnectParameters
  })
});

// src/wallets/walletConnectors/oneInchWallet/oneInchWallet.ts
var oneInchWallet = ({
  projectId,
  walletConnectParameters
}) => ({
  id: "1inch",
  name: "1inch Wallet",
  iconUrl: async () => (await import("./oneInchWallet-D7BQOLOO.js")).default,
  iconBackground: "#fff",
  downloadUrls: {
    android: "https://play.google.com/store/apps/details?id=io.oneinch.android",
    ios: "https://apps.apple.com/us/app/1inch-crypto-defi-wallet/id1546049391",
    mobile: "https://1inch.io/wallet",
    qrCode: "https://1inch.io/wallet"
  },
  mobile: {
    getUri: (uri) => `oneinch://wc?uri=${encodeURIComponent(uri)}`
  },
  qrCode: {
    getUri: (uri) => uri,
    instructions: {
      learnMoreUrl: "https://1inch.io/wallet",
      steps: [
        {
          description: "wallet_connectors.1inch.qr_code.step1.description",
          step: "install",
          title: "wallet_connectors.1inch.qr_code.step1.title"
        },
        {
          description: "wallet_connectors.1inch.qr_code.step2.description",
          step: "create",
          title: "wallet_connectors.1inch.qr_code.step2.title"
        },
        {
          description: "wallet_connectors.1inch.qr_code.step3.description",
          step: "scan",
          title: "wallet_connectors.1inch.qr_code.step3.title"
        }
      ]
    }
  },
  createConnector: getWalletConnectConnector({
    projectId,
    walletConnectParameters
  })
});

// src/wallets/walletConnectors/oneKeyWallet/oneKeyWallet.ts
var oneKeyWallet = () => {
  return {
    id: "onekey",
    name: "OneKey",
    rdns: "so.onekey.app.wallet",
    iconAccent: "#00B812",
    iconBackground: "#fff",
    iconUrl: async () => (await import("./oneKeyWallet-4MM7G2SZ.js")).default,
    installed: hasInjectedProvider({ namespace: "$onekey.ethereum" }),
    downloadUrls: {
      android: "https://play.google.com/store/apps/details?id=so.onekey.app.wallet",
      browserExtension: "https://www.onekey.so/download/",
      chrome: "https://chrome.google.com/webstore/detail/onekey/jnmbobjmhlngoefaiojfljckilhhlhcj",
      edge: "https://microsoftedge.microsoft.com/addons/detail/onekey/obffkkagpmohennipjokmpllocnlndac",
      ios: "https://apps.apple.com/us/app/onekey-open-source-wallet/id1609559473",
      mobile: "https://www.onekey.so/download/",
      qrCode: "https://www.onekey.so/download/"
    },
    extension: {
      instructions: {
        learnMoreUrl: "https://help.onekey.so/hc/en-us/categories/360000170236",
        steps: [
          {
            description: "wallet_connectors.one_key.extension.step1.description",
            step: "install",
            title: "wallet_connectors.one_key.extension.step1.title"
          },
          {
            description: "wallet_connectors.one_key.extension.step2.description",
            step: "create",
            title: "wallet_connectors.one_key.extension.step2.title"
          },
          {
            description: "wallet_connectors.one_key.extension.step3.description",
            step: "refresh",
            title: "wallet_connectors.one_key.extension.step3.title"
          }
        ]
      }
    },
    createConnector: getInjectedConnector({
      namespace: "$onekey.ethereum"
    })
  };
};

// src/wallets/walletConnectors/paraSwapWallet/paraswapWallet.ts
var paraSwapWallet = ({
  projectId,
  walletConnectParameters
}) => ({
  id: "paraswap",
  name: "ParaSwap Wallet",
  iconUrl: async () => (await import("./paraSwapWallet-TMV5MUEF.js")).default,
  iconBackground: "#578CFC",
  downloadUrls: {
    ios: "https://apps.apple.com/us/app/paraswap-multichain-wallet/id1584610690",
    mobile: "https://paraswap.io",
    qrCode: "https://paraswap.io"
  },
  mobile: {
    getUri: (uri) => {
      return `paraswap://wc?uri=${encodeURIComponent(uri)}`;
    }
  },
  qrCode: {
    getUri: (uri) => uri,
    instructions: {
      learnMoreUrl: "https://paraswap.io",
      steps: [
        {
          description: "wallet_connectors.paraswap.qr_code.step1.description",
          step: "install",
          title: "wallet_connectors.paraswap.qr_code.step1.title"
        },
        {
          description: "wallet_connectors.paraswap.qr_code.step2.description",
          step: "create",
          title: "wallet_connectors.paraswap.qr_code.step2.title"
        },
        {
          description: "wallet_connectors.paraswap.qr_code.step3.description",
          step: "scan",
          title: "wallet_connectors.paraswap.qr_code.step3.title"
        }
      ]
    }
  },
  createConnector: getWalletConnectConnector({
    projectId,
    walletConnectParameters
  })
});

// src/wallets/walletConnectors/phantomWallet/phantomWallet.ts
var phantomWallet = () => {
  return {
    id: "phantom",
    name: "Phantom",
    rdns: "app.phantom",
    iconUrl: async () => (await import("./phantomWallet-IPGVKCAB.js")).default,
    iconBackground: "#9A8AEE",
    installed: hasInjectedProvider({ namespace: "phantom.ethereum" }),
    downloadUrls: {
      android: "https://play.google.com/store/apps/details?id=app.phantom",
      ios: "https://apps.apple.com/app/phantom-solana-wallet/1598432977",
      mobile: "https://phantom.app/download",
      qrCode: "https://phantom.app/download",
      chrome: "https://chrome.google.com/webstore/detail/phantom/bfnaelmomeimhlpmgjnjophhpkkoljpa",
      firefox: "https://addons.mozilla.org/firefox/addon/phantom-app/",
      browserExtension: "https://phantom.app/download"
    },
    extension: {
      instructions: {
        steps: [
          {
            description: "wallet_connectors.phantom.extension.step1.description",
            step: "install",
            title: "wallet_connectors.phantom.extension.step1.title"
          },
          {
            description: "wallet_connectors.phantom.extension.step2.description",
            step: "create",
            title: "wallet_connectors.phantom.extension.step2.title"
          },
          {
            description: "wallet_connectors.phantom.extension.step3.description",
            step: "refresh",
            title: "wallet_connectors.phantom.extension.step3.title"
          }
        ],
        learnMoreUrl: "https://help.phantom.app"
      }
    },
    createConnector: getInjectedConnector({
      namespace: "phantom.ethereum"
    })
  };
};

// src/wallets/walletConnectors/rabbyWallet/rabbyWallet.ts
var rabbyWallet = () => ({
  id: "rabby",
  name: "Rabby Wallet",
  iconUrl: async () => (await import("./rabbyWallet-FLVUU35F.js")).default,
  rdns: "io.rabby",
  iconBackground: "#8697FF",
  installed: hasInjectedProvider({ flag: "isRabby" }),
  downloadUrls: {
    chrome: "https://chrome.google.com/webstore/detail/rabby-wallet/acmacodkjbdgmoleebolmdjonilkdbch",
    browserExtension: "https://rabby.io"
  },
  extension: {
    instructions: {
      learnMoreUrl: "https://rabby.io/",
      steps: [
        {
          description: "wallet_connectors.rabby.extension.step1.description",
          step: "install",
          title: "wallet_connectors.rabby.extension.step1.title"
        },
        {
          description: "wallet_connectors.rabby.extension.step2.description",
          step: "create",
          title: "wallet_connectors.rabby.extension.step2.title"
        },
        {
          description: "wallet_connectors.rabby.extension.step3.description",
          step: "refresh",
          title: "wallet_connectors.rabby.extension.step3.title"
        }
      ]
    }
  },
  createConnector: getInjectedConnector({ flag: "isRabby" })
});

// src/wallets/walletConnectors/ramperWallet/ramperWallet.ts
var ramperWallet = () => {
  const isRamperWalletInjected = hasInjectedProvider({
    namespace: "ramper2.provider"
  });
  return {
    id: "ramper",
    name: "Ramper Wallet",
    iconUrl: async () => (await import("./ramperWallet-AF5AKK2S.js")).default,
    installed: isRamperWalletInjected,
    iconAccent: "#CDA349",
    iconBackground: "#fff",
    downloadUrls: {
      chrome: "https://chromewebstore.google.com/detail/ramper-wallet/nbdhibgjnjpnkajaghbffjbkcgljfgdi",
      browserExtension: "https://www.ramper.xyz/download"
    },
    extension: {
      instructions: {
        learnMoreUrl: "https://www.ramper.xyz",
        steps: [
          {
            description: "wallet_connectors.ramper.extension.step1.description",
            step: "install",
            title: "wallet_connectors.ramper.extension.step1.title"
          },
          {
            description: "wallet_connectors.ramper.extension.step2.description",
            step: "create",
            title: "wallet_connectors.ramper.extension.step2.title"
          },
          {
            description: "wallet_connectors.ramper.extension.step3.description",
            step: "refresh",
            title: "wallet_connectors.ramper.extension.step3.title"
          }
        ]
      }
    },
    createConnector: getInjectedConnector({
      namespace: "ramper2.provider"
    })
  };
};

// src/wallets/walletConnectors/roninWallet/roninWallet.ts
var roninWallet = ({
  projectId,
  walletConnectParameters
}) => {
  const isRoninInjected = hasInjectedProvider({
    namespace: "ronin.provider"
  });
  const shouldUseWalletConnect = !isRoninInjected;
  const getUri = (uri) => {
    return `roninwallet://wc?uri=${encodeURIComponent(uri)}`;
  };
  return {
    id: "ronin",
    name: "Ronin Wallet",
    iconUrl: async () => (await import("./roninWallet-SAB5ESVK.js")).default,
    iconBackground: "#ffffff",
    rdns: "com.roninchain.wallet",
    installed: isRoninInjected || void 0,
    downloadUrls: {
      android: "https://play.google.com/store/apps/details?id=com.skymavis.genesis",
      ios: "https://apps.apple.com/us/app/ronin-wallet/id1592675001",
      mobile: "https://wallet.roninchain.com",
      chrome: "https://chrome.google.com/webstore/detail/ronin-wallet/fnjhmkhhmkbjkkabndcnnogagogbneec",
      edge: "https://microsoftedge.microsoft.com/addons/detail/ronin-wallet/kjmoohlgokccodicjjfebfomlbljgfhk",
      firefox: "https://addons.mozilla.org/firefox/addon/ronin-wallet",
      browserExtension: "https://wallet.roninchain.com/",
      qrCode: "https://wallet.roninchain.com/"
    },
    mobile: {
      getUri: shouldUseWalletConnect ? getUri : void 0
    },
    qrCode: shouldUseWalletConnect ? {
      getUri: (uri) => uri,
      instructions: {
        learnMoreUrl: "https://wallet.roninchain.com/",
        steps: [
          {
            description: "wallet_connectors.ronin.qr_code.step1.description",
            step: "install",
            title: "wallet_connectors.ronin.qr_code.step1.title"
          },
          {
            description: "wallet_connectors.ronin.qr_code.step2.description",
            step: "create",
            title: "wallet_connectors.ronin.qr_code.step2.title"
          },
          {
            description: "wallet_connectors.ronin.qr_code.step3.description",
            step: "scan",
            title: "wallet_connectors.ronin.qr_code.step3.title"
          }
        ]
      }
    } : void 0,
    extension: {
      instructions: {
        learnMoreUrl: "https://wallet.roninchain.com/",
        steps: [
          {
            description: "wallet_connectors.ronin.extension.step1.description",
            step: "install",
            title: "wallet_connectors.ronin.extension.step1.title"
          },
          {
            description: "wallet_connectors.ronin.extension.step2.description",
            step: "create",
            title: "wallet_connectors.ronin.extension.step2.title"
          },
          {
            description: "wallet_connectors.ronin.extension.step3.description",
            step: "refresh",
            title: "wallet_connectors.ronin.extension.step3.title"
          }
        ]
      }
    },
    createConnector: shouldUseWalletConnect ? getWalletConnectConnector({
      projectId,
      walletConnectParameters
    }) : getInjectedConnector({ namespace: "ronin.provider" })
  };
};

// src/wallets/walletConnectors/safeheronWallet/safeheronWallet.ts
var safeheronWallet = () => ({
  id: "safeheron",
  name: "Safeheron",
  installed: hasInjectedProvider({
    namespace: "safeheron",
    flag: "isSafeheron"
  }),
  iconUrl: async () => (await import("./safeheronWallet-6JG77AKC.js")).default,
  iconBackground: "#fff",
  downloadUrls: {
    chrome: "https://chrome.google.com/webstore/detail/safeheron/aiaghdjafpiofpainifbgfgjfpclngoh",
    browserExtension: "https://www.safeheron.com/"
  },
  extension: {
    instructions: {
      learnMoreUrl: "https://www.safeheron.com/",
      steps: [
        {
          description: "wallet_connectors.safeheron.extension.step1.description",
          step: "install",
          title: "wallet_connectors.safeheron.extension.step1.title"
        },
        {
          description: "wallet_connectors.safeheron.extension.step2.description",
          step: "create",
          title: "wallet_connectors.safeheron.extension.step2.title"
        },
        {
          description: "wallet_connectors.safeheron.extension.step3.description",
          step: "refresh",
          title: "wallet_connectors.safeheron.extension.step3.title"
        }
      ]
    }
  },
  createConnector: getInjectedConnector({
    namespace: "safeheron",
    flag: "isSafeheron"
  })
});

// src/wallets/walletConnectors/safepalWallet/safepalWallet.ts
var safepalWallet = ({
  projectId,
  walletConnectParameters
}) => {
  const isSafePalWalletInjected = hasInjectedProvider({
    namespace: "safepalProvider",
    flag: "isSafePal"
  });
  const shouldUseWalletConnect = !isSafePalWalletInjected;
  const getUriMobile = (uri) => {
    return `safepalwallet://wc?uri=${encodeURIComponent(uri)}`;
  };
  const getUriQR = async (uri) => {
    return uri;
  };
  const mobileConnector = {
    getUri: shouldUseWalletConnect ? getUriMobile : void 0
  };
  let qrConnector = void 0;
  if (shouldUseWalletConnect) {
    qrConnector = {
      getUri: getUriQR,
      instructions: {
        learnMoreUrl: "https://safepal.com/",
        steps: [
          {
            description: "wallet_connectors.safepal.qr_code.step1.description",
            step: "install",
            title: "wallet_connectors.safepal.qr_code.step1.title"
          },
          {
            description: "wallet_connectors.safepal.qr_code.step2.description",
            step: "create",
            title: "wallet_connectors.safepal.qr_code.step2.title"
          },
          {
            description: "wallet_connectors.safepal.qr_code.step3.description",
            step: "scan",
            title: "wallet_connectors.safepal.qr_code.step3.title"
          }
        ]
      }
    };
  }
  const extensionConnector = {
    instructions: {
      learnMoreUrl: "https://www.safepal.com/download?product=2",
      steps: [
        {
          description: "wallet_connectors.safepal.extension.step1.description",
          step: "install",
          title: "wallet_connectors.safepal.extension.step1.title"
        },
        {
          description: "wallet_connectors.safepal.extension.step2.description",
          step: "create",
          title: "wallet_connectors.safepal.extension.step2.title"
        },
        {
          description: "wallet_connectors.safepal.extension.step3.description",
          step: "refresh",
          title: "wallet_connectors.safepal.extension.step3.title"
        }
      ]
    }
  };
  return {
    id: "safepal",
    name: "SafePal Wallet",
    iconUrl: async () => (await import("./safepalWallet-KQJ4OCNH.js")).default,
    // Note that we never resolve `installed` to `false` because the
    // SafePal Wallet provider falls back to other connection methods if
    // the injected connector isn't available
    installed: isSafePalWalletInjected,
    iconAccent: "#3375BB",
    iconBackground: "#fff",
    downloadUrls: {
      android: "https://play.google.com/store/apps/details?id=io.safepal.wallet&referrer=utm_source%3Drainbowkit%26utm_medium%3Ddisplay%26utm_campaign%3Ddownload",
      ios: "https://apps.apple.com/app/apple-store/id1548297139?pt=122504219&ct=rainbowkit&mt=8",
      mobile: "https://www.safepal.com/en/download",
      qrCode: "https://www.safepal.com/en/download",
      chrome: "https://chrome.google.com/webstore/detail/safepal-extension-wallet/lgmpcpglpngdoalbgeoldeajfclnhafa",
      browserExtension: "https://www.safepal.com/download?product=2"
    },
    mobile: mobileConnector,
    ...qrConnector ? qrConnector : {},
    extension: extensionConnector,
    createConnector: shouldUseWalletConnect ? getWalletConnectConnector({
      projectId,
      walletConnectParameters
    }) : getInjectedConnector({
      namespace: "safepalProvider",
      flag: "isSafePal"
    })
  };
};

// src/wallets/walletConnectors/seifWallet/seifWallet.ts
function seifWallet() {
  const injectedProvider = hasInjectedProvider({
    namespace: "__seif"
  });
  return {
    id: "seif",
    name: "Seif",
    installed: !!injectedProvider,
    iconUrl: async () => (await import("./seifWallet-QATOS33A.js")).default,
    iconBackground: "#fff",
    downloadUrls: {
      chrome: "https://chromewebstore.google.com/detail/seif/albakdmmdafeafbehmcpoejenbeojejl"
    },
    createConnector: getInjectedConnector({
      namespace: "__seif"
    }),
    rdns: "com.passkeywallet.seif"
  };
}

// src/wallets/walletConnectors/subWallet/subWallet.ts
var subWallet = ({
  projectId,
  walletConnectParameters
}) => {
  const isSubWalletInjected = hasInjectedProvider({ namespace: "SubWallet" });
  const shouldUseWalletConnect = !isSubWalletInjected;
  const getUriMobile = (uri) => {
    return `subwallet://wc?uri=${encodeURIComponent(uri)}`;
  };
  const getUriQR = (uri) => {
    return uri;
  };
  const mobileConnector = {
    getUri: shouldUseWalletConnect ? getUriMobile : void 0
  };
  let qrConnector = void 0;
  if (shouldUseWalletConnect) {
    qrConnector = {
      getUri: getUriQR,
      instructions: {
        learnMoreUrl: "https://www.subwallet.app/",
        steps: [
          {
            description: "wallet_connectors.subwallet.qr_code.step1.description",
            step: "install",
            title: "wallet_connectors.subwallet.qr_code.step1.title"
          },
          {
            description: "wallet_connectors.subwallet.qr_code.step2.description",
            step: "create",
            title: "wallet_connectors.subwallet.qr_code.step2.title"
          },
          {
            description: "wallet_connectors.subwallet.qr_code.step3.description",
            step: "scan",
            title: "wallet_connectors.subwallet.qr_code.step3.title"
          }
        ]
      }
    };
  }
  const extensionConnector = {
    instructions: {
      learnMoreUrl: "https://www.subwallet.app/",
      steps: [
        {
          description: "wallet_connectors.subwallet.extension.step1.description",
          step: "install",
          title: "wallet_connectors.subwallet.extension.step1.title"
        },
        {
          description: "wallet_connectors.subwallet.extension.step2.description",
          step: "create",
          title: "wallet_connectors.subwallet.extension.step2.title"
        },
        {
          description: "wallet_connectors.subwallet.extension.step3.description",
          step: "refresh",
          title: "wallet_connectors.subwallet.extension.step3.title"
        }
      ]
    }
  };
  return {
    id: "subwallet",
    name: "SubWallet",
    rdns: "app.subwallet",
    iconUrl: async () => (await import("./subWallet-LOZELSAO.js")).default,
    iconBackground: "#fff",
    installed: isSubWalletInjected || void 0,
    downloadUrls: {
      browserExtension: "https://www.subwallet.app/download",
      chrome: "https://chrome.google.com/webstore/detail/subwallet-polkadot-wallet/onhogfjeacnfoofkfgppdlbmlmnplgbn",
      firefox: "https://addons.mozilla.org/en-US/firefox/addon/subwallet/",
      edge: "https://chrome.google.com/webstore/detail/subwallet-polkadot-wallet/onhogfjeacnfoofkfgppdlbmlmnplgbn",
      mobile: "https://www.subwallet.app/download",
      android: "https://play.google.com/store/apps/details?id=app.subwallet.mobile",
      ios: "https://apps.apple.com/us/app/subwallet-polkadot-wallet/id1633050285",
      qrCode: "https://www.subwallet.app/download"
    },
    mobile: mobileConnector,
    qrCode: qrConnector,
    extension: extensionConnector,
    createConnector: shouldUseWalletConnect ? getWalletConnectConnector({
      projectId,
      walletConnectParameters
    }) : getInjectedConnector({ namespace: "SubWallet" })
  };
};

// src/wallets/walletConnectors/tahoWallet/tahoWallet.ts
var tahoWallet = () => {
  return {
    id: "taho",
    name: "Taho",
    iconBackground: "#d08d57",
    iconUrl: async () => (await import("./tahoWallet-L6KHUNKD.js")).default,
    downloadUrls: {
      chrome: "https://chrome.google.com/webstore/detail/taho/eajafomhmkipbjmfmhebemolkcicgfmd",
      browserExtension: "https://taho.xyz"
    },
    installed: hasInjectedProvider({ namespace: "tally", flag: "isTally" }),
    extension: {
      instructions: {
        learnMoreUrl: "https://tahowallet.notion.site/Taho-Knowledge-Base-4d95ed5439c64d6db3d3d27abf1fdae5",
        steps: [
          {
            description: "wallet_connectors.taho.extension.step1.description",
            step: "install",
            title: "wallet_connectors.taho.extension.step1.title"
          },
          {
            description: "wallet_connectors.taho.extension.step2.description",
            step: "create",
            title: "wallet_connectors.taho.extension.step2.title"
          },
          {
            description: "wallet_connectors.taho.extension.step3.description",
            step: "refresh",
            title: "wallet_connectors.taho.extension.step3.title"
          }
        ]
      }
    },
    createConnector: getInjectedConnector({
      namespace: "tally",
      flag: "isTally"
    })
  };
};

// src/wallets/walletConnectors/talismanWallet/talismanWallet.ts
var talismanWallet = () => ({
  id: "talisman",
  name: "Talisman",
  rdns: "xyz.talisman",
  iconUrl: async () => (await import("./talismanWallet-BLXUHONV.js")).default,
  iconBackground: "#fff",
  installed: hasInjectedProvider({
    namespace: "talismanEth",
    flag: "isTalisman"
  }),
  downloadUrls: {
    chrome: "https://chrome.google.com/webstore/detail/talisman-polkadot-wallet/fijngjgcjhjmmpcmkeiomlglpeiijkld",
    firefox: "https://addons.mozilla.org/en-US/firefox/addon/talisman-wallet-extension/",
    browserExtension: "https://talisman.xyz/download"
  },
  extension: {
    instructions: {
      learnMoreUrl: "https://talisman.xyz/",
      steps: [
        {
          description: "wallet_connectors.talisman.extension.step1.description",
          step: "install",
          title: "wallet_connectors.talisman.extension.step1.title"
        },
        {
          description: "wallet_connectors.talisman.extension.step2.description",
          step: "create",
          title: "wallet_connectors.talisman.extension.step2.title"
        },
        {
          description: "wallet_connectors.talisman.extension.step3.description",
          step: "refresh",
          title: "wallet_connectors.talisman.extension.step3.title"
        }
      ]
    }
  },
  createConnector: getInjectedConnector({
    namespace: "talismanEth",
    flag: "isTalisman"
  })
});

// src/wallets/walletConnectors/tokenPocketWallet/tokenPocketWallet.ts
var tokenPocketWallet = ({
  projectId,
  walletConnectParameters
}) => {
  const isTokenPocketInjected = hasInjectedProvider({ flag: "isTokenPocket" });
  const shouldUseWalletConnect = !isTokenPocketInjected;
  const getUri = (uri) => {
    return isMobile() ? `tpoutside://wc?uri=${encodeURIComponent(uri)}` : uri;
  };
  return {
    id: "tokenPocket",
    name: "TokenPocket",
    rdns: "pro.tokenpocket",
    iconUrl: async () => (await import("./tokenPocketWallet-BVMBOYTC.js")).default,
    iconBackground: "#2980FE",
    installed: !shouldUseWalletConnect ? isTokenPocketInjected : void 0,
    downloadUrls: {
      chrome: "https://chrome.google.com/webstore/detail/tokenpocket/mfgccjchihfkkindfppnaooecgfneiii",
      browserExtension: "https://extension.tokenpocket.pro/",
      android: "https://play.google.com/store/apps/details?id=vip.mytokenpocket",
      ios: "https://apps.apple.com/us/app/tp-global-wallet/id6444625622",
      qrCode: "https://tokenpocket.pro/en/download/app",
      mobile: "https://tokenpocket.pro/en/download/app"
    },
    mobile: {
      getUri: shouldUseWalletConnect ? getUri : void 0
    },
    qrCode: shouldUseWalletConnect ? {
      getUri,
      instructions: {
        learnMoreUrl: "https://help.tokenpocket.pro/en/",
        steps: [
          {
            description: "wallet_connectors.token_pocket.qr_code.step1.description",
            step: "install",
            title: "wallet_connectors.token_pocket.qr_code.step1.title"
          },
          {
            description: "wallet_connectors.token_pocket.qr_code.step2.description",
            step: "create",
            title: "wallet_connectors.token_pocket.qr_code.step2.title"
          },
          {
            description: "wallet_connectors.token_pocket.qr_code.step3.description",
            step: "scan",
            title: "wallet_connectors.token_pocket.qr_code.step3.title"
          }
        ]
      }
    } : void 0,
    extension: {
      instructions: {
        learnMoreUrl: "https://help.tokenpocket.pro/en/extension-wallet/faq/installation-tutorial",
        steps: [
          {
            description: "wallet_connectors.token_pocket.extension.step1.description",
            step: "install",
            title: "wallet_connectors.token_pocket.extension.step1.title"
          },
          {
            description: "wallet_connectors.token_pocket.extension.step2.description",
            step: "create",
            title: "wallet_connectors.token_pocket.extension.step2.title"
          },
          {
            description: "wallet_connectors.token_pocket.extension.step3.description",
            step: "refresh",
            title: "wallet_connectors.token_pocket.extension.step3.title"
          }
        ]
      }
    },
    createConnector: shouldUseWalletConnect ? getWalletConnectConnector({
      projectId,
      walletConnectParameters
    }) : getInjectedConnector({ flag: "isTokenPocket" })
  };
};

// src/wallets/walletConnectors/tokenaryWallet/tokenaryWallet.ts
var tokenaryWallet = () => ({
  id: "tokenary",
  name: "Tokenary",
  iconUrl: async () => (await import("./tokenaryWallet-Z2IGVXSA.js")).default,
  iconBackground: "#ffffff",
  installed: hasInjectedProvider({ flag: "isTokenary" }),
  hidden: () => !isSafari(),
  downloadUrls: {
    ios: "https://tokenary.io/get",
    mobile: "https://tokenary.io",
    qrCode: "https://tokenary.io/get",
    safari: "https://tokenary.io/get",
    browserExtension: "https://tokenary.io/get"
  },
  createConnector: getInjectedConnector({ flag: "isTokenary" })
});

// src/wallets/walletConnectors/trustWallet/trustWallet.ts
var trustWallet = ({
  projectId,
  walletConnectParameters
}) => {
  const isTrustWalletInjected = isMobile() ? hasInjectedProvider({ flag: "isTrust" }) : hasInjectedProvider({ flag: "isTrustWallet" });
  const shouldUseWalletConnect = !isTrustWalletInjected;
  const getUriMobile = (uri) => {
    return `trust://wc?uri=${encodeURIComponent(uri)}`;
  };
  const getUriQR = (uri) => {
    return uri;
  };
  const mobileConnector = {
    getUri: shouldUseWalletConnect ? getUriMobile : void 0
  };
  let qrConnector = void 0;
  if (shouldUseWalletConnect) {
    qrConnector = {
      getUri: getUriQR,
      instructions: {
        learnMoreUrl: "https://trustwallet.com/",
        steps: [
          {
            description: "wallet_connectors.trust.qr_code.step1.description",
            step: "install",
            title: "wallet_connectors.trust.qr_code.step1.title"
          },
          {
            description: "wallet_connectors.trust.qr_code.step2.description",
            step: "create",
            title: "wallet_connectors.trust.qr_code.step2.title"
          },
          {
            description: "wallet_connectors.trust.qr_code.step3.description",
            step: "scan",
            title: "wallet_connectors.trust.qr_code.step3.title"
          }
        ]
      }
    };
  }
  const extensionConnector = {
    instructions: {
      learnMoreUrl: "https://trustwallet.com/browser-extension",
      steps: [
        {
          description: "wallet_connectors.trust.extension.step1.description",
          step: "install",
          title: "wallet_connectors.trust.extension.step1.title"
        },
        {
          description: "wallet_connectors.trust.extension.step2.description",
          step: "create",
          title: "wallet_connectors.trust.extension.step2.title"
        },
        {
          description: "wallet_connectors.trust.extension.step3.description",
          step: "refresh",
          title: "wallet_connectors.trust.extension.step3.title"
        }
      ]
    }
  };
  return {
    id: "trust",
    name: "Trust Wallet",
    rdns: "com.trustwallet.app",
    iconUrl: async () => (await import("./trustWallet-E2GVGE4U.js")).default,
    // Note that we never resolve `installed` to `false` because the
    // Trust Wallet provider falls back to other connection methods if
    // the injected connector isn't available
    installed: isTrustWalletInjected || void 0,
    iconAccent: "#3375BB",
    iconBackground: "#fff",
    downloadUrls: {
      android: "https://play.google.com/store/apps/details?id=com.wallet.crypto.trustapp",
      ios: "https://apps.apple.com/us/app/trust-crypto-bitcoin-wallet/id1288339409",
      mobile: "https://trustwallet.com/download",
      qrCode: "https://trustwallet.com/download",
      chrome: "https://chrome.google.com/webstore/detail/trust-wallet/egjidjbpglichdcondbcbdnbeeppgdph",
      browserExtension: "https://trustwallet.com/browser-extension"
    },
    mobile: mobileConnector,
    qrCode: qrConnector,
    extension: extensionConnector,
    createConnector: shouldUseWalletConnect ? getWalletConnectConnector({
      projectId,
      walletConnectParameters
    }) : isMobile() ? getInjectedConnector({ flag: "isTrust" }) : getInjectedConnector({ flag: "isTrustWallet" })
  };
};

// src/wallets/walletConnectors/uniswapWallet/uniswapWallet.ts
var uniswapWallet = ({
  projectId,
  walletConnectParameters
}) => ({
  id: "uniswap",
  name: "Uniswap Wallet",
  iconUrl: async () => (await import("./uniswapWallet-T26M44R7.js")).default,
  iconBackground: "#FFD8EA",
  downloadUrls: {
    ios: "https://apps.apple.com/app/apple-store/id6443944476",
    mobile: "https://wallet.uniswap.org/",
    qrCode: "https://wallet.uniswap.org/"
  },
  mobile: {
    getUri: (uri) => {
      return `uniswap://wc?uri=${encodeURIComponent(uri)}`;
    }
  },
  qrCode: {
    getUri: (uri) => uri,
    instructions: {
      learnMoreUrl: "https://wallet.uniswap.org/",
      steps: [
        {
          description: "wallet_connectors.uniswap.qr_code.step1.description",
          step: "install",
          title: "wallet_connectors.uniswap.qr_code.step1.title"
        },
        {
          description: "wallet_connectors.uniswap.qr_code.step2.description",
          step: "create",
          title: "wallet_connectors.uniswap.qr_code.step2.title"
        },
        {
          description: "wallet_connectors.uniswap.qr_code.step3.description",
          step: "scan",
          title: "wallet_connectors.uniswap.qr_code.step3.title"
        }
      ]
    }
  },
  createConnector: getWalletConnectConnector({
    projectId,
    walletConnectParameters
  })
});

// src/wallets/walletConnectors/valoraWallet/valoraWallet.ts
var valoraWallet = ({
  projectId,
  walletConnectParameters
}) => ({
  id: "valora",
  name: "Valora",
  iconUrl: async () => (await import("./valoraWallet-RX3ONO47.js")).default,
  iconBackground: "#FFFFFF",
  downloadUrls: {
    ios: "https://apps.apple.com/app/id1520414263?mt=8",
    android: "https://play.google.com/store/apps/details?id=co.clabs.valora",
    mobile: "https://valora.xyz",
    qrCode: "https://valora.xyz"
  },
  mobile: {
    getUri: (uri) => isAndroid() ? uri : `celo://wallet/wc?uri=${encodeURIComponent(uri)}`
  },
  qrCode: {
    getUri: (uri) => uri,
    instructions: {
      learnMoreUrl: "https://valora.xyz/",
      steps: [
        {
          description: "wallet_connectors.valora.qr_code.step1.description",
          step: "install",
          title: "wallet_connectors.valora.qr_code.step1.title"
        },
        {
          description: "wallet_connectors.valora.qr_code.step2.description",
          step: "create",
          title: "wallet_connectors.valora.qr_code.step2.title"
        },
        {
          description: "wallet_connectors.valora.qr_code.step3.description",
          step: "scan",
          title: "wallet_connectors.valora.qr_code.step3.title"
        }
      ]
    }
  },
  createConnector: getWalletConnectConnector({
    projectId,
    walletConnectParameters
  })
});

// src/wallets/walletConnectors/wigwamWallet/wigwamWallet.ts
var wigwamWallet = () => {
  return {
    id: "wigwam",
    name: "Wigwam",
    iconBackground: "#80EF6E",
    iconUrl: async () => (await import("./wigwamWallet-5GKUN7ZJ.js")).default,
    downloadUrls: {
      chrome: "https://chromewebstore.google.com/detail/wigwam-%E2%80%94-web3-wallet/lccbohhgfkdikahanoclbdmaolidjdfl",
      browserExtension: "https://wigwam.app"
    },
    installed: hasInjectedProvider({
      namespace: "wigwamEthereum",
      flag: "isWigwam"
    }),
    extension: {
      instructions: {
        learnMoreUrl: "https://wigwam.app/",
        steps: [
          {
            description: "wallet_connectors.wigwam.extension.step1.description",
            step: "install",
            title: "wallet_connectors.wigwam.extension.step1.title"
          },
          {
            description: "wallet_connectors.wigwam.extension.step2.description",
            step: "create",
            title: "wallet_connectors.wigwam.extension.step2.title"
          },
          {
            description: "wallet_connectors.wigwam.extension.step3.description",
            step: "refresh",
            title: "wallet_connectors.wigwam.extension.step3.title"
          }
        ]
      }
    },
    createConnector: getInjectedConnector({
      namespace: "wigwamEthereum",
      flag: "isWigwam"
    })
  };
};

// src/wallets/walletConnectors/xdefiWallet/xdefiWallet.ts
var xdefiWallet = () => {
  return {
    id: "xdefi",
    name: "XDEFI Wallet",
    rdns: "io.xdefi",
    installed: hasInjectedProvider({ namespace: "xfi.ethereum" }),
    iconUrl: async () => (await import("./xdefiWallet-ZA65GDWS.js")).default,
    iconBackground: "#fff",
    downloadUrls: {
      chrome: "https://chrome.google.com/webstore/detail/xdefi-wallet/hmeobnfnfcmdkdcmlblgagmfpfboieaf",
      browserExtension: "https://xdefi.io"
    },
    extension: {
      instructions: {
        learnMoreUrl: "https://xdefi.io/support-categories/xdefi-wallet/",
        steps: [
          {
            description: "wallet_connectors.xdefi.extension.step1.description",
            step: "install",
            title: "wallet_connectors.xdefi.extension.step1.title"
          },
          {
            description: "wallet_connectors.xdefi.extension.step2.description",
            step: "create",
            title: "wallet_connectors.xdefi.extension.step2.title"
          },
          {
            description: "wallet_connectors.xdefi.extension.step3.description",
            step: "refresh",
            title: "wallet_connectors.xdefi.extension.step3.title"
          }
        ]
      }
    },
    createConnector: getInjectedConnector({ namespace: "xfi.ethereum" })
  };
};

// src/wallets/walletConnectors/zealWallet/zealWallet.ts
var zealWallet = ({
  projectId,
  walletConnectParameters
}) => {
  const isZealWalletInjected = hasInjectedProvider({ flag: "isZeal" });
  const shouldUseWalletConnect = !isZealWalletInjected;
  return {
    id: "zeal",
    name: "Zeal",
    rdns: "app.zeal",
    iconUrl: async () => (await import("./zealWallet-URNQ2AWF.js")).default,
    iconBackground: "#fff0",
    iconAccent: "#00FFFF",
    downloadUrls: {
      browserExtension: "https://zeal.app",
      chrome: "https://chromewebstore.google.com/detail/zeal-wallet/heamnjbnflcikcggoiplibfommfbkjpj",
      android: "https://play.google.com/store/apps/details?id=app.zeal.wallet",
      ios: "https://testflight.apple.com/join/MP72Ytw8",
      mobile: "https://zeal.app",
      qrCode: "https://zeal.app"
    },
    mobile: {
      getUri: shouldUseWalletConnect ? (uri) => {
        return `zeal://wc?uri=${encodeURIComponent(uri)}`;
      } : void 0
    },
    qrCode: shouldUseWalletConnect ? {
      getUri: (uri) => uri,
      instructions: {
        learnMoreUrl: "https://zeal.app",
        steps: [
          {
            description: "wallet_connectors.zeal.qr_code.step1.description",
            step: "install",
            title: "wallet_connectors.zeal.qr_code.step1.title"
          },
          {
            description: "wallet_connectors.zeal.qr_code.step2.description",
            step: "create",
            title: "wallet_connectors.zeal.qr_code.step2.title"
          },
          {
            description: "wallet_connectors.zeal.qr_code.step3.description",
            step: "scan",
            title: "wallet_connectors.zeal.qr_code.step3.title"
          }
        ]
      }
    } : void 0,
    extension: {
      instructions: {
        learnMoreUrl: "https://zeal.app",
        steps: [
          {
            description: "wallet_connectors.zeal.extension.step1.description",
            step: "install",
            title: "wallet_connectors.zeal.extension.step1.title"
          },
          {
            description: "wallet_connectors.zeal.extension.step2.description",
            step: "create",
            title: "wallet_connectors.zeal.extension.step2.title"
          },
          {
            description: "wallet_connectors.zeal.extension.step3.description",
            step: "refresh",
            title: "wallet_connectors.zeal.extension.step3.title"
          }
        ]
      }
    },
    createConnector: shouldUseWalletConnect ? getWalletConnectConnector({
      projectId,
      walletConnectParameters
    }) : getInjectedConnector({ flag: "isZeal" })
  };
};

// src/wallets/walletConnectors/zerionWallet/zerionWallet.ts
var zerionWallet = ({
  projectId,
  walletConnectParameters
}) => {
  const isZerionInjected = hasInjectedProvider({
    namespace: "zerionWallet",
    flag: "isZerion"
  });
  const shouldUseWalletConnect = !isZerionInjected;
  const getUri = (uri) => {
    return isIOS() ? `zerion://wc?uri=${encodeURIComponent(uri)}` : uri;
  };
  return {
    id: "zerion",
    name: "Zerion",
    rdns: "io.zerion.wallet",
    iconUrl: async () => (await import("./zerionWallet-CYFHB5PA.js")).default,
    iconAccent: "#2962ef",
    iconBackground: "#2962ef",
    installed: !shouldUseWalletConnect ? isZerionInjected : void 0,
    downloadUrls: {
      android: "https://play.google.com/store/apps/details?id=io.zerion.android",
      ios: "https://apps.apple.com/app/apple-store/id1456732565",
      mobile: "https://link.zerion.io/pt3gdRP0njb",
      qrCode: "https://link.zerion.io/pt3gdRP0njb",
      chrome: "https://chrome.google.com/webstore/detail/klghhnkeealcohjjanjjdaeeggmfmlpl",
      browserExtension: "https://zerion.io/extension"
    },
    mobile: {
      getUri: shouldUseWalletConnect ? getUri : void 0
    },
    qrCode: shouldUseWalletConnect ? {
      getUri,
      instructions: {
        learnMoreUrl: "https://zerion.io/blog/announcing-the-zerion-smart-wallet/",
        steps: [
          {
            description: "wallet_connectors.zerion.qr_code.step1.description",
            step: "install",
            title: "wallet_connectors.zerion.qr_code.step1.title"
          },
          {
            description: "wallet_connectors.zerion.qr_code.step2.description",
            step: "create",
            title: "wallet_connectors.zerion.qr_code.step2.title"
          },
          {
            description: "wallet_connectors.zerion.qr_code.step3.description",
            step: "scan",
            title: "wallet_connectors.zerion.qr_code.step3.title"
          }
        ]
      }
    } : void 0,
    extension: {
      instructions: {
        learnMoreUrl: "https://help.zerion.io/en/",
        steps: [
          {
            description: "wallet_connectors.zerion.extension.step1.description",
            step: "install",
            title: "wallet_connectors.zerion.extension.step1.title"
          },
          {
            description: "wallet_connectors.zerion.extension.step2.description",
            step: "create",
            title: "wallet_connectors.zerion.extension.step2.title"
          },
          {
            description: "wallet_connectors.zerion.extension.step3.description",
            step: "refresh",
            title: "wallet_connectors.zerion.extension.step3.title"
          }
        ]
      }
    },
    createConnector: shouldUseWalletConnect ? getWalletConnectConnector({
      projectId,
      walletConnectParameters
    }) : getInjectedConnector({
      namespace: "zerionWallet",
      flag: "isZerion"
    })
  };
};
export {
  argentWallet,
  berasigWallet,
  bestWallet,
  bifrostWallet,
  binanceWallet,
  bitgetWallet,
  bitskiWallet,
  bitverseWallet,
  bloomWallet,
  braveWallet,
  bybitWallet,
  clvWallet,
  coin98Wallet,
  coinbaseWallet,
  compassWallet,
  coreWallet,
  dawnWallet,
  desigWallet,
  enkryptWallet,
  foxWallet,
  frameWallet,
  frontierWallet,
  gateWallet,
  imTokenWallet,
  injectedWallet,
  iopayWallet,
  kaiaWallet,
  kaikasWallet,
  krakenWallet,
  kresusWallet,
  ledgerWallet,
  magicEdenWallet,
  metaMaskWallet,
  mewWallet,
  nestWallet,
  oktoWallet,
  okxWallet,
  omniWallet,
  oneInchWallet,
  oneKeyWallet,
  paraSwapWallet,
  phantomWallet,
  rabbyWallet,
  rainbowWallet,
  ramperWallet,
  roninWallet,
  safeWallet,
  safeheronWallet,
  safepalWallet,
  seifWallet,
  subWallet,
  tahoWallet,
  talismanWallet,
  tokenPocketWallet,
  tokenaryWallet,
  trustWallet,
  uniswapWallet,
  valoraWallet,
  walletConnectWallet,
  wigwamWallet,
  xdefiWallet,
  zealWallet,
  zerionWallet
};
