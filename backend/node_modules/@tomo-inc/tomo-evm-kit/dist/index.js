"use client";
import {
  coinbaseWallet,
  getBrowser,
  getWalletConnectConnector,
  isIOS,
  isMobile,
  isSafari,
  metaMaskWallet,
  rainbowWallet,
  safeWallet,
  walletConnectWallet
} from "./chunk-QHNELB2K.js";
import {
  en_US_default
} from "./chunk-X4GSACNW.js";
import {
  lightTheme
} from "./chunk-XEDFNMFR.js";
import {
  midnightTheme
} from "./chunk-EC53OL4T.js";
import {
  darkTheme
} from "./chunk-6QDJ3EKF.js";
import "./chunk-PLDENDHT.js";

// src/components/ConnectOptions/DesktopOptions.tsx
import React43, {
  Fragment,
  useContext as useContext13,
  useEffect as useEffect16,
  useRef as useRef5,
  useState as useState12
} from "react";

// src/css/touchableStyles.css.ts
var active = { shrink: "_1n8z45v6", shrinkSm: "_1n8z45v7" };
var base = "_1n8z45v3 _135hevf8r";
var hover = { grow: "_1n8z45v4", growLg: "_1n8z45v5" };

// src/css/touchableStyles.ts
function touchableStyles({ active: active2, hover: hover2 }) {
  return [base, hover2 && hover[hover2], active[active2]];
}

// src/utils/groupBy.ts
function groupBy(items, getKey) {
  const groupedItems = {};
  for (const item of items) {
    const key = getKey(item);
    if (!key) {
      continue;
    }
    if (!groupedItems[key]) {
      groupedItems[key] = [];
    }
    groupedItems[key].push(item);
  }
  return groupedItems;
}

// src/wallets/useWalletConnectors.ts
import { useConnect } from "wagmi";

// src/components/RainbowKitProvider/ModalContext.tsx
import React38, {
  createContext as createContext12,
  useCallback as useCallback6,
  useContext as useContext11,
  useEffect as useEffect14,
  useMemo as useMemo14,
  useState as useState11
} from "react";
import { useAccount as useAccount9, useAccountEffect as useAccountEffect3, useConfig as useConfig2 } from "wagmi";

// src/hooks/useConnectionStatus.ts
import { useAccount as useAccount2 } from "wagmi";

// src/components/RainbowKitProvider/AuthenticationContext.tsx
import React, {
  createContext,
  useContext,
  useEffect,
  useMemo,
  useState
} from "react";
import { useAccount, useAccountEffect } from "wagmi";
function createAuthenticationAdapter(adapter) {
  return adapter;
}
var AuthenticationContext = createContext(
  null
);
function RainbowKitAuthenticationProvider({
  adapter,
  children,
  enabled = true,
  status
}) {
  const { connector } = useAccount();
  const [currentConnectorUid, setCurrentConnectorUid] = useState();
  useAccountEffect({
    onDisconnect: () => {
      adapter.signOut();
      setCurrentConnectorUid(void 0);
    }
  });
  const handleChangedAccount = (data) => {
    if (data.accounts) {
      setCurrentConnectorUid(void 0);
      adapter.signOut();
    }
  };
  useEffect(() => {
    if (typeof connector?.emitter?.on === "function" && status === "authenticated") {
      setCurrentConnectorUid(connector?.uid);
      connector.emitter.on("change", handleChangedAccount);
      return () => {
        connector.emitter.off("change", handleChangedAccount);
      };
    }
  }, [connector?.emitter, status]);
  useEffect(() => {
    if (currentConnectorUid && typeof connector?.emitter?.on === "function" && status === "authenticated") {
      if (connector?.uid !== currentConnectorUid) {
        setCurrentConnectorUid(void 0);
        adapter.signOut();
      }
    }
  }, [connector?.emitter, currentConnectorUid, status]);
  return /* @__PURE__ */ React.createElement(
    AuthenticationContext.Provider,
    {
      value: useMemo(
        () => enabled ? { adapter, status } : null,
        [enabled, adapter, status]
      )
    },
    children
  );
}
function useAuthenticationAdapter() {
  const { adapter } = useContext(AuthenticationContext) ?? {};
  if (!adapter) {
    throw new Error("No authentication adapter found");
  }
  return adapter;
}
function useAuthenticationStatus() {
  const contextValue = useContext(AuthenticationContext);
  return contextValue?.status ?? null;
}

// src/hooks/useConnectionStatus.ts
function useConnectionStatus() {
  const authenticationStatus = useAuthenticationStatus();
  const { isConnected } = useAccount2();
  if (!isConnected) {
    return "disconnected";
  }
  if (!authenticationStatus) {
    return "connected";
  }
  if (authenticationStatus === "loading" || authenticationStatus === "unauthenticated") {
    return authenticationStatus;
  }
  return "connected";
}

// src/components/AccountModal/AccountModal.tsx
import React7, { useEffect as useEffect3, useMemo as useMemo5, useState as useState2 } from "react";
import { useAccount as useAccount3, useChainId, useDisconnect } from "wagmi";
import { ConnectedModal, Theme } from "@tomo-inc/uikit-lite";

// src/components/AsyncImage/AsyncImage.tsx
import React3, { useMemo as useMemo2, useReducer as useReducer2 } from "react";

// src/components/Box/Box.ts
import clsx2 from "clsx";
import React2 from "react";

// src/css/atoms.ts
import clsx from "clsx";

// src/css/reset.css.ts
var base2 = "uhdma00";
var element = { a: "uhdma0a", blockquote: "uhdma02", button: "uhdma09", input: "uhdma08 uhdma05 uhdma04", mark: "uhdma06", ol: "uhdma01", q: "uhdma02", select: "uhdma07 uhdma05 uhdma04", table: "uhdma03", textarea: "uhdma05 uhdma04", ul: "uhdma01" };

// src/css/sprinkles.css.ts
import { createMapValueFn as _51c72 } from "@vanilla-extract/sprinkles/createUtils";
import { createNormalizeValueFn as _a49f6 } from "@vanilla-extract/sprinkles/createUtils";
import { createSprinkles as _ad221 } from "@vanilla-extract/sprinkles/createRuntimeSprinkles";
var largeScreenMinWidth = 768;
var mapResponsiveValue = _51c72({ conditions: { defaultCondition: "smallScreen", conditionNames: ["smallScreen", "largeScreen"], responsiveArray: void 0 } });
var normalizeResponsiveValue = _a49f6({ conditions: { defaultCondition: "smallScreen", conditionNames: ["smallScreen", "largeScreen"], responsiveArray: void 0 } });
var sprinkles = _ad221({ conditions: { defaultCondition: "base", conditionNames: ["base", "hover", "active"], responsiveArray: void 0 }, styles: { background: { values: { accentColor: { conditions: { base: "_135hevf9i", hover: "_135hevf9j", active: "_135hevf9k" }, defaultClass: "_135hevf9i" }, accentColorForeground: { conditions: { base: "_135hevf9l", hover: "_135hevf9m", active: "_135hevf9n" }, defaultClass: "_135hevf9l" }, actionButtonBorder: { conditions: { base: "_135hevf9o", hover: "_135hevf9p", active: "_135hevf9q" }, defaultClass: "_135hevf9o" }, actionButtonBorderMobile: { conditions: { base: "_135hevf9r", hover: "_135hevf9s", active: "_135hevf9t" }, defaultClass: "_135hevf9r" }, actionButtonSecondaryBackground: { conditions: { base: "_135hevf9u", hover: "_135hevf9v", active: "_135hevf9w" }, defaultClass: "_135hevf9u" }, closeButton: { conditions: { base: "_135hevf9x", hover: "_135hevf9y", active: "_135hevf9z" }, defaultClass: "_135hevf9x" }, closeButtonBackground: { conditions: { base: "_135hevfa0", hover: "_135hevfa1", active: "_135hevfa2" }, defaultClass: "_135hevfa0" }, connectButtonBackground: { conditions: { base: "_135hevfa3", hover: "_135hevfa4", active: "_135hevfa5" }, defaultClass: "_135hevfa3" }, connectButtonBackgroundError: { conditions: { base: "_135hevfa6", hover: "_135hevfa7", active: "_135hevfa8" }, defaultClass: "_135hevfa6" }, connectButtonInnerBackground: { conditions: { base: "_135hevfa9", hover: "_135hevfaa", active: "_135hevfab" }, defaultClass: "_135hevfa9" }, connectButtonText: { conditions: { base: "_135hevfac", hover: "_135hevfad", active: "_135hevfae" }, defaultClass: "_135hevfac" }, connectButtonTextError: { conditions: { base: "_135hevfaf", hover: "_135hevfag", active: "_135hevfah" }, defaultClass: "_135hevfaf" }, connectionIndicator: { conditions: { base: "_135hevfai", hover: "_135hevfaj", active: "_135hevfak" }, defaultClass: "_135hevfai" }, downloadBottomCardBackground: { conditions: { base: "_135hevfal", hover: "_135hevfam", active: "_135hevfan" }, defaultClass: "_135hevfal" }, downloadTopCardBackground: { conditions: { base: "_135hevfao", hover: "_135hevfap", active: "_135hevfaq" }, defaultClass: "_135hevfao" }, error: { conditions: { base: "_135hevfar", hover: "_135hevfas", active: "_135hevfat" }, defaultClass: "_135hevfar" }, generalBorder: { conditions: { base: "_135hevfau", hover: "_135hevfav", active: "_135hevfaw" }, defaultClass: "_135hevfau" }, generalBorderDim: { conditions: { base: "_135hevfax", hover: "_135hevfay", active: "_135hevfaz" }, defaultClass: "_135hevfax" }, menuItemBackground: { conditions: { base: "_135hevfb0", hover: "_135hevfb1", active: "_135hevfb2" }, defaultClass: "_135hevfb0" }, modalBackdrop: { conditions: { base: "_135hevfb3", hover: "_135hevfb4", active: "_135hevfb5" }, defaultClass: "_135hevfb3" }, modalBackground: { conditions: { base: "_135hevfb6", hover: "_135hevfb7", active: "_135hevfb8" }, defaultClass: "_135hevfb6" }, modalBorder: { conditions: { base: "_135hevfb9", hover: "_135hevfba", active: "_135hevfbb" }, defaultClass: "_135hevfb9" }, modalText: { conditions: { base: "_135hevfbc", hover: "_135hevfbd", active: "_135hevfbe" }, defaultClass: "_135hevfbc" }, modalTextDim: { conditions: { base: "_135hevfbf", hover: "_135hevfbg", active: "_135hevfbh" }, defaultClass: "_135hevfbf" }, modalTextSecondary: { conditions: { base: "_135hevfbi", hover: "_135hevfbj", active: "_135hevfbk" }, defaultClass: "_135hevfbi" }, profileAction: { conditions: { base: "_135hevfbl", hover: "_135hevfbm", active: "_135hevfbn" }, defaultClass: "_135hevfbl" }, profileActionHover: { conditions: { base: "_135hevfbo", hover: "_135hevfbp", active: "_135hevfbq" }, defaultClass: "_135hevfbo" }, profileForeground: { conditions: { base: "_135hevfbr", hover: "_135hevfbs", active: "_135hevfbt" }, defaultClass: "_135hevfbr" }, selectedOptionBorder: { conditions: { base: "_135hevfbu", hover: "_135hevfbv", active: "_135hevfbw" }, defaultClass: "_135hevfbu" }, standby: { conditions: { base: "_135hevfbx", hover: "_135hevfby", active: "_135hevfbz" }, defaultClass: "_135hevfbx" } } }, borderColor: { values: { accentColor: { conditions: { base: "_135hevfc0", hover: "_135hevfc1", active: "_135hevfc2" }, defaultClass: "_135hevfc0" }, accentColorForeground: { conditions: { base: "_135hevfc3", hover: "_135hevfc4", active: "_135hevfc5" }, defaultClass: "_135hevfc3" }, actionButtonBorder: { conditions: { base: "_135hevfc6", hover: "_135hevfc7", active: "_135hevfc8" }, defaultClass: "_135hevfc6" }, actionButtonBorderMobile: { conditions: { base: "_135hevfc9", hover: "_135hevfca", active: "_135hevfcb" }, defaultClass: "_135hevfc9" }, actionButtonSecondaryBackground: { conditions: { base: "_135hevfcc", hover: "_135hevfcd", active: "_135hevfce" }, defaultClass: "_135hevfcc" }, closeButton: { conditions: { base: "_135hevfcf", hover: "_135hevfcg", active: "_135hevfch" }, defaultClass: "_135hevfcf" }, closeButtonBackground: { conditions: { base: "_135hevfci", hover: "_135hevfcj", active: "_135hevfck" }, defaultClass: "_135hevfci" }, connectButtonBackground: { conditions: { base: "_135hevfcl", hover: "_135hevfcm", active: "_135hevfcn" }, defaultClass: "_135hevfcl" }, connectButtonBackgroundError: { conditions: { base: "_135hevfco", hover: "_135hevfcp", active: "_135hevfcq" }, defaultClass: "_135hevfco" }, connectButtonInnerBackground: { conditions: { base: "_135hevfcr", hover: "_135hevfcs", active: "_135hevfct" }, defaultClass: "_135hevfcr" }, connectButtonText: { conditions: { base: "_135hevfcu", hover: "_135hevfcv", active: "_135hevfcw" }, defaultClass: "_135hevfcu" }, connectButtonTextError: { conditions: { base: "_135hevfcx", hover: "_135hevfcy", active: "_135hevfcz" }, defaultClass: "_135hevfcx" }, connectionIndicator: { conditions: { base: "_135hevfd0", hover: "_135hevfd1", active: "_135hevfd2" }, defaultClass: "_135hevfd0" }, downloadBottomCardBackground: { conditions: { base: "_135hevfd3", hover: "_135hevfd4", active: "_135hevfd5" }, defaultClass: "_135hevfd3" }, downloadTopCardBackground: { conditions: { base: "_135hevfd6", hover: "_135hevfd7", active: "_135hevfd8" }, defaultClass: "_135hevfd6" }, error: { conditions: { base: "_135hevfd9", hover: "_135hevfda", active: "_135hevfdb" }, defaultClass: "_135hevfd9" }, generalBorder: { conditions: { base: "_135hevfdc", hover: "_135hevfdd", active: "_135hevfde" }, defaultClass: "_135hevfdc" }, generalBorderDim: { conditions: { base: "_135hevfdf", hover: "_135hevfdg", active: "_135hevfdh" }, defaultClass: "_135hevfdf" }, menuItemBackground: { conditions: { base: "_135hevfdi", hover: "_135hevfdj", active: "_135hevfdk" }, defaultClass: "_135hevfdi" }, modalBackdrop: { conditions: { base: "_135hevfdl", hover: "_135hevfdm", active: "_135hevfdn" }, defaultClass: "_135hevfdl" }, modalBackground: { conditions: { base: "_135hevfdo", hover: "_135hevfdp", active: "_135hevfdq" }, defaultClass: "_135hevfdo" }, modalBorder: { conditions: { base: "_135hevfdr", hover: "_135hevfds", active: "_135hevfdt" }, defaultClass: "_135hevfdr" }, modalText: { conditions: { base: "_135hevfdu", hover: "_135hevfdv", active: "_135hevfdw" }, defaultClass: "_135hevfdu" }, modalTextDim: { conditions: { base: "_135hevfdx", hover: "_135hevfdy", active: "_135hevfdz" }, defaultClass: "_135hevfdx" }, modalTextSecondary: { conditions: { base: "_135hevfe0", hover: "_135hevfe1", active: "_135hevfe2" }, defaultClass: "_135hevfe0" }, profileAction: { conditions: { base: "_135hevfe3", hover: "_135hevfe4", active: "_135hevfe5" }, defaultClass: "_135hevfe3" }, profileActionHover: { conditions: { base: "_135hevfe6", hover: "_135hevfe7", active: "_135hevfe8" }, defaultClass: "_135hevfe6" }, profileForeground: { conditions: { base: "_135hevfe9", hover: "_135hevfea", active: "_135hevfeb" }, defaultClass: "_135hevfe9" }, selectedOptionBorder: { conditions: { base: "_135hevfec", hover: "_135hevfed", active: "_135hevfee" }, defaultClass: "_135hevfec" }, standby: { conditions: { base: "_135hevfef", hover: "_135hevfeg", active: "_135hevfeh" }, defaultClass: "_135hevfef" } } }, boxShadow: { values: { connectButton: { conditions: { base: "_135hevfei", hover: "_135hevfej", active: "_135hevfek" }, defaultClass: "_135hevfei" }, dialog: { conditions: { base: "_135hevfel", hover: "_135hevfem", active: "_135hevfen" }, defaultClass: "_135hevfel" }, profileDetailsAction: { conditions: { base: "_135hevfeo", hover: "_135hevfep", active: "_135hevfeq" }, defaultClass: "_135hevfeo" }, selectedOption: { conditions: { base: "_135hevfer", hover: "_135hevfes", active: "_135hevfet" }, defaultClass: "_135hevfer" }, selectedWallet: { conditions: { base: "_135hevfeu", hover: "_135hevfev", active: "_135hevfew" }, defaultClass: "_135hevfeu" }, walletLogo: { conditions: { base: "_135hevfex", hover: "_135hevfey", active: "_135hevfez" }, defaultClass: "_135hevfex" } } }, color: { values: { accentColor: { conditions: { base: "_135hevff0", hover: "_135hevff1", active: "_135hevff2" }, defaultClass: "_135hevff0" }, accentColorForeground: { conditions: { base: "_135hevff3", hover: "_135hevff4", active: "_135hevff5" }, defaultClass: "_135hevff3" }, actionButtonBorder: { conditions: { base: "_135hevff6", hover: "_135hevff7", active: "_135hevff8" }, defaultClass: "_135hevff6" }, actionButtonBorderMobile: { conditions: { base: "_135hevff9", hover: "_135hevffa", active: "_135hevffb" }, defaultClass: "_135hevff9" }, actionButtonSecondaryBackground: { conditions: { base: "_135hevffc", hover: "_135hevffd", active: "_135hevffe" }, defaultClass: "_135hevffc" }, closeButton: { conditions: { base: "_135hevfff", hover: "_135hevffg", active: "_135hevffh" }, defaultClass: "_135hevfff" }, closeButtonBackground: { conditions: { base: "_135hevffi", hover: "_135hevffj", active: "_135hevffk" }, defaultClass: "_135hevffi" }, connectButtonBackground: { conditions: { base: "_135hevffl", hover: "_135hevffm", active: "_135hevffn" }, defaultClass: "_135hevffl" }, connectButtonBackgroundError: { conditions: { base: "_135hevffo", hover: "_135hevffp", active: "_135hevffq" }, defaultClass: "_135hevffo" }, connectButtonInnerBackground: { conditions: { base: "_135hevffr", hover: "_135hevffs", active: "_135hevfft" }, defaultClass: "_135hevffr" }, connectButtonText: { conditions: { base: "_135hevffu", hover: "_135hevffv", active: "_135hevffw" }, defaultClass: "_135hevffu" }, connectButtonTextError: { conditions: { base: "_135hevffx", hover: "_135hevffy", active: "_135hevffz" }, defaultClass: "_135hevffx" }, connectionIndicator: { conditions: { base: "_135hevfg0", hover: "_135hevfg1", active: "_135hevfg2" }, defaultClass: "_135hevfg0" }, downloadBottomCardBackground: { conditions: { base: "_135hevfg3", hover: "_135hevfg4", active: "_135hevfg5" }, defaultClass: "_135hevfg3" }, downloadTopCardBackground: { conditions: { base: "_135hevfg6", hover: "_135hevfg7", active: "_135hevfg8" }, defaultClass: "_135hevfg6" }, error: { conditions: { base: "_135hevfg9", hover: "_135hevfga", active: "_135hevfgb" }, defaultClass: "_135hevfg9" }, generalBorder: { conditions: { base: "_135hevfgc", hover: "_135hevfgd", active: "_135hevfge" }, defaultClass: "_135hevfgc" }, generalBorderDim: { conditions: { base: "_135hevfgf", hover: "_135hevfgg", active: "_135hevfgh" }, defaultClass: "_135hevfgf" }, menuItemBackground: { conditions: { base: "_135hevfgi", hover: "_135hevfgj", active: "_135hevfgk" }, defaultClass: "_135hevfgi" }, modalBackdrop: { conditions: { base: "_135hevfgl", hover: "_135hevfgm", active: "_135hevfgn" }, defaultClass: "_135hevfgl" }, modalBackground: { conditions: { base: "_135hevfgo", hover: "_135hevfgp", active: "_135hevfgq" }, defaultClass: "_135hevfgo" }, modalBorder: { conditions: { base: "_135hevfgr", hover: "_135hevfgs", active: "_135hevfgt" }, defaultClass: "_135hevfgr" }, modalText: { conditions: { base: "_135hevfgu", hover: "_135hevfgv", active: "_135hevfgw" }, defaultClass: "_135hevfgu" }, modalTextDim: { conditions: { base: "_135hevfgx", hover: "_135hevfgy", active: "_135hevfgz" }, defaultClass: "_135hevfgx" }, modalTextSecondary: { conditions: { base: "_135hevfh0", hover: "_135hevfh1", active: "_135hevfh2" }, defaultClass: "_135hevfh0" }, profileAction: { conditions: { base: "_135hevfh3", hover: "_135hevfh4", active: "_135hevfh5" }, defaultClass: "_135hevfh3" }, profileActionHover: { conditions: { base: "_135hevfh6", hover: "_135hevfh7", active: "_135hevfh8" }, defaultClass: "_135hevfh6" }, profileForeground: { conditions: { base: "_135hevfh9", hover: "_135hevfha", active: "_135hevfhb" }, defaultClass: "_135hevfh9" }, selectedOptionBorder: { conditions: { base: "_135hevfhc", hover: "_135hevfhd", active: "_135hevfhe" }, defaultClass: "_135hevfhc" }, standby: { conditions: { base: "_135hevfhf", hover: "_135hevfhg", active: "_135hevfhh" }, defaultClass: "_135hevfhf" } } } } }, { conditions: { defaultCondition: "smallScreen", conditionNames: ["smallScreen", "largeScreen"], responsiveArray: void 0 }, styles: { alignItems: { values: { "flex-start": { conditions: { smallScreen: "_135hevf0", largeScreen: "_135hevf1" }, defaultClass: "_135hevf0" }, "flex-end": { conditions: { smallScreen: "_135hevf2", largeScreen: "_135hevf3" }, defaultClass: "_135hevf2" }, center: { conditions: { smallScreen: "_135hevf4", largeScreen: "_135hevf5" }, defaultClass: "_135hevf4" } } }, display: { values: { none: { conditions: { smallScreen: "_135hevf6", largeScreen: "_135hevf7" }, defaultClass: "_135hevf6" }, block: { conditions: { smallScreen: "_135hevf8", largeScreen: "_135hevf9" }, defaultClass: "_135hevf8" }, flex: { conditions: { smallScreen: "_135hevfa", largeScreen: "_135hevfb" }, defaultClass: "_135hevfa" }, inline: { conditions: { smallScreen: "_135hevfc", largeScreen: "_135hevfd" }, defaultClass: "_135hevfc" } } } } }, { conditions: void 0, styles: { margin: { mappings: ["marginTop", "marginBottom", "marginLeft", "marginRight"] }, marginX: { mappings: ["marginLeft", "marginRight"] }, marginY: { mappings: ["marginTop", "marginBottom"] }, padding: { mappings: ["paddingTop", "paddingBottom", "paddingLeft", "paddingRight"] }, paddingX: { mappings: ["paddingLeft", "paddingRight"] }, paddingY: { mappings: ["paddingTop", "paddingBottom"] }, alignSelf: { values: { "flex-start": { defaultClass: "_135hevfe" }, "flex-end": { defaultClass: "_135hevff" }, center: { defaultClass: "_135hevfg" } } }, backgroundSize: { values: { cover: { defaultClass: "_135hevfh" } } }, borderRadius: { values: { "1": { defaultClass: "_135hevfi" }, "6": { defaultClass: "_135hevfj" }, "10": { defaultClass: "_135hevfk" }, "13": { defaultClass: "_135hevfl" }, actionButton: { defaultClass: "_135hevfm" }, connectButton: { defaultClass: "_135hevfn" }, menuButton: { defaultClass: "_135hevfo" }, modal: { defaultClass: "_135hevfp" }, modalMobile: { defaultClass: "_135hevfq" }, "25%": { defaultClass: "_135hevfr" }, full: { defaultClass: "_135hevfs" } } }, borderStyle: { values: { solid: { defaultClass: "_135hevft" } } }, borderWidth: { values: { "0": { defaultClass: "_135hevfu" }, "1": { defaultClass: "_135hevfv" }, "2": { defaultClass: "_135hevfw" }, "4": { defaultClass: "_135hevfx" } } }, cursor: { values: { pointer: { defaultClass: "_135hevfy" }, none: { defaultClass: "_135hevfz" } } }, pointerEvents: { values: { none: { defaultClass: "_135hevf10" }, all: { defaultClass: "_135hevf11" } } }, minHeight: { values: { "8": { defaultClass: "_135hevf12" }, "44": { defaultClass: "_135hevf13" } } }, flexDirection: { values: { row: { defaultClass: "_135hevf14" }, column: { defaultClass: "_135hevf15" } } }, fontFamily: { values: { body: { defaultClass: "_135hevf16" } } }, fontSize: { values: { "12": { defaultClass: "_135hevf17" }, "13": { defaultClass: "_135hevf18" }, "14": { defaultClass: "_135hevf19" }, "16": { defaultClass: "_135hevf1a" }, "18": { defaultClass: "_135hevf1b" }, "20": { defaultClass: "_135hevf1c" }, "23": { defaultClass: "_135hevf1d" } } }, fontWeight: { values: { regular: { defaultClass: "_135hevf1e" }, medium: { defaultClass: "_135hevf1f" }, semibold: { defaultClass: "_135hevf1g" }, bold: { defaultClass: "_135hevf1h" }, heavy: { defaultClass: "_135hevf1i" } } }, gap: { values: { "0": { defaultClass: "_135hevf1j" }, "1": { defaultClass: "_135hevf1k" }, "2": { defaultClass: "_135hevf1l" }, "3": { defaultClass: "_135hevf1m" }, "4": { defaultClass: "_135hevf1n" }, "5": { defaultClass: "_135hevf1o" }, "6": { defaultClass: "_135hevf1p" }, "8": { defaultClass: "_135hevf1q" }, "10": { defaultClass: "_135hevf1r" }, "12": { defaultClass: "_135hevf1s" }, "14": { defaultClass: "_135hevf1t" }, "16": { defaultClass: "_135hevf1u" }, "18": { defaultClass: "_135hevf1v" }, "20": { defaultClass: "_135hevf1w" }, "24": { defaultClass: "_135hevf1x" }, "28": { defaultClass: "_135hevf1y" }, "32": { defaultClass: "_135hevf1z" }, "36": { defaultClass: "_135hevf20" }, "44": { defaultClass: "_135hevf21" }, "64": { defaultClass: "_135hevf22" }, "-1": { defaultClass: "_135hevf23" } } }, height: { values: { "1": { defaultClass: "_135hevf24" }, "2": { defaultClass: "_135hevf25" }, "4": { defaultClass: "_135hevf26" }, "8": { defaultClass: "_135hevf27" }, "12": { defaultClass: "_135hevf28" }, "20": { defaultClass: "_135hevf29" }, "24": { defaultClass: "_135hevf2a" }, "28": { defaultClass: "_135hevf2b" }, "30": { defaultClass: "_135hevf2c" }, "32": { defaultClass: "_135hevf2d" }, "34": { defaultClass: "_135hevf2e" }, "36": { defaultClass: "_135hevf2f" }, "40": { defaultClass: "_135hevf2g" }, "44": { defaultClass: "_135hevf2h" }, "48": { defaultClass: "_135hevf2i" }, "54": { defaultClass: "_135hevf2j" }, "60": { defaultClass: "_135hevf2k" }, "200": { defaultClass: "_135hevf2l" }, full: { defaultClass: "_135hevf2m" }, max: { defaultClass: "_135hevf2n" } } }, justifyContent: { values: { "flex-start": { defaultClass: "_135hevf2o" }, "flex-end": { defaultClass: "_135hevf2p" }, center: { defaultClass: "_135hevf2q" }, "space-between": { defaultClass: "_135hevf2r" }, "space-around": { defaultClass: "_135hevf2s" } } }, textAlign: { values: { left: { defaultClass: "_135hevf2t" }, center: { defaultClass: "_135hevf2u" }, inherit: { defaultClass: "_135hevf2v" } } }, marginBottom: { values: { "0": { defaultClass: "_135hevf2w" }, "1": { defaultClass: "_135hevf2x" }, "2": { defaultClass: "_135hevf2y" }, "3": { defaultClass: "_135hevf2z" }, "4": { defaultClass: "_135hevf30" }, "5": { defaultClass: "_135hevf31" }, "6": { defaultClass: "_135hevf32" }, "8": { defaultClass: "_135hevf33" }, "10": { defaultClass: "_135hevf34" }, "12": { defaultClass: "_135hevf35" }, "14": { defaultClass: "_135hevf36" }, "16": { defaultClass: "_135hevf37" }, "18": { defaultClass: "_135hevf38" }, "20": { defaultClass: "_135hevf39" }, "24": { defaultClass: "_135hevf3a" }, "28": { defaultClass: "_135hevf3b" }, "32": { defaultClass: "_135hevf3c" }, "36": { defaultClass: "_135hevf3d" }, "44": { defaultClass: "_135hevf3e" }, "64": { defaultClass: "_135hevf3f" }, "-1": { defaultClass: "_135hevf3g" } } }, marginLeft: { values: { "0": { defaultClass: "_135hevf3h" }, "1": { defaultClass: "_135hevf3i" }, "2": { defaultClass: "_135hevf3j" }, "3": { defaultClass: "_135hevf3k" }, "4": { defaultClass: "_135hevf3l" }, "5": { defaultClass: "_135hevf3m" }, "6": { defaultClass: "_135hevf3n" }, "8": { defaultClass: "_135hevf3o" }, "10": { defaultClass: "_135hevf3p" }, "12": { defaultClass: "_135hevf3q" }, "14": { defaultClass: "_135hevf3r" }, "16": { defaultClass: "_135hevf3s" }, "18": { defaultClass: "_135hevf3t" }, "20": { defaultClass: "_135hevf3u" }, "24": { defaultClass: "_135hevf3v" }, "28": { defaultClass: "_135hevf3w" }, "32": { defaultClass: "_135hevf3x" }, "36": { defaultClass: "_135hevf3y" }, "44": { defaultClass: "_135hevf3z" }, "64": { defaultClass: "_135hevf40" }, "-1": { defaultClass: "_135hevf41" } } }, marginRight: { values: { "0": { defaultClass: "_135hevf42" }, "1": { defaultClass: "_135hevf43" }, "2": { defaultClass: "_135hevf44" }, "3": { defaultClass: "_135hevf45" }, "4": { defaultClass: "_135hevf46" }, "5": { defaultClass: "_135hevf47" }, "6": { defaultClass: "_135hevf48" }, "8": { defaultClass: "_135hevf49" }, "10": { defaultClass: "_135hevf4a" }, "12": { defaultClass: "_135hevf4b" }, "14": { defaultClass: "_135hevf4c" }, "16": { defaultClass: "_135hevf4d" }, "18": { defaultClass: "_135hevf4e" }, "20": { defaultClass: "_135hevf4f" }, "24": { defaultClass: "_135hevf4g" }, "28": { defaultClass: "_135hevf4h" }, "32": { defaultClass: "_135hevf4i" }, "36": { defaultClass: "_135hevf4j" }, "44": { defaultClass: "_135hevf4k" }, "64": { defaultClass: "_135hevf4l" }, "-1": { defaultClass: "_135hevf4m" } } }, marginTop: { values: { "0": { defaultClass: "_135hevf4n" }, "1": { defaultClass: "_135hevf4o" }, "2": { defaultClass: "_135hevf4p" }, "3": { defaultClass: "_135hevf4q" }, "4": { defaultClass: "_135hevf4r" }, "5": { defaultClass: "_135hevf4s" }, "6": { defaultClass: "_135hevf4t" }, "8": { defaultClass: "_135hevf4u" }, "10": { defaultClass: "_135hevf4v" }, "12": { defaultClass: "_135hevf4w" }, "14": { defaultClass: "_135hevf4x" }, "16": { defaultClass: "_135hevf4y" }, "18": { defaultClass: "_135hevf4z" }, "20": { defaultClass: "_135hevf50" }, "24": { defaultClass: "_135hevf51" }, "28": { defaultClass: "_135hevf52" }, "32": { defaultClass: "_135hevf53" }, "36": { defaultClass: "_135hevf54" }, "44": { defaultClass: "_135hevf55" }, "64": { defaultClass: "_135hevf56" }, "-1": { defaultClass: "_135hevf57" } } }, maxWidth: { values: { "1": { defaultClass: "_135hevf58" }, "2": { defaultClass: "_135hevf59" }, "4": { defaultClass: "_135hevf5a" }, "8": { defaultClass: "_135hevf5b" }, "12": { defaultClass: "_135hevf5c" }, "20": { defaultClass: "_135hevf5d" }, "24": { defaultClass: "_135hevf5e" }, "28": { defaultClass: "_135hevf5f" }, "30": { defaultClass: "_135hevf5g" }, "32": { defaultClass: "_135hevf5h" }, "34": { defaultClass: "_135hevf5i" }, "36": { defaultClass: "_135hevf5j" }, "40": { defaultClass: "_135hevf5k" }, "44": { defaultClass: "_135hevf5l" }, "48": { defaultClass: "_135hevf5m" }, "54": { defaultClass: "_135hevf5n" }, "60": { defaultClass: "_135hevf5o" }, "200": { defaultClass: "_135hevf5p" }, full: { defaultClass: "_135hevf5q" }, max: { defaultClass: "_135hevf5r" } } }, minWidth: { values: { "1": { defaultClass: "_135hevf5s" }, "2": { defaultClass: "_135hevf5t" }, "4": { defaultClass: "_135hevf5u" }, "8": { defaultClass: "_135hevf5v" }, "12": { defaultClass: "_135hevf5w" }, "20": { defaultClass: "_135hevf5x" }, "24": { defaultClass: "_135hevf5y" }, "28": { defaultClass: "_135hevf5z" }, "30": { defaultClass: "_135hevf60" }, "32": { defaultClass: "_135hevf61" }, "34": { defaultClass: "_135hevf62" }, "36": { defaultClass: "_135hevf63" }, "40": { defaultClass: "_135hevf64" }, "44": { defaultClass: "_135hevf65" }, "48": { defaultClass: "_135hevf66" }, "54": { defaultClass: "_135hevf67" }, "60": { defaultClass: "_135hevf68" }, "200": { defaultClass: "_135hevf69" }, full: { defaultClass: "_135hevf6a" }, max: { defaultClass: "_135hevf6b" } } }, overflow: { values: { hidden: { defaultClass: "_135hevf6c" } } }, paddingBottom: { values: { "0": { defaultClass: "_135hevf6d" }, "1": { defaultClass: "_135hevf6e" }, "2": { defaultClass: "_135hevf6f" }, "3": { defaultClass: "_135hevf6g" }, "4": { defaultClass: "_135hevf6h" }, "5": { defaultClass: "_135hevf6i" }, "6": { defaultClass: "_135hevf6j" }, "8": { defaultClass: "_135hevf6k" }, "10": { defaultClass: "_135hevf6l" }, "12": { defaultClass: "_135hevf6m" }, "14": { defaultClass: "_135hevf6n" }, "16": { defaultClass: "_135hevf6o" }, "18": { defaultClass: "_135hevf6p" }, "20": { defaultClass: "_135hevf6q" }, "24": { defaultClass: "_135hevf6r" }, "28": { defaultClass: "_135hevf6s" }, "32": { defaultClass: "_135hevf6t" }, "36": { defaultClass: "_135hevf6u" }, "44": { defaultClass: "_135hevf6v" }, "64": { defaultClass: "_135hevf6w" }, "-1": { defaultClass: "_135hevf6x" } } }, paddingLeft: { values: { "0": { defaultClass: "_135hevf6y" }, "1": { defaultClass: "_135hevf6z" }, "2": { defaultClass: "_135hevf70" }, "3": { defaultClass: "_135hevf71" }, "4": { defaultClass: "_135hevf72" }, "5": { defaultClass: "_135hevf73" }, "6": { defaultClass: "_135hevf74" }, "8": { defaultClass: "_135hevf75" }, "10": { defaultClass: "_135hevf76" }, "12": { defaultClass: "_135hevf77" }, "14": { defaultClass: "_135hevf78" }, "16": { defaultClass: "_135hevf79" }, "18": { defaultClass: "_135hevf7a" }, "20": { defaultClass: "_135hevf7b" }, "24": { defaultClass: "_135hevf7c" }, "28": { defaultClass: "_135hevf7d" }, "32": { defaultClass: "_135hevf7e" }, "36": { defaultClass: "_135hevf7f" }, "44": { defaultClass: "_135hevf7g" }, "64": { defaultClass: "_135hevf7h" }, "-1": { defaultClass: "_135hevf7i" } } }, paddingRight: { values: { "0": { defaultClass: "_135hevf7j" }, "1": { defaultClass: "_135hevf7k" }, "2": { defaultClass: "_135hevf7l" }, "3": { defaultClass: "_135hevf7m" }, "4": { defaultClass: "_135hevf7n" }, "5": { defaultClass: "_135hevf7o" }, "6": { defaultClass: "_135hevf7p" }, "8": { defaultClass: "_135hevf7q" }, "10": { defaultClass: "_135hevf7r" }, "12": { defaultClass: "_135hevf7s" }, "14": { defaultClass: "_135hevf7t" }, "16": { defaultClass: "_135hevf7u" }, "18": { defaultClass: "_135hevf7v" }, "20": { defaultClass: "_135hevf7w" }, "24": { defaultClass: "_135hevf7x" }, "28": { defaultClass: "_135hevf7y" }, "32": { defaultClass: "_135hevf7z" }, "36": { defaultClass: "_135hevf80" }, "44": { defaultClass: "_135hevf81" }, "64": { defaultClass: "_135hevf82" }, "-1": { defaultClass: "_135hevf83" } } }, paddingTop: { values: { "0": { defaultClass: "_135hevf84" }, "1": { defaultClass: "_135hevf85" }, "2": { defaultClass: "_135hevf86" }, "3": { defaultClass: "_135hevf87" }, "4": { defaultClass: "_135hevf88" }, "5": { defaultClass: "_135hevf89" }, "6": { defaultClass: "_135hevf8a" }, "8": { defaultClass: "_135hevf8b" }, "10": { defaultClass: "_135hevf8c" }, "12": { defaultClass: "_135hevf8d" }, "14": { defaultClass: "_135hevf8e" }, "16": { defaultClass: "_135hevf8f" }, "18": { defaultClass: "_135hevf8g" }, "20": { defaultClass: "_135hevf8h" }, "24": { defaultClass: "_135hevf8i" }, "28": { defaultClass: "_135hevf8j" }, "32": { defaultClass: "_135hevf8k" }, "36": { defaultClass: "_135hevf8l" }, "44": { defaultClass: "_135hevf8m" }, "64": { defaultClass: "_135hevf8n" }, "-1": { defaultClass: "_135hevf8o" } } }, position: { values: { absolute: { defaultClass: "_135hevf8p" }, fixed: { defaultClass: "_135hevf8q" }, relative: { defaultClass: "_135hevf8r" } } }, WebkitUserSelect: { values: { none: { defaultClass: "_135hevf8s" } } }, right: { values: { "0": { defaultClass: "_135hevf8t" } } }, transition: { values: { "default": { defaultClass: "_135hevf8u" }, transform: { defaultClass: "_135hevf8v" } } }, userSelect: { values: { none: { defaultClass: "_135hevf8w" } } }, width: { values: { "1": { defaultClass: "_135hevf8x" }, "2": { defaultClass: "_135hevf8y" }, "4": { defaultClass: "_135hevf8z" }, "8": { defaultClass: "_135hevf90" }, "12": { defaultClass: "_135hevf91" }, "20": { defaultClass: "_135hevf92" }, "24": { defaultClass: "_135hevf93" }, "28": { defaultClass: "_135hevf94" }, "30": { defaultClass: "_135hevf95" }, "32": { defaultClass: "_135hevf96" }, "34": { defaultClass: "_135hevf97" }, "36": { defaultClass: "_135hevf98" }, "40": { defaultClass: "_135hevf99" }, "44": { defaultClass: "_135hevf9a" }, "48": { defaultClass: "_135hevf9b" }, "54": { defaultClass: "_135hevf9c" }, "60": { defaultClass: "_135hevf9d" }, "200": { defaultClass: "_135hevf9e" }, full: { defaultClass: "_135hevf9f" }, max: { defaultClass: "_135hevf9g" } } }, backdropFilter: { values: { modalOverlay: { defaultClass: "_135hevf9h" } } } } });
var themeVars = { colors: { accentColor: "var(--rk-colors-accentColor)", accentColorForeground: "var(--rk-colors-accentColorForeground)", actionButtonBorder: "var(--rk-colors-actionButtonBorder)", actionButtonBorderMobile: "var(--rk-colors-actionButtonBorderMobile)", actionButtonSecondaryBackground: "var(--rk-colors-actionButtonSecondaryBackground)", closeButton: "var(--rk-colors-closeButton)", closeButtonBackground: "var(--rk-colors-closeButtonBackground)", connectButtonBackground: "var(--rk-colors-connectButtonBackground)", connectButtonBackgroundError: "var(--rk-colors-connectButtonBackgroundError)", connectButtonInnerBackground: "var(--rk-colors-connectButtonInnerBackground)", connectButtonText: "var(--rk-colors-connectButtonText)", connectButtonTextError: "var(--rk-colors-connectButtonTextError)", connectionIndicator: "var(--rk-colors-connectionIndicator)", downloadBottomCardBackground: "var(--rk-colors-downloadBottomCardBackground)", downloadTopCardBackground: "var(--rk-colors-downloadTopCardBackground)", error: "var(--rk-colors-error)", generalBorder: "var(--rk-colors-generalBorder)", generalBorderDim: "var(--rk-colors-generalBorderDim)", menuItemBackground: "var(--rk-colors-menuItemBackground)", modalBackdrop: "var(--rk-colors-modalBackdrop)", modalBackground: "var(--rk-colors-modalBackground)", modalBorder: "var(--rk-colors-modalBorder)", modalText: "var(--rk-colors-modalText)", modalTextDim: "var(--rk-colors-modalTextDim)", modalTextSecondary: "var(--rk-colors-modalTextSecondary)", profileAction: "var(--rk-colors-profileAction)", profileActionHover: "var(--rk-colors-profileActionHover)", profileForeground: "var(--rk-colors-profileForeground)", selectedOptionBorder: "var(--rk-colors-selectedOptionBorder)", standby: "var(--rk-colors-standby)" }, fonts: { body: "var(--rk-fonts-body)" }, radii: { actionButton: "var(--rk-radii-actionButton)", connectButton: "var(--rk-radii-connectButton)", menuButton: "var(--rk-radii-menuButton)", modal: "var(--rk-radii-modal)", modalMobile: "var(--rk-radii-modalMobile)" }, shadows: { connectButton: "var(--rk-shadows-connectButton)", dialog: "var(--rk-shadows-dialog)", profileDetailsAction: "var(--rk-shadows-profileDetailsAction)", selectedOption: "var(--rk-shadows-selectedOption)", selectedWallet: "var(--rk-shadows-selectedWallet)", walletLogo: "var(--rk-shadows-walletLogo)" }, blurs: { modalOverlay: "var(--rk-blurs-modalOverlay)" } };

// src/css/atoms.ts
var atoms = ({ reset, ...rest }) => {
  if (!reset)
    return sprinkles(rest);
  const elementReset = element[reset];
  const sprinklesClasses = sprinkles(rest);
  return clsx(base2, elementReset, sprinklesClasses);
};

// src/components/Box/Box.ts
var Box = React2.forwardRef(
  ({ as = "div", className, testId, ...props }, ref) => {
    const atomProps = {};
    const nativeProps = {};
    for (const key in props) {
      if (sprinkles.properties.has(key)) {
        atomProps[key] = props[key];
      } else {
        nativeProps[key] = props[key];
      }
    }
    const atomicClasses = atoms({
      reset: typeof as === "string" ? as : "div",
      ...atomProps
    });
    return React2.createElement(as, {
      className: clsx2(atomicClasses, className),
      ...nativeProps,
      "data-testid": testId ? `rk-${testId.replace(/^rk-/, "")}` : void 0,
      ref
    });
  }
);
Box.displayName = "Box";

// src/components/AsyncImage/useAsyncImage.ts
import { useEffect as useEffect2, useReducer } from "react";
var cachedUrls = /* @__PURE__ */ new Map();
var cachedRequestPromises = /* @__PURE__ */ new Map();
async function loadAsyncImage(asyncImage) {
  const cachedRequestPromise = cachedRequestPromises.get(asyncImage);
  if (cachedRequestPromise) {
    return cachedRequestPromise;
  }
  const load = async () => asyncImage().then(async (url) => {
    cachedUrls.set(asyncImage, url);
    return url;
  });
  const requestPromise = load().catch((_err) => {
    return load().catch((_err2) => {
      cachedRequestPromises.delete(asyncImage);
    });
  });
  cachedRequestPromises.set(asyncImage, requestPromise);
  return requestPromise;
}
async function loadImages(...urls) {
  return await Promise.all(
    urls.map((url) => typeof url === "function" ? loadAsyncImage(url) : url)
  );
}
function useForceUpdate() {
  const [, forceUpdate] = useReducer((x) => x + 1, 0);
  return forceUpdate;
}
function useAsyncImage(url) {
  const cachedUrl = typeof url === "function" ? cachedUrls.get(url) : void 0;
  const forceUpdate = useForceUpdate();
  useEffect2(() => {
    if (typeof url === "function" && !cachedUrl) {
      loadAsyncImage(url).then(forceUpdate);
    }
  }, [url, cachedUrl, forceUpdate]);
  return typeof url === "function" ? cachedUrl : url;
}

// src/components/AsyncImage/AsyncImage.tsx
function AsyncImage({
  alt,
  background,
  borderColor,
  borderRadius,
  useAsImage,
  boxShadow,
  height,
  src: srcProp,
  width = "28",
  testId = "28",
  fullWidth,
  fullHeight
}) {
  const ios = isIOS();
  const src7 = useAsyncImage(srcProp);
  const isRemoteImage = src7 && /^http/.test(src7);
  const [isRemoteImageLoaded, setRemoteImageLoaded] = useReducer2(() => true, false);
  const isSvgString = useMemo2(() => {
    const trimmedSrc = (src7 || "").trim();
    const isSvgTag = /^<(svg|\?xml)./.test(trimmedSrc);
    return isSvgTag;
  }, [src7]);
  return /* @__PURE__ */ React3.createElement(
    Box,
    {
      "aria-label": alt,
      borderRadius,
      boxShadow,
      height: typeof height === "string" ? height : void 0,
      overflow: "hidden",
      position: "relative",
      role: "img",
      style: {
        background,
        height: typeof height === "number" ? height : void 0,
        width: typeof width === "number" ? width : void 0,
        ...fullWidth ? { width: "100%" } : {},
        ...fullHeight ? { height: "100%" } : {}
      },
      width: typeof width === "string" ? width : void 0,
      testId
    },
    /* @__PURE__ */ React3.createElement(
      Box,
      {
        ...isRemoteImage ? (
          // biome-ignore format: design system keys
          {
            "aria-hidden": true,
            as: "img",
            onLoad: setRemoteImageLoaded,
            src: src7
          }
        ) : { "aria-hidden": true, as: "img", src: src7 },
        height: "full",
        position: "absolute",
        ...ios ? { WebkitUserSelect: "none" } : {},
        style: {
          WebkitTouchCallout: "none",
          transition: "opacity .15s linear",
          userSelect: "none",
          ...!useAsImage && isRemoteImage ? {
            opacity: isRemoteImageLoaded ? 1 : 0
          } : {},
          ...fullWidth ? { width: "100%" } : {}
        },
        width: "full",
        ...isSvgString ? {
          as: "div",
          dangerouslySetInnerHTML: {
            __html: src7
          },
          src: void 0
        } : {}
      }
    ),
    borderColor ? /* @__PURE__ */ React3.createElement(
      Box,
      {
        ...typeof borderColor === "object" && "custom" in borderColor ? { style: { borderColor: borderColor.custom } } : { borderColor },
        borderRadius,
        borderStyle: "solid",
        borderWidth: "1",
        height: "full",
        position: "relative",
        width: "full"
      }
    ) : null
  );
}

// src/components/useNetworkOptions/index.tsx
import { useMemo as useMemo4 } from "react";

// src/components/RainbowKitProvider/RainbowKitChainContext.tsx
import React4, {
  createContext as createContext2,
  useContext as useContext2,
  useMemo as useMemo3
} from "react";
import { useConfig } from "wagmi";

// src/utils/isNotNullish.ts
function isNotNullish(value) {
  return value != null;
}

// src/components/RainbowKitProvider/provideRainbowKitChains.ts
var arbitrumIcon = {
  iconBackground: "#96bedc",
  iconUrl: async () => (await import("./arbitrum-IA4OWRTN.js")).default
};
var avalancheIcon = {
  iconBackground: "#e84141",
  iconUrl: async () => (await import("./avalanche-MXEFEDSW.js")).default
};
var baseIcon = {
  iconBackground: "#0052ff",
  iconUrl: async () => (await import("./base-Z4LFBE5D.js")).default
};
var blastIcon = {
  iconBackground: "#000000",
  iconUrl: async () => (await import("./blast-TN2WIMWF.js")).default
};
var bscIcon = {
  iconBackground: "#ebac0e",
  iconUrl: async () => (await import("./bsc-RVE67I5L.js")).default
};
var celoIcon = {
  iconBackground: "#FCFF52",
  iconUrl: async () => (await import("./celo-E6XU57FO.js")).default
};
var cronosIcon = {
  iconBackground: "#002D74",
  iconUrl: async () => (await import("./cronos-ROYR77VZ.js")).default
};
var ethereumIcon = {
  iconBackground: "#484c50",
  iconUrl: async () => (await import("./ethereum-RFBAMUVK.js")).default
};
var flowIcon = {
  iconBackground: "transparent",
  iconUrl: async () => (await import("./flow-NBCRNYVF.js")).default
};
var gnosisIcon = {
  iconBackground: "#04795c",
  iconUrl: async () => (await import("./gnosis-T7U5EW2Q.js")).default
};
var hardhatIcon = {
  iconBackground: "#f9f7ec",
  iconUrl: async () => (await import("./hardhat-NEEC6JX7.js")).default
};
var klaytnIcon = {
  iconBackground: "transparent",
  iconUrl: async () => (await import("./klaytn-QTDBZIB3.js")).default
};
var optimismIcon = {
  iconBackground: "#ff5a57",
  iconUrl: async () => (await import("./optimism-VD7XDD2W.js")).default
};
var mantaIcon = {
  iconBackground: "#ffffff",
  iconUrl: async () => (await import("./manta-5V6W5D7G.js")).default
};
var mantleIcon = {
  iconBackground: "#000000",
  iconUrl: async () => (await import("./mantle-KBL3OIYT.js")).default
};
var polygonIcon = {
  iconBackground: "#9f71ec",
  iconUrl: async () => (await import("./polygon-WWEUOMKW.js")).default
};
var xdcIcon = {
  iconBackground: "#f9f7ec",
  iconUrl: async () => (await import("./xdc-X7V4QFNF.js")).default
};
var zetachainIcon = {
  iconBackground: "#000000",
  iconUrl: async () => (await import("./zetachain-BMJKVYBN.js")).default
};
var zkSyncIcon = {
  iconBackground: "#f9f7ec",
  iconUrl: async () => (await import("./zkSync-JL26RB7U.js")).default
};
var zoraIcon = {
  iconBackground: "#000000",
  iconUrl: async () => (await import("./zora-YZH32HP3.js")).default
};
var roninIcon = {
  iconBackground: "#1273EA",
  iconUrl: async () => (await import("./ronin-PNHX5V6H.js")).default
};
var scrollIcon = {
  iconBackground: "#000000",
  iconUrl: async () => (await import("./scroll-NMZWDUQH.js")).default
};
var berachainTestnetbArtioIcon = {
  iconBackground: "#000000",
  iconUrl: async () => (await import("./berachain-5CWJ6ANK.js")).default
};
var seddioSepoliaIcon = {
  iconBackground: "#000000",
  iconUrl: async () => (await import("./reddio-EM5W5KAD.js")).default
};
var storyIcon = {
  iconBackground: "#000000",
  iconUrl: async () => (await import("./story-3V2DS7IG.js")).default
};
var xLayerMainnetIcon = {
  iconBackground: "#000000",
  iconUrl: async () => (await import("./xLayerMainnet-HFA3QTJU.js")).default
};
var incSepoliaIcon = {
  iconBackground: "#000000",
  iconUrl: async () => (await import("./incSepolia-S5JYGQC6.js")).default
};
var neroIcon = {
  iconBackground: "#000000",
  iconUrl: async () => "https://static.tomo.inc/token/nero.svg"
};
var chainMetadataByName = {
  arbitrum: { chainId: 42161, name: "Arbitrum", ...arbitrumIcon },
  arbitrumGoerli: { chainId: 421613, ...arbitrumIcon },
  arbitrumSepolia: { chainId: 421614, ...arbitrumIcon },
  avalanche: { chainId: 43114, ...avalancheIcon },
  avalancheFuji: { chainId: 43113, ...avalancheIcon },
  base: { chainId: 8453, name: "Base", ...baseIcon },
  baseGoerli: { chainId: 84531, ...baseIcon },
  baseSepolia: { chainId: 84532, ...baseIcon },
  blast: { chainId: 81457, name: "Blast", ...blastIcon },
  blastSepolia: { chainId: 168587773, ...blastIcon },
  bsc: { chainId: 56, name: "BSC", ...bscIcon },
  bscTestnet: { chainId: 97, ...bscIcon },
  celo: { chainId: 42220, name: "Celo", ...celoIcon },
  celoAlfajores: { chainId: 44787, name: "Celo Alfajores", ...celoIcon },
  cronos: { chainId: 25, ...cronosIcon },
  cronosTestnet: { chainId: 338, ...cronosIcon },
  flow: { chainId: 747, ...flowIcon },
  flowTestnet: { chainId: 545, ...flowIcon },
  goerli: { chainId: 5, ...ethereumIcon },
  gnosis: { chainId: 100, name: "Gnosis", ...gnosisIcon },
  hardhat: { chainId: 31337, ...hardhatIcon },
  holesky: { chainId: 17e3, ...ethereumIcon },
  kovan: { chainId: 42, ...ethereumIcon },
  klaytn: { chainId: 8217, name: "Klaytn", ...klaytnIcon },
  klaytnBaobab: { chainId: 1001, name: "Klaytn Baobab", ...klaytnIcon },
  localhost: { chainId: 1337, ...ethereumIcon },
  mainnet: { chainId: 1, name: "Ethereum", ...ethereumIcon },
  manta: { chainId: 169, name: "Manta", ...mantaIcon },
  mantaSepolia: { chainId: 3441006, ...mantaIcon },
  mantaTestnet: { chainId: 3441005, ...mantaIcon },
  mantle: { chainId: 5e3, ...mantleIcon },
  mantleTestnet: { chainId: 5001, ...mantleIcon },
  optimism: { chainId: 10, name: "Optimism", ...optimismIcon },
  optimismGoerli: { chainId: 420, ...optimismIcon },
  optimismKovan: { chainId: 69, ...optimismIcon },
  optimismSepolia: { chainId: 11155420, ...optimismIcon },
  polygon: { chainId: 137, name: "Polygon", ...polygonIcon },
  polygonAmoy: { chainId: 80002, ...polygonIcon },
  polygonMumbai: { chainId: 80001, ...polygonIcon },
  rinkeby: { chainId: 4, ...ethereumIcon },
  ropsten: { chainId: 3, ...ethereumIcon },
  ronin: { chainId: 2020, ...roninIcon },
  sepolia: { chainId: 11155111, ...ethereumIcon },
  xdc: { chainId: 50, name: "XinFin", ...xdcIcon },
  xdcTestnet: { chainId: 51, ...xdcIcon },
  zetachain: { chainId: 7e3, name: "ZetaChain", ...zetachainIcon },
  zetachainAthensTestnet: {
    chainId: 7001,
    name: "Zeta Athens",
    ...zetachainIcon
  },
  zkSync: { chainId: 324, name: "zkSync", ...zkSyncIcon },
  zkSyncTestnet: { chainId: 280, ...zkSyncIcon },
  zora: { chainId: 7777777, name: "Zora", ...zoraIcon },
  zoraSepolia: { chainId: 999999999, ...zoraIcon },
  zoraTestnet: { chainId: 999, ...zoraIcon },
  story: { chainId: 1514, ...storyIcon },
  storyAeneid: { chainId: 1315, ...storyIcon },
  scroll: { chainId: 534352, ...scrollIcon },
  scrollSepolia: { chainId: 534351, ...scrollIcon },
  polygonZkEVM: { chainId: 1101, ...polygonIcon },
  xLayerMainnet: { chainId: 196, ...xLayerMainnetIcon },
  berachainTestnetbArtio: { chainId: 80084, ...berachainTestnetbArtioIcon },
  seddioSepolia: { chainId: 50341, ...seddioSepoliaIcon },
  incSepolia: { chainId: 763373, ...incSepoliaIcon },
  nero: { chainId: 1689, ...neroIcon }
};
var chainMetadataById = Object.fromEntries(
  Object.values(chainMetadataByName).filter(isNotNullish).map(({ chainId, ...metadata }) => [chainId, metadata])
);
var provideRainbowKitChains = (chains) => chains.map((chain) => {
  const defaultMetadata = chainMetadataById[chain.id] ?? {};
  return {
    ...chain,
    name: defaultMetadata.name ?? chain.name,
    // favor colloquial names
    iconUrl: chain.iconUrl ?? defaultMetadata.iconUrl,
    iconBackground: chain.iconBackground ?? defaultMetadata.iconBackground
  };
});

// src/components/RainbowKitProvider/RainbowKitChainContext.tsx
var RainbowKitChainContext = createContext2({
  chains: []
});
function RainbowKitChainProvider({
  children,
  initialChain
}) {
  const { chains } = useConfig();
  return /* @__PURE__ */ React4.createElement(
    RainbowKitChainContext.Provider,
    {
      value: useMemo3(
        () => ({
          chains: provideRainbowKitChains(chains),
          initialChainId: typeof initialChain === "number" ? initialChain : initialChain?.id
        }),
        [chains, initialChain]
      )
    },
    children
  );
}
var useRainbowKitChains = () => useContext2(RainbowKitChainContext).chains;
var useInitialChainId = () => useContext2(RainbowKitChainContext).initialChainId;
var useRainbowKitChainsById = () => {
  const rainbowkitChains = useRainbowKitChains();
  return useMemo3(() => {
    const rainbowkitChainsById = {};
    for (const rkChain of rainbowkitChains) {
      rainbowkitChainsById[rkChain.id] = rkChain;
    }
    return rainbowkitChainsById;
  }, [rainbowkitChains]);
};

// src/components/useNetworkOptions/index.tsx
import React5 from "react";
import { useSwitchChain } from "wagmi";
function useNetworkOptions() {
  const { switchChainAsync } = useSwitchChain();
  const rainbowKitChains = useRainbowKitChains();
  const networkOptions = useMemo4(() => {
    return rainbowKitChains.map((rc) => ({
      id: rc.id,
      name: rc.name,
      logo: /* @__PURE__ */ React5.createElement(
        "div",
        {
          style: {
            display: "flex",
            alignItems: "center",
            width: 24,
            height: 24
          }
        },
        rc?.iconUrl ? /* @__PURE__ */ React5.createElement(AsyncImage, { src: rc?.iconUrl || "", fullWidth: true, fullHeight: true }) : /* @__PURE__ */ React5.createElement(
          Box,
          {
            style: {
              color: "#8989AB",
              backgroundColor: "#EBEBF4",
              width: 24,
              height: 24,
              borderRadius: "50%",
              display: "flex",
              justifyContent: "center",
              alignItems: "center"
            }
          },
          rc.name.slice(0, 1).toUpperCase()
        )
      ),
      onClick: async () => {
        await switchChainAsync({ chainId: rc.id });
      }
    }));
  }, [rainbowKitChains, switchChainAsync]);
  return networkOptions;
}

// src/components/ConnectModal/socialLoginTypeSL.ts
var socialLoginTypeStorageKey = "TOMO_SOCIAL_LOGIN_TYPE";
function readSocialLoginType() {
  return localStorage.getItem(socialLoginTypeStorageKey);
}
function writeSocialLoginType(type) {
  localStorage.setItem(socialLoginTypeStorageKey, type);
}

// assets/icon_google.svg
var icon_google_default = 'data:image/svg+xml,<svg width="30" height="30" viewBox="0 0 30 30" fill="none"%0A  xmlns="http://www.w3.org/2000/svg">%0A  <path d="M14.9763 12.666V17.636H21.883C21.5797 19.2344 20.6696 20.5877 19.3046 21.4977L23.4696 24.7294C25.8962 22.4895 27.2963 19.1995 27.2963 15.2911C27.2963 14.3812 27.2146 13.5061 27.0629 12.6662L14.9763 12.666Z" fill="%234285F4"/>%0A  <path d="M7.78444 17.4424L6.84507 18.1615L3.52002 20.7514C5.63168 24.9397 9.95969 27.8331 14.9763 27.8331C18.4412 27.8331 21.3462 26.6897 23.4696 24.7298L19.3046 21.4981C18.1613 22.2681 16.7029 22.7348 14.9763 22.7348C11.6397 22.7348 8.80476 20.4832 7.78968 17.4498L7.78444 17.4424Z" fill="%2334A853"/>%0A  <path d="M3.51988 9.24805C2.64492 10.9746 2.14331 12.923 2.14331 14.9996C2.14331 17.0763 2.64492 19.0246 3.51988 20.7512C3.51988 20.7628 7.78995 17.4379 7.78995 17.4379C7.53329 16.6679 7.38158 15.8513 7.38158 14.9995C7.38158 14.1477 7.53329 13.3311 7.78995 12.5611L3.51988 9.24805Z" fill="%23FBBC05"/>%0A  <path d="M14.9766 7.27601C16.8666 7.27601 18.5466 7.92933 19.8882 9.18935L23.5632 5.51439C21.3349 3.43776 18.4416 2.16602 14.9766 2.16602C9.95996 2.16602 5.63168 5.04768 3.52002 9.24769L7.78996 12.561C8.8049 9.52766 11.6399 7.27601 14.9766 7.27601Z" fill="%23EA4335"/>%0A</svg>%0A';

// assets/icon_x.svg
var icon_x_default = 'data:image/svg+xml,<svg width="31" height="30" viewBox="0 0 31 30" fill="none"%0A  xmlns="http://www.w3.org/2000/svg">%0A  <path d="M22.2967 4.5H25.8591L18.0762 13.3954L27.2322 25.5H20.0631L14.4481 18.1586L8.02314 25.5H4.45853L12.7831 15.9854L3.99976 4.5H11.3508L16.4264 11.2103L22.2967 4.5ZM21.0464 23.3677H23.0204L10.2782 6.52031H8.15991L21.0464 23.3677Z" fill="%23121212"/>%0A</svg>%0A';

// assets/icon_kakao.svg
var icon_kakao_default = 'data:image/svg+xml,<svg width="31" height="30" viewBox="0 0 31 30" fill="none"%0A  xmlns="http://www.w3.org/2000/svg">%0A  <g clip-path="url(%23clip0_27435_67429)">%0A    <path d="M15.6667 0C23.9508 0 30.6667 6.71591 30.6667 15C30.6667 23.2841 23.9508 30 15.6667 30C7.38266 30 0.666748 23.2841 0.666748 15C0.666748 6.71591 7.38266 0 15.6667 0Z" fill="%23FBE404"/>%0A    <path d="M14.3422 5.39985C10.2632 5.89369 7.09849 7.90693 5.67006 10.9141C3.8876 14.6677 5.51306 18.9576 9.57362 21.2249C9.93226 21.4252 9.92611 21.411 9.83375 21.7455L9.69214 22.2741C9.65212 22.4318 9.54129 22.8578 9.44586 23.2144C8.85478 25.4706 8.86864 25.4075 8.92713 25.5337C8.99485 25.6789 9.18572 25.7578 9.30886 25.6899C9.38429 25.6489 12.8861 23.2255 13.4818 22.8026C13.6634 22.6732 13.7681 22.6212 13.8158 22.6338C14.57 22.8547 17.1252 22.7742 18.3828 22.4918C24.2874 21.1712 27.6491 16.2991 25.9328 11.5579C24.9816 8.93247 22.3864 6.71729 19.2263 5.83058C18.8107 5.71383 18.2073 5.5813 17.7455 5.50399C16.9205 5.3683 15.0765 5.3115 14.3438 5.39985M13.7081 11.5137C14.0282 11.6368 14.1129 11.7646 14.3946 12.5424L14.6301 13.194C14.6609 13.2729 14.784 13.6232 14.9071 13.9719C15.0303 14.319 15.2642 14.9848 15.4305 15.4487C15.8138 16.5247 15.8215 16.703 15.4921 16.8923C15.0564 17.1448 14.7732 16.9507 14.5531 16.2502L14.4454 15.9062L13.4218 15.8967L12.3997 15.8873L12.2719 16.2849C12.2219 16.4545 12.1548 16.6185 12.0718 16.774C11.764 17.1795 11.059 16.9318 11.059 16.4158C11.059 16.2738 11.0513 16.2928 11.7255 14.4783L12.1288 13.3739C12.6414 11.9665 12.6506 11.946 12.7922 11.7772C13.0616 11.4616 13.3525 11.3764 13.7081 11.5137ZM16.9959 11.52C17.1052 11.5784 17.1745 11.6478 17.2314 11.7614L17.3115 11.9192V15.8131L18.0749 15.8242C19.077 15.8384 19.1909 15.8952 19.1909 16.3827C19.1909 16.8955 19.0293 16.9507 17.5393 16.9318C16.4125 16.9176 16.3771 16.9097 16.2309 16.613L16.1524 16.4521V14.1849C16.1524 11.7803 16.1524 11.7646 16.3171 11.6131C16.4062 11.5268 16.5196 11.4713 16.6411 11.4546C16.7626 11.4379 16.8862 11.4608 16.9944 11.52M20.3238 11.4948C20.6563 11.6368 20.684 11.7314 20.684 12.7096C20.684 13.1451 20.6978 13.5017 20.7132 13.5017C20.7286 13.5017 20.8517 13.3834 20.9841 13.2382C22.1678 11.9571 22.5357 11.5894 22.665 11.5642C23.0929 11.4806 23.4377 11.7661 23.3777 12.1511C23.353 12.3089 23.2053 12.4872 22.4279 13.3076C22.097 13.6563 21.8292 13.9577 21.8353 13.9766C21.8399 13.9955 21.92 14.1123 22.0123 14.2353C23.4885 16.206 23.5177 16.2517 23.4839 16.5105C23.4223 16.9917 22.8158 17.1448 22.468 16.7677C22.3802 16.673 21.6291 15.6364 21.2827 15.1284C21.2117 15.0252 21.1378 14.9242 21.0611 14.8254L20.9764 14.7197L20.8302 14.857L20.684 14.9927V15.7547C20.684 16.4426 20.6778 16.531 20.6132 16.6667C20.4223 17.0738 19.7712 17.0785 19.5926 16.673C19.5311 16.531 19.5264 16.4048 19.5249 14.2227V11.9239L19.6034 11.7661C19.6661 11.6343 19.7761 11.5325 19.9103 11.4819C20.0446 11.4314 20.1927 11.436 20.3238 11.4948ZM11.5839 11.5658C11.9456 11.7567 11.9379 12.3594 11.5716 12.5377C11.4761 12.585 11.3361 12.596 10.8866 12.596H10.3217V14.5572C10.3217 16.4426 10.3186 16.5231 10.2509 16.6667C10.0677 17.0548 9.46587 17.0801 9.24575 16.7077C9.18418 16.6004 9.17803 16.4805 9.1611 14.6045L9.14416 12.615L8.54385 12.596C7.86196 12.5755 7.79731 12.5534 7.68341 12.2963C7.56796 12.0296 7.64647 11.7235 7.86812 11.5847C8.02512 11.4869 11.4038 11.4695 11.5839 11.5658ZM13.3987 12.7712C13.3417 12.8658 12.746 14.7749 12.763 14.8065C12.7984 14.8633 14.0436 14.8491 14.0652 14.7907C14.099 14.7008 13.4387 12.7033 13.3987 12.7712Z" fill="%233C1C1C"/>%0A  </g>%0A  <defs>%0A    <clipPath id="clip0_27435_67429">%0A      <rect width="30" height="30" fill="white" transform="translate(0.666748)"/>%0A    </clipPath>%0A  </defs>%0A</svg>%0A';

// assets/icon_telegram.svg
var icon_telegram_default = 'data:image/svg+xml,<svg width="30" height="30" viewBox="0 0 30 30" fill="none"%0A  xmlns="http://www.w3.org/2000/svg">%0A  <g clip-path="url(%23clip0_27435_67450)">%0A    <path d="M15 29C22.732 29 29 22.732 29 15C29 7.26801 22.732 1 15 1C7.26801 1 1 7.26801 1 15C1 22.732 7.26801 29 15 29Z" fill="url(%23paint0_linear_27435_67450)"/>%0A    <path fill-rule="evenodd" clip-rule="evenodd" d="M7.33719 14.8519C11.4185 13.0738 14.14 11.9015 15.5017 11.3352C19.3896 9.71802 20.1975 9.43711 20.7241 9.42783C20.8399 9.42579 21.0988 9.4545 21.2666 9.5906C21.4082 9.70553 21.4472 9.86078 21.4658 9.96974C21.4845 10.0787 21.5077 10.3269 21.4892 10.5209C21.2785 12.7346 20.3669 18.1067 19.9031 20.5861C19.7069 21.6353 19.3204 21.987 18.9463 22.0215C18.1333 22.0963 17.516 21.4842 16.7285 20.968C15.4963 20.1603 14.8002 19.6575 13.6042 18.8693C12.222 17.9584 13.118 17.4578 13.9057 16.6396C14.1119 16.4255 17.694 13.1673 17.7633 12.8717C17.772 12.8348 17.7801 12.697 17.6982 12.6242C17.6163 12.5515 17.4955 12.5763 17.4083 12.5961C17.2848 12.6242 15.3163 13.9252 11.5031 16.4993C10.9443 16.883 10.4382 17.0699 9.98482 17.0601C9.48494 17.0493 8.52339 16.7775 7.80857 16.5451C6.93182 16.2601 6.235 16.1094 6.29568 15.6254C6.32728 15.3733 6.67445 15.1155 7.33719 14.8519Z" fill="white"/>%0A  </g>%0A  <defs>%0A    <linearGradient id="paint0_linear_27435_67450" x1="15" y1="1" x2="15" y2="28.7923" gradientUnits="userSpaceOnUse">%0A      <stop stop-color="%232AABEE"/>%0A      <stop offset="1" stop-color="%23229ED9"/>%0A    </linearGradient>%0A    <clipPath id="clip0_27435_67450">%0A      <rect width="28" height="28" fill="white" transform="translate(1 1)"/>%0A    </clipPath>%0A  </defs>%0A</svg>%0A';

// assets/icon_email_new.svg
var icon_email_new_default = 'data:image/svg+xml,<svg width="20" height="20" viewBox="0 0 20 20" fill="none" xmlns="http://www.w3.org/2000/svg">%0A<rect x="0.5" y="0.5" width="19" height="19" rx="9.5" fill="%23FCD436"/>%0A<rect x="0.5" y="0.5" width="19" height="19" rx="9.5" stroke="white"/>%0A<path d="M6.24992 6.25H13.7499C13.98 6.25 14.1666 6.43655 14.1666 6.66667V13.3333C14.1666 13.5635 13.98 13.75 13.7499 13.75H6.24992C6.0198 13.75 5.83325 13.5635 5.83325 13.3333V6.66667C5.83325 6.43655 6.0198 6.25 6.24992 6.25ZM10.0252 9.86788L7.35293 7.59904L6.81358 8.23429L10.0304 10.9655L13.1893 8.23173L12.6439 7.6016L10.0252 9.86788Z" fill="%2312122A"/>%0A</svg>%0A';

// src/components/IconImg/index.tsx
import React6 from "react";
function IconImg({
  className,
  src: src7,
  alt,
  theme,
  ...props
}) {
  return /* @__PURE__ */ React6.createElement(
    "img",
    {
      alt: alt || "",
      src: src7,
      ...props,
      className,
      style: theme === "dark" ? {
        filter: "invert(100%)"
      } : {}
    }
  );
}

// src/components/AccountModal/AccountModal.tsx
import { WebWalletInvokeType } from "@tomo-inc/shared-type";
var loginTypeIcon = {
  google: /* @__PURE__ */ React7.createElement(IconImg, { width: 22, height: 22, src: icon_google_default, alt: "google" }),
  twitter: /* @__PURE__ */ React7.createElement(IconImg, { width: 22, height: 22, src: icon_x_default, alt: "x" }),
  kakao: /* @__PURE__ */ React7.createElement(IconImg, { width: 22, height: 22, src: icon_kakao_default, alt: "kakao" }),
  telegram: /* @__PURE__ */ React7.createElement(IconImg, { width: 22, height: 22, src: icon_telegram_default, alt: "telegram" }),
  email: /* @__PURE__ */ React7.createElement(IconImg, { width: 22, height: 22, src: icon_email_new_default, alt: "email" })
};
function AccountModal({ onClose, open }) {
  const { address, connector, isConnected } = useAccount3();
  const chainId = useChainId();
  const { disconnect } = useDisconnect();
  const [loginType, setLoginType] = useState2("");
  const networkOptions = useNetworkOptions();
  const selectedNetwork = useMemo5(() => {
    const network = networkOptions.find((rc) => rc.id === chainId);
    return {
      id: chainId,
      name: network?.name || "",
      logo: network?.logo
    };
  }, [networkOptions, chainId]);
  const connectorName = connector?.name;
  const showSetting = connectorName === "Tomo Wallet";
  const iconSrc = connector?.icon || connector?.iconUrl || connector?.rkDetails?.iconUrl || "";
  useEffect3(() => {
    const type = readSocialLoginType();
    if (type)
      setLoginType(type);
    else
      setLoginType("");
  }, [isConnected]);
  const LoginTypeIcon = loginTypeIcon[loginType];
  if (!address) {
    return null;
  }
  const handleAction = async (type) => {
    const provider = await connector?.getProvider();
    const tomoSDK = provider?.core;
    try {
      tomoSDK?.closeAllRelayWindow();
      switch (type) {
        case WebWalletInvokeType.ONRAMP:
          tomoSDK?.openOnramp();
          break;
        case WebWalletInvokeType.SWAP:
          tomoSDK?.openSwap();
          break;
        case WebWalletInvokeType.SEND:
          tomoSDK?.openSend();
          break;
        case WebWalletInvokeType.RECEIVE:
          tomoSDK?.openReceive();
          break;
        case WebWalletInvokeType.CHANGE_PAY_PIN:
          tomoSDK?.openChangePayPin();
          break;
      }
    } catch (e) {
      console.log("handleAction error:", e);
    }
  };
  const onChangePayPin = () => {
    handleAction(WebWalletInvokeType.CHANGE_PAY_PIN);
  };
  const actions = [
    {
      icon: "tg_wallet_buying",
      label: "Add cash",
      key: "onramp",
      onClick: function() {
        handleAction(WebWalletInvokeType.ONRAMP);
      }
    },
    {
      icon: "tg_wallet_swap",
      label: "Swap",
      key: "swap",
      onClick: function() {
        handleAction(WebWalletInvokeType.SWAP);
      }
    },
    {
      icon: "tg_wallet_sent",
      label: "Send",
      key: "send",
      onClick: function() {
        handleAction(WebWalletInvokeType.SEND);
      }
    },
    {
      icon: "tg_wallet_reception",
      label: "Receive",
      key: "receive",
      onClick: function() {
        handleAction(WebWalletInvokeType.RECEIVE);
      }
    }
  ];
  return /* @__PURE__ */ React7.createElement(
    ConnectedModal,
    {
      opened: open,
      onClose,
      title: "Connected Modal",
      theme: Theme.LIGHT,
      onLogout: () => {
        disconnect();
        writeSocialLoginType("");
      },
      outsideClosable: false,
      selectedNetwork,
      networkOptions,
      onChangePayPin,
      showSetting,
      actions: loginType ? actions : [],
      accountInfo: {
        address,
        name: connector?.name || "",
        icon: /* @__PURE__ */ React7.createElement(
          "div",
          {
            style: {
              width: 46,
              height: 46,
              borderRadius: 10,
              position: "relative"
            }
          },
          /* @__PURE__ */ React7.createElement(AsyncImage, { src: iconSrc, fullHeight: true, fullWidth: true }),
          !!LoginTypeIcon && /* @__PURE__ */ React7.createElement(
            "div",
            {
              style: {
                position: "absolute",
                right: -4,
                bottom: -3,
                borderRadius: "50%",
                background: "white",
                width: 22,
                height: 22
              }
            },
            LoginTypeIcon
          )
        )
      },
      onNetworkSwitch: async () => {
        console.log("switch");
      },
      showDisconnect: true,
      fullScreenHeight: true
    }
  );
}

// src/components/ChainModal/ChainModal.tsx
import React8, { useMemo as useMemo6 } from "react";
import { useAccount as useAccount4 } from "wagmi";
import { NetworkPopup } from "@tomo-inc/uikit-lite";
function ChainModal({ onClose, open }) {
  const { chainId } = useAccount4();
  const networkOptions = useNetworkOptions();
  const selectedNetwork = useMemo6(() => {
    return networkOptions.find((n) => n.id === chainId);
  }, [networkOptions, chainId]);
  if (!chainId) {
    return null;
  }
  return /* @__PURE__ */ React8.createElement(
    NetworkPopup,
    {
      opened: open,
      networkOptions,
      onClose,
      selectedNetwork,
      showDisconnect: true
    }
  );
}

// src/components/ConnectModal/ConnectModal.tsx
import React37 from "react";
import { useAccount as useAccount8, useDisconnect as useDisconnect2 } from "wagmi";

// src/components/Dialog/Dialog.tsx
import React25, {
  useCallback as useCallback5,
  useEffect as useEffect11,
  useState as useState9
} from "react";
import { createPortal } from "react-dom";
import { RemoveScroll } from "react-remove-scroll";

// src/components/RainbowKitProvider/RainbowKitProvider.tsx
import React23, {
  createContext as createContext11,
  useContext as useContext6,
  useEffect as useEffect9,
  useMemo as useMemo11,
  useState as useState8
} from "react";
import { useAccountEffect as useAccountEffect2 } from "wagmi";

// src/css/cssObjectFromTheme.ts
import { assignInlineVars } from "@vanilla-extract/dynamic";
var resolveThemeVars = (theme) => typeof theme === "function" ? theme() : theme;
function cssObjectFromTheme(theme, { extends: baseTheme } = {}) {
  const resolvedThemeVars = {
    // We use an object spread here to ensure it's a plain object since vanilla-extract's
    // var objects have a custom 'toString' method that returns a CSS string, but we don't
    // want to leak this to our consumers since they're unaware we're using vanilla-extract.
    // Instead, we want them to handle this explicitly via our 'cssStringFromTheme' function.
    ...assignInlineVars(themeVars, resolveThemeVars(theme))
  };
  if (!baseTheme) {
    return resolvedThemeVars;
  }
  const resolvedBaseThemeVars = assignInlineVars(
    themeVars,
    resolveThemeVars(baseTheme)
  );
  const filteredVars = Object.fromEntries(
    Object.entries(resolvedThemeVars).filter(
      ([varName, value]) => value !== resolvedBaseThemeVars[varName]
    )
  );
  return filteredVars;
}

// src/css/cssStringFromTheme.ts
function cssStringFromTheme(theme, options = {}) {
  return Object.entries(cssObjectFromTheme(theme, options)).map(([key, value]) => `${key}:${value.replace(/[:;{}</>]/g, "")};`).join("");
}

// src/transactions/TransactionStoreContext.tsx
import React9 from "react";
import { useAccount as useAccount6, useBalance, usePublicClient } from "wagmi";

// src/hooks/useChainId.ts
import { useAccount as useAccount5 } from "wagmi";
function useChainId2() {
  const { chain: activeChain } = useAccount5();
  return activeChain?.id ?? null;
}

// src/transactions/transactionStore.ts
var storageKey = "rk-transactions";
function safeParseJsonData(string) {
  try {
    const value = string ? JSON.parse(string) : {};
    return typeof value === "object" ? value : {};
  } catch {
    return {};
  }
}
function loadData() {
  return safeParseJsonData(
    typeof localStorage !== "undefined" ? localStorage.getItem(storageKey) : null
  );
}
var transactionHashRegex = /^0x([A-Fa-f0-9]{64})$/;
function validateTransaction(transaction) {
  const errors = [];
  if (!transactionHashRegex.test(transaction.hash)) {
    errors.push("Invalid transaction hash");
  }
  if (typeof transaction.description !== "string") {
    errors.push("Transaction must have a description");
  }
  if (typeof transaction.confirmations !== "undefined" && (!Number.isInteger(transaction.confirmations) || transaction.confirmations < 1)) {
    errors.push("Transaction confirmations must be a positiver integer");
  }
  return errors;
}
function createTransactionStore({
  provider: initialProvider
}) {
  let data = loadData();
  let provider = initialProvider;
  const listeners = /* @__PURE__ */ new Set();
  const transactionListeners = /* @__PURE__ */ new Set();
  const transactionRequestCache = /* @__PURE__ */ new Map();
  function setProvider(newProvider) {
    provider = newProvider;
  }
  function getTransactions(account, chainId) {
    return data[account]?.[chainId] ?? [];
  }
  function addTransaction(account, chainId, transaction) {
    const errors = validateTransaction(transaction);
    if (errors.length > 0) {
      throw new Error(["Unable to add transaction", ...errors].join("\n"));
    }
    updateTransactions(account, chainId, (transactions) => {
      return [
        { ...transaction, status: "pending" },
        ...transactions.filter(({ hash }) => {
          return hash !== transaction.hash;
        })
      ];
    });
  }
  function clearTransactions(account, chainId) {
    updateTransactions(account, chainId, () => {
      return [];
    });
  }
  function setTransactionStatus(account, chainId, hash, status) {
    updateTransactions(account, chainId, (transactions) => {
      return transactions.map(
        (transaction) => transaction.hash === hash ? { ...transaction, status } : transaction
      );
    });
  }
  async function waitForPendingTransactions(account, chainId) {
    await Promise.all(
      getTransactions(account, chainId).filter((transaction) => transaction.status === "pending").map(async (transaction) => {
        const { confirmations, hash } = transaction;
        const existingRequest = transactionRequestCache.get(hash);
        if (existingRequest) {
          return await existingRequest;
        }
        const requestPromise = provider.waitForTransactionReceipt({
          confirmations,
          hash,
          timeout: 3e5
          // 5 minutes
        }).then(({ status }) => {
          transactionRequestCache.delete(hash);
          if (status === void 0) {
            return;
          }
          setTransactionStatus(
            account,
            chainId,
            hash,
            // @ts-ignore - types changed with viem@1.1.0
            status === 0 || status === "reverted" ? "failed" : "confirmed"
          );
          notifyTransactionListeners(status);
        }).catch(() => {
          setTransactionStatus(account, chainId, hash, "failed");
        });
        transactionRequestCache.set(hash, requestPromise);
        return await requestPromise;
      })
    );
  }
  function updateTransactions(account, chainId, updateFn) {
    data = loadData();
    data[account] = data[account] ?? {};
    let completedTransactionCount = 0;
    const MAX_COMPLETED_TRANSACTIONS = 10;
    const transactions = updateFn(data[account][chainId] ?? []).filter(({ status }) => {
      return status === "pending" ? true : completedTransactionCount++ <= MAX_COMPLETED_TRANSACTIONS;
    });
    data[account][chainId] = transactions.length > 0 ? transactions : void 0;
    persistData();
    notifyListeners();
    waitForPendingTransactions(account, chainId);
  }
  function persistData() {
    localStorage.setItem(storageKey, JSON.stringify(data));
  }
  function notifyListeners() {
    for (const listener of listeners) {
      listener();
    }
  }
  function notifyTransactionListeners(txStatus) {
    for (const transactionListener of transactionListeners) {
      transactionListener(txStatus);
    }
  }
  function onChange(fn) {
    listeners.add(fn);
    return () => {
      listeners.delete(fn);
    };
  }
  function onTransactionStatus(fn) {
    transactionListeners.add(fn);
    return () => {
      transactionListeners.delete(fn);
    };
  }
  return {
    addTransaction,
    clearTransactions,
    getTransactions,
    onTransactionStatus,
    onChange,
    setProvider,
    waitForPendingTransactions
  };
}

// src/transactions/TransactionStoreContext.tsx
var storeSingleton;
var TransactionStoreContext = React9.createContext(
  null
);
function TransactionStoreProvider({
  children
}) {
  const provider = usePublicClient();
  const { address } = useAccount6();
  const chainId = useChainId2();
  const { refetch } = useBalance({
    address,
    query: {
      enabled: false
    }
  });
  const [store] = React9.useState(
    () => storeSingleton ?? (storeSingleton = createTransactionStore({ provider }))
  );
  const onTransactionStatus = React9.useCallback(
    (txStatus) => {
      if (txStatus === "success")
        refetch();
    },
    [refetch]
  );
  React9.useEffect(() => {
    store.setProvider(provider);
  }, [store, provider]);
  React9.useEffect(() => {
    if (address && chainId) {
      store.waitForPendingTransactions(address, chainId);
    }
  }, [store, address, chainId]);
  React9.useEffect(() => {
    if (store && address && chainId) {
      return store.onTransactionStatus(onTransactionStatus);
    }
  }, [store, address, chainId, onTransactionStatus]);
  return /* @__PURE__ */ React9.createElement(TransactionStoreContext.Provider, { value: store }, children);
}
function useTransactionStore() {
  const store = React9.useContext(TransactionStoreContext);
  if (!store) {
    throw new Error("Transaction hooks must be used within RainbowKitProvider");
  }
  return store;
}

// src/components/RainbowKitProvider/AppContext.ts
import { createContext as createContext3 } from "react";
var defaultAppInfo = {
  appName: void 0,
  disclaimer: void 0,
  learnMoreUrl: "https://learn.rainbow.me/understanding-web3?utm_source=rainbowkit&utm_campaign=learnmore"
};
var AppContext = createContext3(defaultAppInfo);

// src/components/RainbowKitProvider/AvatarContext.ts
import { createContext as createContext4 } from "react";

// src/components/Avatar/EmojiAvatar.tsx
import React11, { useEffect as useEffect4, useMemo as useMemo8, useState as useState3 } from "react";

// src/components/Icons/Spinner.tsx
import React10, { useMemo as useMemo7 } from "react";

// src/components/Icons/Icons.css.ts
var SpinnerIconClassName = "omsqez2";
var SpinnerIconPathClassName = "omsqez3";

// src/components/Icons/Spinner.tsx
var useRandomId = (prefix) => useMemo7(
  () => `${prefix}_${Math.round(Math.random() * 1e9)}`,
  [prefix]
);
var SpinnerIcon = ({
  height = 21,
  width = 21
}) => {
  const id = useRandomId("spinner");
  return /* @__PURE__ */ React10.createElement(
    "svg",
    {
      className: SpinnerIconClassName,
      fill: "none",
      height,
      viewBox: "0 0 21 21",
      width,
      xmlns: "http://www.w3.org/2000/svg"
    },
    /* @__PURE__ */ React10.createElement("title", null, "Loading"),
    /* @__PURE__ */ React10.createElement("clipPath", { id }, /* @__PURE__ */ React10.createElement("path", { d: "M10.5 3C6.35786 3 3 6.35786 3 10.5C3 14.6421 6.35786 18 10.5 18C11.3284 18 12 18.6716 12 19.5C12 20.3284 11.3284 21 10.5 21C4.70101 21 0 16.299 0 10.5C0 4.70101 4.70101 0 10.5 0C16.299 0 21 4.70101 21 10.5C21 11.3284 20.3284 12 19.5 12C18.6716 12 18 11.3284 18 10.5C18 6.35786 14.6421 3 10.5 3Z" })),
    /* @__PURE__ */ React10.createElement(
      "foreignObject",
      {
        clipPath: `url(#${id})`,
        height: "21",
        width: "21",
        x: "0",
        y: "0"
      },
      /* @__PURE__ */ React10.createElement("div", { className: SpinnerIconPathClassName })
    )
  );
};

// src/components/Avatar/emojiAvatarForAddress.ts
var colors = [
  "#FC5C54",
  "#FFD95A",
  "#E95D72",
  "#6A87C8",
  "#5FD0F3",
  "#75C06B",
  "#FFDD86",
  "#5FC6D4",
  "#FF949A",
  "#FF8024",
  "#9BA1A4",
  "#EC66FF",
  "#FF8CBC",
  "#FF9A23",
  "#C5DADB",
  "#A8CE63",
  "#71ABFF",
  "#FFE279",
  "#B6B1B6",
  "#FF6780",
  "#A575FF",
  "#4D82FF",
  "#FFB35A"
];
var avatars = [
  { color: colors[0], emoji: "\u{1F336}" },
  { color: colors[1], emoji: "\u{1F911}" },
  { color: colors[2], emoji: "\u{1F419}" },
  { color: colors[3], emoji: "\u{1FAD0}" },
  { color: colors[4], emoji: "\u{1F433}" },
  { color: colors[0], emoji: "\u{1F936}" },
  { color: colors[5], emoji: "\u{1F332}" },
  { color: colors[6], emoji: "\u{1F31E}" },
  { color: colors[7], emoji: "\u{1F412}" },
  { color: colors[8], emoji: "\u{1F435}" },
  { color: colors[9], emoji: "\u{1F98A}" },
  { color: colors[10], emoji: "\u{1F43C}" },
  { color: colors[11], emoji: "\u{1F984}" },
  { color: colors[12], emoji: "\u{1F437}" },
  { color: colors[13], emoji: "\u{1F427}" },
  { color: colors[8], emoji: "\u{1F9A9}" },
  { color: colors[14], emoji: "\u{1F47D}" },
  { color: colors[0], emoji: "\u{1F388}" },
  { color: colors[8], emoji: "\u{1F349}" },
  { color: colors[1], emoji: "\u{1F389}" },
  { color: colors[15], emoji: "\u{1F432}" },
  { color: colors[16], emoji: "\u{1F30E}" },
  { color: colors[17], emoji: "\u{1F34A}" },
  { color: colors[18], emoji: "\u{1F42D}" },
  { color: colors[19], emoji: "\u{1F363}" },
  { color: colors[1], emoji: "\u{1F425}" },
  { color: colors[20], emoji: "\u{1F47E}" },
  { color: colors[15], emoji: "\u{1F966}" },
  { color: colors[0], emoji: "\u{1F479}" },
  { color: colors[17], emoji: "\u{1F640}" },
  { color: colors[4], emoji: "\u26F1" },
  { color: colors[21], emoji: "\u26F5\uFE0F" },
  { color: colors[17], emoji: "\u{1F973}" },
  { color: colors[8], emoji: "\u{1F92F}" },
  { color: colors[22], emoji: "\u{1F920}" }
];
function hashCode(text) {
  let hash = 0;
  if (text.length === 0)
    return hash;
  for (let i = 0; i < text.length; i++) {
    const chr = text.charCodeAt(i);
    hash = (hash << 5) - hash + chr;
    hash |= 0;
  }
  return hash;
}
function emojiAvatarForAddress(address) {
  const resolvedAddress = typeof address === "string" ? address : "";
  const avatarIndex = Math.abs(
    hashCode(resolvedAddress.toLowerCase()) % avatars.length
  );
  return avatars[avatarIndex ?? 0];
}

// src/components/Avatar/EmojiAvatar.tsx
var EmojiAvatar = ({ address, ensImage, size }) => {
  const [loaded, setLoaded] = useState3(false);
  useEffect4(() => {
    if (ensImage) {
      const img = new Image();
      img.src = ensImage;
      img.onload = () => setLoaded(true);
    }
  }, [ensImage]);
  const { color: backgroundColor, emoji } = useMemo8(
    () => emojiAvatarForAddress(address),
    [address]
  );
  return ensImage ? loaded ? /* @__PURE__ */ React11.createElement(
    Box,
    {
      backgroundSize: "cover",
      borderRadius: "full",
      position: "absolute",
      style: {
        backgroundImage: `url(${ensImage})`,
        backgroundPosition: "center",
        height: size,
        width: size
      }
    }
  ) : /* @__PURE__ */ React11.createElement(
    Box,
    {
      alignItems: "center",
      backgroundSize: "cover",
      borderRadius: "full",
      color: "modalText",
      display: "flex",
      justifyContent: "center",
      position: "absolute",
      style: {
        height: size,
        width: size
      }
    },
    /* @__PURE__ */ React11.createElement(SpinnerIcon, null)
  ) : /* @__PURE__ */ React11.createElement(
    Box,
    {
      alignItems: "center",
      display: "flex",
      justifyContent: "center",
      overflow: "hidden",
      style: {
        ...!ensImage && { backgroundColor },
        height: size,
        width: size
      }
    },
    emoji
  );
};

// src/components/RainbowKitProvider/AvatarContext.ts
var defaultAvatar = EmojiAvatar;
var AvatarContext = createContext4(defaultAvatar);

// src/components/RainbowKitProvider/CoolModeContext.ts
import { createContext as createContext5 } from "react";
var CoolModeContext = createContext5(false);

// src/components/RainbowKitProvider/I18nContext.tsx
import React12, {
  createContext as createContext6,
  useEffect as useEffect5,
  useMemo as useMemo9,
  useState as useState4
} from "react";

// src/locales/I18n.ts
var defaultOptions = {
  defaultLocale: "en",
  locale: "en"
};
var I18n = class {
  constructor(localeTranslations) {
    this.listeners = /* @__PURE__ */ new Set();
    this.defaultLocale = defaultOptions.defaultLocale;
    this.enableFallback = false;
    this.locale = defaultOptions.locale;
    this.cachedLocales = [];
    this.translations = {};
    for (const [locale, translation] of Object.entries(localeTranslations)) {
      this.cachedLocales = [...this.cachedLocales, locale];
      this.translations = {
        ...this.translations,
        ...this.flattenTranslation(translation, locale)
      };
    }
  }
  missingMessage(key) {
    return `[missing: "${this.locale}.${key}" translation]`;
  }
  flattenTranslation(translationObject, locale) {
    const result = {};
    const flatten = (currentTranslationObj, parentKey) => {
      for (const key of Object.keys(currentTranslationObj)) {
        const newKey = `${parentKey}.${key}`;
        const currentValue = currentTranslationObj[key];
        if (typeof currentValue === "object" && currentValue !== null) {
          flatten(currentValue, newKey);
        } else {
          result[newKey] = currentValue;
        }
      }
    };
    flatten(translationObject, locale);
    return result;
  }
  translateWithReplacements(translation, replacements = {}) {
    let translatedString = translation;
    for (const placeholder in replacements) {
      const replacementValue = replacements[placeholder];
      translatedString = translatedString.replace(
        `%{${placeholder}}`,
        replacementValue
      );
    }
    return translatedString;
  }
  t(key, replacements, options) {
    const translationKey = `${this.locale}.${key}`;
    const translation = this.translations[translationKey];
    if (!translation) {
      if (this.enableFallback) {
        const fallbackTranslationKey = `${this.defaultLocale}.${key}`;
        const fallbackTranslation = this.translations[fallbackTranslationKey];
        if (fallbackTranslation) {
          return this.translateWithReplacements(
            fallbackTranslation,
            replacements
          );
        }
      }
      if (options?.rawKeyIfTranslationMissing)
        return key;
      return this.missingMessage(key);
    }
    return this.translateWithReplacements(translation, replacements);
  }
  isLocaleCached(locale) {
    return this.cachedLocales.includes(locale);
  }
  updateLocale(locale) {
    this.locale = locale;
    this.notifyListeners();
  }
  setTranslations(locale, translations) {
    const cachedLocale = this.isLocaleCached(locale);
    if (!cachedLocale) {
      this.cachedLocales = [...this.cachedLocales, locale];
      this.translations = {
        ...this.translations,
        ...this.flattenTranslation(translations, locale)
      };
    }
    this.locale = locale;
    this.notifyListeners();
  }
  notifyListeners() {
    for (const listener of this.listeners) {
      listener();
    }
  }
  onChange(fn) {
    this.listeners.add(fn);
    return () => {
      this.listeners.delete(fn);
    };
  }
};

// src/locales/index.ts
var i18n = new I18n({
  en: JSON.parse(en_US_default),
  "en-US": JSON.parse(en_US_default)
});
i18n.defaultLocale = "en-US";
i18n.locale = "en-US";
i18n.enableFallback = true;
var fetchTranslations = async (locale) => {
  switch (locale) {
    case "ar":
    case "ar-AR":
      return (await import("./ar_AR-ZRPPM56D.js")).default;
    case "de":
    case "de-DE":
      return (await import("./de_DE-GYZFZXWH.js")).default;
    case "en":
    case "en-US":
      return (await import("./en_US-AV7YDYDW.js")).default;
    case "es":
    case "es-419":
      return (await import("./es_419-OGVOQEFZ.js")).default;
    case "fr":
    case "fr-FR":
      return (await import("./fr_FR-Q5QBQBX2.js")).default;
    case "hi":
    case "hi-IN":
      return (await import("./hi_IN-7I7LRHGW.js")).default;
    case "id":
    case "id-ID":
      return (await import("./id_ID-ZMGZ2JFV.js")).default;
    case "ja":
    case "ja-JP":
      return (await import("./ja_JP-NYBCHQTZ.js")).default;
    case "ko":
    case "ko-KR":
      return (await import("./ko_KR-67WE736M.js")).default;
    case "ms":
    case "ms-MY":
      return (await import("./ms_MY-65AJIBUS.js")).default;
    case "pt":
    case "pt-BR":
      return (await import("./pt_BR-DMJANC65.js")).default;
    case "ru":
    case "ru-RU":
      return (await import("./ru_RU-WER7RQ6A.js")).default;
    case "th":
    case "th-TH":
      return (await import("./th_TH-JOSHEZ6D.js")).default;
    case "tr":
    case "tr-TR":
      return (await import("./tr_TR-EAMG2YPO.js")).default;
    case "ua":
    case "uk-UA":
      return (await import("./uk_UA-GO2TRVWA.js")).default;
    case "vi":
    case "vi-VN":
      return (await import("./vi_VN-5HLLSOJA.js")).default;
    case "zh":
    case "zh-CN":
    case "zh-Hans":
      return (await import("./zh_CN-THPIFVWJ.js")).default;
    case "zh-HK":
      return (await import("./zh_HK-R7XP4TGF.js")).default;
    case "zh-Hant":
    case "zh-TW":
      return (await import("./zh_TW-F5LD752V.js")).default;
    default:
      return (await import("./en_US-AV7YDYDW.js")).default;
  }
};
async function setLocale(locale) {
  const isCached = i18n.isLocaleCached(locale);
  if (isCached) {
    i18n.updateLocale(locale);
    return;
  }
  const translations = await fetchTranslations(locale);
  i18n.setTranslations(locale, JSON.parse(translations));
}

// src/utils/locale.ts
var detectedBrowserLocale = () => {
  if (typeof window !== "undefined" && typeof navigator !== "undefined") {
    if (navigator.languages?.length) {
      return navigator.languages[0];
    }
    if (navigator.language) {
      return navigator.language;
    }
  }
};

// src/components/RainbowKitProvider/I18nContext.tsx
var I18nContext = createContext6({ i18n });
var I18nProvider = ({ children, locale }) => {
  const [updateCount, setUpdateCount] = useState4(0);
  const browserLocale = useMemo9(
    () => detectedBrowserLocale(),
    []
  );
  useEffect5(() => {
    const unsubscribe = i18n.onChange(() => {
      setUpdateCount((count) => count + 1);
    });
    return unsubscribe;
  }, []);
  useEffect5(() => {
    if (locale && locale !== i18n.locale) {
      setLocale(locale);
    } else if (!locale && browserLocale && browserLocale !== i18n.locale) {
      setLocale(browserLocale);
    }
  }, [locale, browserLocale]);
  const memoizedValue = useMemo9(() => {
    const t = (key, options) => i18n.t(key, options);
    return { t, i18n };
  }, [updateCount]);
  return /* @__PURE__ */ React12.createElement(I18nContext.Provider, { value: memoizedValue }, children);
};

// src/components/RainbowKitProvider/ModalSizeContext.tsx
import React14, { createContext as createContext8, useContext as useContext3 } from "react";

// src/hooks/useWindowSize.ts
import { useEffect as useEffect6, useState as useState5 } from "react";

// src/utils/debounce.ts
function debounce(fn, ms) {
  let timer;
  return () => {
    if (timer) {
      clearTimeout(timer);
    }
    timer = setTimeout(() => {
      timer = null;
      fn();
    }, ms);
  };
}

// src/hooks/useWindowSize.ts
var useWindowSize = () => {
  const [windowSize, setWindowSize] = useState5({
    height: void 0,
    width: void 0
  });
  useEffect6(() => {
    const handleResize = debounce(() => {
      setWindowSize({
        height: window.innerHeight,
        width: window.innerWidth
      });
    }, 500);
    window.addEventListener("resize", handleResize);
    handleResize();
    return () => window.removeEventListener("resize", handleResize);
  }, []);
  return windowSize;
};

// src/components/RainbowKitProvider/WalletButtonContext.tsx
import React13, { createContext as createContext7, useMemo as useMemo10, useState as useState6 } from "react";
var WalletButtonContext = createContext7({
  connector: null,
  setConnector: () => {
  }
});
function WalletButtonProvider({ children }) {
  const [connector, setConnector] = useState6(null);
  return /* @__PURE__ */ React13.createElement(
    WalletButtonContext.Provider,
    {
      value: useMemo10(
        () => ({
          connector,
          setConnector
        }),
        [connector]
      )
    },
    children
  );
}

// src/components/RainbowKitProvider/ModalSizeContext.tsx
var ModalSizeOptions = {
  COMPACT: "compact",
  WIDE: "wide"
};
var ModalSizeContext = createContext8(
  ModalSizeOptions.WIDE
);
function ModalSizeProvider({
  children,
  modalSize
}) {
  const { width } = useWindowSize();
  const isSmallScreen = width && width < largeScreenMinWidth;
  const { connector } = useContext3(WalletButtonContext);
  return /* @__PURE__ */ React14.createElement(
    ModalSizeContext.Provider,
    {
      value: isSmallScreen || connector ? ModalSizeOptions.COMPACT : modalSize
    },
    children
  );
}

// src/components/RainbowKitProvider/ShowBalanceContext.tsx
import React15, {
  createContext as createContext9,
  useContext as useContext4,
  useState as useState7
} from "react";
var ShowBalanceContext = createContext9({
  showBalance: void 0,
  setShowBalance: () => {
  }
});
function ShowBalanceProvider({ children }) {
  const [showBalance, setShowBalance] = useState7();
  return /* @__PURE__ */ React15.createElement(ShowBalanceContext.Provider, { value: { showBalance, setShowBalance } }, children);
}
var useShowBalance = () => useContext4(ShowBalanceContext);

// src/components/RainbowKitProvider/ShowRecentTransactionsContext.ts
import { createContext as createContext10 } from "react";
var ShowRecentTransactionsContext = createContext10(false);

// src/components/RainbowKitProvider/useFingerprint.ts
import { useCallback, useEffect as useEffect7 } from "react";
var storageKey2 = "rk-version";
function setRainbowKitVersion({ version }) {
  localStorage.setItem(storageKey2, version);
}
function useFingerprint() {
  const fingerprint = useCallback(() => {
    setRainbowKitVersion({ version: "0.0.45" });
  }, []);
  useEffect7(() => {
    fingerprint();
  }, [fingerprint]);
}

// src/components/RainbowKitProvider/usePreloadImages.ts
import { useCallback as useCallback3, useEffect as useEffect8 } from "react";

// src/components/Icons/Assets.tsx
import React16 from "react";
var src = async () => (await import("./assets-NU2OP443.js")).default;
var preloadAssetsIcon = () => loadImages(src);
var AssetsIcon = () => /* @__PURE__ */ React16.createElement(
  AsyncImage,
  {
    background: "#d0d5de",
    borderRadius: "10",
    height: "48",
    src,
    width: "48"
  }
);

// src/components/Icons/Login.tsx
import React17 from "react";
var src2 = async () => (await import("./login-CWDTIDNK.js")).default;
var preloadLoginIcon = () => loadImages(src2);
var LoginIcon = () => /* @__PURE__ */ React17.createElement(
  AsyncImage,
  {
    background: "#d0d5de",
    borderRadius: "10",
    height: "48",
    src: src2,
    width: "48"
  }
);

// src/components/SignIn/SignIn.tsx
import React22, { useCallback as useCallback2, useContext as useContext5, useRef } from "react";
import { UserRejectedRequestError } from "viem";
import { useAccount as useAccount7, useSignMessage } from "wagmi";

// src/components/Button/ActionButton.tsx
import React19 from "react";

// src/components/Text/Text.tsx
import React18 from "react";
var Text = React18.forwardRef(
  ({
    as = "div",
    children,
    className,
    color,
    display,
    font = "body",
    id,
    size = "16",
    style,
    tabIndex,
    textAlign = "inherit",
    weight = "regular",
    testId
  }, ref) => {
    return /* @__PURE__ */ React18.createElement(
      Box,
      {
        as,
        className,
        color,
        display,
        fontFamily: font,
        fontSize: size,
        fontWeight: weight,
        id,
        ref,
        style,
        tabIndex,
        textAlign,
        testId
      },
      children
    );
  }
);
Text.displayName = "Text";

// src/components/Button/ActionButton.tsx
var sizeVariants = {
  large: {
    fontSize: "16",
    paddingX: "24",
    paddingY: "10"
  },
  medium: {
    fontSize: "12",
    // height: '28',
    paddingX: "12",
    paddingY: "6"
  },
  small: {
    fontSize: "12",
    paddingX: "10",
    paddingY: "5"
  }
};
function ActionButton({
  disabled = false,
  href,
  label,
  onClick,
  rel = "noreferrer noopener",
  size = "medium",
  target = "_blank",
  testId,
  type = "primary",
  darkLabel = false
}) {
  const isPrimary = type === "primary";
  const isNotLarge = size !== "large";
  const mobile = isMobile();
  const background = !disabled ? isPrimary ? "accentColor" : isNotLarge ? "actionButtonSecondaryBackground" : null : "actionButtonSecondaryBackground";
  const { fontSize, height, paddingX, paddingY } = sizeVariants[size];
  const hasBorder = false;
  return /* @__PURE__ */ React19.createElement(
    Box,
    {
      ...href ? !disabled ? { as: "a", href, rel, target } : {} : { as: "button", type: "button" },
      onClick: !disabled ? onClick : void 0,
      ...hasBorder ? {
        borderColor: mobile && !isNotLarge && !isPrimary ? "actionButtonBorderMobile" : "actionButtonBorder",
        borderStyle: "solid",
        borderWidth: "1"
      } : {},
      borderRadius: "actionButton",
      className: !disabled && touchableStyles({ active: "shrinkSm", hover: "grow" }),
      display: "block",
      paddingX,
      paddingY,
      style: { willChange: "transform" },
      testId,
      textAlign: "center",
      transition: "transform",
      ...background ? { background } : {},
      ...height ? { height } : {}
    },
    /* @__PURE__ */ React19.createElement(
      Text,
      {
        color: !disabled ? isPrimary ? "accentColorForeground" : "accentColor" : "modalTextSecondary",
        size: fontSize,
        weight: "bold"
      },
      label
    )
  );
}

// src/components/CloseButton/CloseButton.tsx
import React21 from "react";

// src/components/Icons/Close.tsx
import React20 from "react";
var CloseIcon = () => {
  return isMobile() ? /* @__PURE__ */ React20.createElement(
    "svg",
    {
      "aria-hidden": true,
      fill: "none",
      height: "11.5",
      viewBox: "0 0 11.5 11.5",
      width: "11.5",
      xmlns: "http://www.w3.org/2000/svg"
    },
    /* @__PURE__ */ React20.createElement("title", null, "Close"),
    /* @__PURE__ */ React20.createElement(
      "path",
      {
        d: "M2.13388 0.366117C1.64573 -0.122039 0.854272 -0.122039 0.366117 0.366117C-0.122039 0.854272 -0.122039 1.64573 0.366117 2.13388L3.98223 5.75L0.366117 9.36612C-0.122039 9.85427 -0.122039 10.6457 0.366117 11.1339C0.854272 11.622 1.64573 11.622 2.13388 11.1339L5.75 7.51777L9.36612 11.1339C9.85427 11.622 10.6457 11.622 11.1339 11.1339C11.622 10.6457 11.622 9.85427 11.1339 9.36612L7.51777 5.75L11.1339 2.13388C11.622 1.64573 11.622 0.854272 11.1339 0.366117C10.6457 -0.122039 9.85427 -0.122039 9.36612 0.366117L5.75 3.98223L2.13388 0.366117Z",
        fill: "currentColor"
      }
    )
  ) : /* @__PURE__ */ React20.createElement(
    "svg",
    {
      "aria-hidden": true,
      fill: "none",
      height: "10",
      viewBox: "0 0 10 10",
      width: "10",
      xmlns: "http://www.w3.org/2000/svg"
    },
    /* @__PURE__ */ React20.createElement("title", null, "Close"),
    /* @__PURE__ */ React20.createElement(
      "path",
      {
        d: "M1.70711 0.292893C1.31658 -0.0976311 0.683417 -0.0976311 0.292893 0.292893C-0.0976311 0.683417 -0.0976311 1.31658 0.292893 1.70711L3.58579 5L0.292893 8.29289C-0.0976311 8.68342 -0.0976311 9.31658 0.292893 9.70711C0.683417 10.0976 1.31658 10.0976 1.70711 9.70711L5 6.41421L8.29289 9.70711C8.68342 10.0976 9.31658 10.0976 9.70711 9.70711C10.0976 9.31658 10.0976 8.68342 9.70711 8.29289L6.41421 5L9.70711 1.70711C10.0976 1.31658 10.0976 0.683417 9.70711 0.292893C9.31658 -0.0976311 8.68342 -0.0976311 8.29289 0.292893L5 3.58579L1.70711 0.292893Z",
        fill: "currentColor"
      }
    )
  );
};

// src/components/CloseButton/CloseButton.tsx
var CloseButton = ({
  "aria-label": ariaLabel = "Close",
  onClose
}) => {
  const mobile = isMobile();
  return /* @__PURE__ */ React21.createElement(
    Box,
    {
      alignItems: "center",
      "aria-label": ariaLabel,
      as: "button",
      background: "closeButtonBackground",
      borderColor: "actionButtonBorder",
      borderRadius: "full",
      borderStyle: "solid",
      borderWidth: mobile ? "0" : "1",
      className: touchableStyles({ active: "shrinkSm", hover: "growLg" }),
      color: "closeButton",
      display: "flex",
      height: mobile ? "30" : "28",
      justifyContent: "center",
      onClick: onClose,
      style: { willChange: "transform" },
      transition: "default",
      type: "button",
      width: mobile ? "30" : "28"
    },
    /* @__PURE__ */ React21.createElement(CloseIcon, null)
  );
};

// src/components/SignIn/SignIn.tsx
var signInIcon = async () => (await import("./sign-A7IJEUT5.js")).default;
function SignIn({
  onClose,
  onCloseModal
}) {
  const { i18n: i18n2 } = useContext5(I18nContext);
  const [{ status, ...state2 }, setState] = React22.useState({ status: "idle" });
  const authAdapter = useAuthenticationAdapter();
  const getNonce = useCallback2(async () => {
    try {
      const nonce = await authAdapter.getNonce();
      setState((x) => ({ ...x, nonce }));
    } catch {
      setState((x) => ({
        ...x,
        errorMessage: i18n2.t("sign_in.message.preparing_error"),
        status: "idle"
      }));
    }
  }, [authAdapter, i18n2.t]);
  const onceRef = useRef(false);
  React22.useEffect(() => {
    if (onceRef.current)
      return;
    onceRef.current = true;
    getNonce();
  }, [getNonce]);
  const mobile = isMobile();
  const { address, chain: activeChain } = useAccount7();
  const { signMessageAsync } = useSignMessage();
  const signIn = async () => {
    try {
      const chainId = activeChain?.id;
      const { nonce } = state2;
      if (!address || !chainId || !nonce) {
        return;
      }
      setState((x) => ({
        ...x,
        errorMessage: void 0,
        status: "signing"
      }));
      const message = authAdapter.createMessage({ address, chainId, nonce });
      let signature;
      try {
        signature = await signMessageAsync({
          message
        });
      } catch (error) {
        if (error instanceof UserRejectedRequestError) {
          return setState((x) => ({
            ...x,
            status: "idle"
          }));
        }
        return setState((x) => ({
          ...x,
          errorMessage: i18n2.t("sign_in.signature.signing_error"),
          status: "idle"
        }));
      }
      setState((x) => ({ ...x, status: "verifying" }));
      try {
        const verified = await authAdapter.verify({ message, signature });
        if (verified) {
          onCloseModal();
          return;
        }
        throw new Error();
      } catch {
        return setState((x) => ({
          ...x,
          errorMessage: i18n2.t("sign_in.signature.verifying_error"),
          status: "idle"
        }));
      }
    } catch {
      setState({
        errorMessage: i18n2.t("sign_in.signature.oops_error"),
        status: "idle"
      });
    }
  };
  return /* @__PURE__ */ React22.createElement(Box, { position: "relative" }, /* @__PURE__ */ React22.createElement(
    Box,
    {
      display: "flex",
      paddingRight: "16",
      paddingTop: "16",
      position: "absolute",
      right: "0"
    },
    /* @__PURE__ */ React22.createElement(CloseButton, { onClose })
  ), /* @__PURE__ */ React22.createElement(
    Box,
    {
      alignItems: "center",
      display: "flex",
      flexDirection: "column",
      gap: mobile ? "32" : "24",
      padding: "24",
      paddingX: "18",
      style: { paddingTop: mobile ? "60px" : "36px" }
    },
    /* @__PURE__ */ React22.createElement(
      Box,
      {
        alignItems: "center",
        display: "flex",
        flexDirection: "column",
        gap: mobile ? "6" : "4",
        style: { maxWidth: mobile ? 320 : 280 }
      },
      /* @__PURE__ */ React22.createElement(
        Box,
        {
          alignItems: "center",
          display: "flex",
          flexDirection: "column",
          gap: mobile ? "32" : "16"
        },
        /* @__PURE__ */ React22.createElement(AsyncImage, { height: 40, src: signInIcon, width: 40 }),
        /* @__PURE__ */ React22.createElement(
          Text,
          {
            color: "modalText",
            size: mobile ? "20" : "18",
            textAlign: "center",
            weight: "heavy"
          },
          i18n2.t("sign_in.label")
        )
      ),
      /* @__PURE__ */ React22.createElement(
        Box,
        {
          alignItems: "center",
          display: "flex",
          flexDirection: "column",
          gap: mobile ? "16" : "12"
        },
        /* @__PURE__ */ React22.createElement(
          Text,
          {
            color: "modalTextSecondary",
            size: mobile ? "16" : "14",
            textAlign: "center"
          },
          i18n2.t("sign_in.description")
        ),
        status === "idle" && state2.errorMessage ? /* @__PURE__ */ React22.createElement(
          Text,
          {
            color: "error",
            size: mobile ? "16" : "14",
            textAlign: "center",
            weight: "bold"
          },
          state2.errorMessage
        ) : null
      )
    ),
    /* @__PURE__ */ React22.createElement(
      Box,
      {
        alignItems: !mobile ? "center" : void 0,
        display: "flex",
        flexDirection: "column",
        gap: "8",
        width: "full"
      },
      /* @__PURE__ */ React22.createElement(
        ActionButton,
        {
          disabled: !state2.nonce || status === "signing" || status === "verifying",
          label: !state2.nonce ? i18n2.t("sign_in.message.preparing") : status === "signing" ? i18n2.t("sign_in.signature.waiting") : status === "verifying" ? i18n2.t("sign_in.signature.verifying") : i18n2.t("sign_in.message.send"),
          onClick: signIn,
          size: mobile ? "large" : "medium",
          testId: "auth-message-button"
        }
      ),
      mobile ? /* @__PURE__ */ React22.createElement(
        ActionButton,
        {
          label: "Cancel",
          onClick: onClose,
          size: "large",
          type: "secondary"
        }
      ) : /* @__PURE__ */ React22.createElement(
        Box,
        {
          as: "button",
          borderRadius: "full",
          className: touchableStyles({ active: "shrink", hover: "grow" }),
          display: "block",
          onClick: onClose,
          paddingX: "10",
          paddingY: "5",
          rel: "noreferrer",
          style: { willChange: "transform" },
          target: "_blank",
          transition: "default"
        },
        /* @__PURE__ */ React22.createElement(
          Text,
          {
            color: "closeButton",
            size: mobile ? "16" : "14",
            weight: "bold"
          },
          i18n2.t("sign_in.message.cancel")
        )
      )
    )
  ));
}

// src/components/RainbowKitProvider/usePreloadImages.ts
function usePreloadImages() {
  const rainbowKitChains = useRainbowKitChains();
  const walletConnectors = useWalletConnectors();
  const isUnauthenticated = useAuthenticationStatus() === "unauthenticated";
  const preloadImages = useCallback3(() => {
    loadImages(
      ...walletConnectors.map((wallet) => wallet.iconUrl),
      ...rainbowKitChains.map((chain) => chain.iconUrl).filter(isNotNullish)
    );
    if (!isMobile()) {
      preloadAssetsIcon();
      preloadLoginIcon();
    }
    if (isUnauthenticated) {
      loadImages(signInIcon);
    }
  }, [walletConnectors, rainbowKitChains, isUnauthenticated]);
  useEffect8(() => {
    preloadImages();
  }, [preloadImages]);
}

// src/components/RainbowKitProvider/walletConnectDeepLink.ts
var storageKey3 = "WALLETCONNECT_DEEPLINK_CHOICE";
function setWalletConnectDeepLink({
  mobileUri,
  name
}) {
  localStorage.setItem(
    storageKey3,
    JSON.stringify({
      href: mobileUri.split("?")[0],
      name
    })
  );
}
function clearWalletConnectDeepLink() {
  localStorage.removeItem(storageKey3);
}

// src/components/RainbowKitProvider/RainbowKitProvider.tsx
import styleInject from "style-inject";
var injectCss = `@import url("https://fonts.googleapis.com/css2?family=Poppins:ital,wght@0,100;0,200;0,300;0,400;0,500;0,600;0,700;0,800;0,900;1,100;1,200;1,300;1,400;1,500;1,600;1,700;1,800;1,900&display=swap");@import url("https://at.alicdn.com/t/c/font_4714049_dtd2bpf3hkm.css");`;
var ThemeIdContext = createContext11(void 0);
var attr = "data-rk";
var createThemeRootProps = (id) => ({ [attr]: id || "" });
var createThemeRootSelector = (id) => {
  if (id && !/^[a-zA-Z0-9_]+$/.test(id)) {
    throw new Error(`Invalid ID: ${id}`);
  }
  return id ? `[${attr}="${id}"]` : `[${attr}]`;
};
var useThemeRootProps = () => {
  const id = useContext6(ThemeIdContext);
  return createThemeRootProps(id);
};
var ThemeTypeContext = React23.createContext(lightTheme());
var CustomConfigContext = React23.createContext({});
function EvmKitThemeProvider({
  theme: themeType,
  children,
  id
}) {
  const selector = createThemeRootSelector(id);
  const [modalTheme, setModalTheme] = useState8(themeType);
  const theme = useMemo11(() => {
    if ("lightMode" in themeType) {
      const { mode: mode2, ...sourceLightTheme } = themeType.lightMode;
      const { mode: dark, ...sourceDarkTheme } = themeType.darkMode || themeType.lightMode;
      return {
        lightMode: sourceLightTheme,
        darkMode: sourceDarkTheme
      };
    }
    const { mode, ...sourceTheme } = themeType;
    return { ...sourceTheme };
  }, [themeType]);
  useEffect9(() => {
    if (themeType.mode === "dark") {
      document.documentElement.classList.add("uikit-dark");
      document.documentElement.classList.add("tm-dark");
      return;
    } else if (themeType.mode === "light") {
      document.documentElement.classList.remove("uikit-dark");
      document.documentElement.classList.remove("tm-dark");
      return;
    }
    const darkModeQuery = window.matchMedia("(prefers-color-scheme: dark)");
    const handleColorSchemeChange = (event) => {
      if (event.matches) {
        setModalTheme(themeType.darkMode);
        document.documentElement.classList.add("uikit-dark");
        document.documentElement.classList.add("tm-dark");
      } else {
        setModalTheme(themeType.lightMode);
        document.documentElement.classList.remove("uikit-dark");
        document.documentElement.classList.remove("tm-dark");
      }
    };
    handleColorSchemeChange(darkModeQuery);
    if ("lightMode" in themeType || "darkMode" in themeType) {
      darkModeQuery.addEventListener("change", handleColorSchemeChange);
    }
    return () => {
      darkModeQuery.removeEventListener("change", handleColorSchemeChange);
    };
  }, [themeType]);
  const themeRootProps = useThemeRootProps();
  return /* @__PURE__ */ React23.createElement(ThemeTypeContext.Provider, { value: modalTheme }, /* @__PURE__ */ React23.createElement(ThemeIdContext.Provider, { value: id }, theme ? /* @__PURE__ */ React23.createElement("div", { ...createThemeRootProps(id) }, /* @__PURE__ */ React23.createElement(
    "style",
    {
      dangerouslySetInnerHTML: {
        // Selectors are sanitized to only contain alphanumeric
        // and underscore characters. Theme values generated by
        // cssStringFromTheme are sanitized, removing
        // characters that terminate values / HTML tags.
        __html: [
          `${selector}{${cssStringFromTheme("lightMode" in theme ? theme.lightMode : theme)}}`,
          "darkMode" in theme ? `@media(prefers-color-scheme:dark){${selector}{${cssStringFromTheme(theme.darkMode, {
            extends: theme.lightMode
          })}}}` : null
        ].join("")
      }
    }
  ), /* @__PURE__ */ React23.createElement(Box, { ...themeRootProps }, children)) : /* @__PURE__ */ React23.createElement(Box, { ...themeRootProps }, children)));
}
function RainbowKitProvider({
  appInfo,
  avatar,
  children,
  coolMode = false,
  id,
  initialChain,
  // locale,
  modalSize = ModalSizeOptions.WIDE,
  showRecentTransactions = false,
  theme = lightTheme(),
  // socialsEnabled = true,
  _noOtherWallets = false,
  socialsFirst = true
}) {
  usePreloadImages();
  useFingerprint();
  useAccountEffect2({ onDisconnect: clearWalletConnectDeepLink });
  const appContext = {
    ...defaultAppInfo,
    ...appInfo
  };
  const avatarContext = avatar ?? defaultAvatar;
  useEffect9(() => {
    styleInject(injectCss, { insertAt: "top" });
  }, []);
  return /* @__PURE__ */ React23.createElement(RainbowKitChainProvider, { initialChain }, /* @__PURE__ */ React23.createElement(WalletButtonProvider, null, /* @__PURE__ */ React23.createElement(I18nProvider, { locale: "en-US" }, /* @__PURE__ */ React23.createElement(CoolModeContext.Provider, { value: coolMode }, /* @__PURE__ */ React23.createElement(ModalSizeProvider, { modalSize }, /* @__PURE__ */ React23.createElement(ShowRecentTransactionsContext.Provider, { value: showRecentTransactions }, /* @__PURE__ */ React23.createElement(TransactionStoreProvider, null, /* @__PURE__ */ React23.createElement(AvatarContext.Provider, { value: avatarContext }, /* @__PURE__ */ React23.createElement(AppContext.Provider, { value: appContext }, /* @__PURE__ */ React23.createElement(EvmKitThemeProvider, { theme, id }, /* @__PURE__ */ React23.createElement(CustomConfigContext.Provider, { value: { _noOtherWallets, socialsFirst } }, /* @__PURE__ */ React23.createElement(ShowBalanceProvider, null, /* @__PURE__ */ React23.createElement(ModalProvider, null, /* @__PURE__ */ React23.createElement(React23.Fragment, null, /* @__PURE__ */ React23.createElement("span", { style: { position: "absolute", zIndex: -100 }, id: "font-load-dummy" }, /* @__PURE__ */ React23.createElement(
    "span",
    {
      style: {
        fontFamily: "SwitzerBold",
        visibility: "hidden"
      }
    }
  ), /* @__PURE__ */ React23.createElement(
    "span",
    {
      style: {
        fontFamily: "SwitzerMedium",
        visibility: "hidden"
      }
    }
  )), children))))))))))))));
}

// src/components/Dialog/Dialog.css.ts
var content = "agosh45 _135hevfa _135hevf15 _135hevf8r";
var overlay = "agosh43 _135hevf9h _135hevfb3 _135hevfa _135hevf2q _135hevf8q";

// src/components/Dialog/FocusTrap.tsx
import React24, { useCallback as useCallback4, useEffect as useEffect10, useRef as useRef2 } from "react";
var moveFocusWithin = (element2, position) => {
  const focusableElements = element2.querySelectorAll(
    "button:not(:disabled), a[href]"
  );
  if (focusableElements.length === 0)
    return;
  focusableElements[position === "end" ? focusableElements.length - 1 : 0].focus();
};
function FocusTrap(props) {
  const contentRef = useRef2(null);
  useEffect10(() => {
    const previouslyActiveElement = document.activeElement;
    return () => {
      previouslyActiveElement.focus?.();
    };
  }, []);
  useEffect10(() => {
    if (contentRef.current) {
      const elementToFocus = contentRef.current.querySelector("[data-auto-focus]");
      if (elementToFocus) {
        elementToFocus.focus();
      } else {
        contentRef.current.focus();
      }
    }
  }, []);
  return /* @__PURE__ */ React24.createElement(React24.Fragment, null, /* @__PURE__ */ React24.createElement(
    "div",
    {
      onFocus: useCallback4(
        () => contentRef.current && moveFocusWithin(contentRef.current, "end"),
        []
      ),
      tabIndex: 0
    }
  ), /* @__PURE__ */ React24.createElement(
    "div",
    {
      ref: contentRef,
      style: { outline: "none" },
      tabIndex: -1,
      ...props
    }
  ), /* @__PURE__ */ React24.createElement(
    "div",
    {
      onFocus: useCallback4(
        () => contentRef.current && moveFocusWithin(contentRef.current, "start"),
        []
      ),
      tabIndex: 0
    }
  ));
}

// src/components/Dialog/Dialog.tsx
var stopPropagation = (event) => event.stopPropagation();
function Dialog({ children, onClose, open, titleId }) {
  useEffect11(() => {
    const handleEscape = (event) => open && event.key === "Escape" && onClose();
    document.addEventListener("keydown", handleEscape);
    return () => document.removeEventListener("keydown", handleEscape);
  }, [open, onClose]);
  const [bodyScrollable, setBodyScrollable] = useState9(true);
  useEffect11(() => {
    setBodyScrollable(
      getComputedStyle(window.document.body).overflow !== "hidden"
    );
  }, []);
  const handleBackdropClick = useCallback5(() => onClose(), [onClose]);
  const themeRootProps = useThemeRootProps();
  const mobile = isMobile();
  return /* @__PURE__ */ React25.createElement(React25.Fragment, null, open ? createPortal(
    /* @__PURE__ */ React25.createElement(RemoveScroll, { enabled: bodyScrollable }, /* @__PURE__ */ React25.createElement(Box, { ...themeRootProps }, /* @__PURE__ */ React25.createElement(
      Box,
      {
        ...themeRootProps,
        alignItems: mobile ? "flex-end" : "center",
        "aria-labelledby": titleId,
        "aria-modal": true,
        className: overlay,
        onClick: handleBackdropClick,
        position: "fixed",
        role: "dialog"
      },
      /* @__PURE__ */ React25.createElement(
        FocusTrap,
        {
          className: content,
          onClick: stopPropagation,
          role: "document"
        },
        children
      )
    ))),
    document.body
  ) : null);
}

// src/components/Dialog/DialogContent.tsx
import React26, { useContext as useContext7 } from "react";

// src/components/Dialog/DialogContent.css.ts
var bottomSheetOverrides = "_1p4yzkv7";
var dialogContent = "_1p4yzkv1 _135hevfb6 _135hevfdr _135hevfp _135hevft _135hevfv _135hevfel _135hevfa _135hevf15 _135hevf6c _135hevf8r";
var dialogContentCompactMode = "_1p4yzkv4 _1p4yzkv1 _135hevfb6 _135hevfdr _135hevfp _135hevft _135hevfv _135hevfel _135hevfa _135hevf15 _135hevf6c _135hevf8r";
var dialogContentMobile = "_1p4yzkv6 _135hevfq";
var dialogContentWideDesktop = "_1p4yzkv3 _1p4yzkv1 _135hevfb6 _135hevfdr _135hevfp _135hevft _135hevfv _135hevfel _135hevfa _135hevf15 _135hevf6c _135hevf8r";
var dialogContentWideMobile = "_1p4yzkv2 _1p4yzkv1 _135hevfb6 _135hevfdr _135hevfp _135hevft _135hevfv _135hevfel _135hevfa _135hevf15 _135hevf6c _135hevf8r";

// src/components/Dialog/DialogContent.tsx
function DialogContent({
  bottomSheetOnMobile = false,
  children,
  marginTop,
  padding = "16",
  paddingBottom,
  wide = false
}) {
  const mobile = isMobile();
  const modalSize = useContext7(ModalSizeContext);
  const compactModeEnabled = modalSize === ModalSizeOptions.COMPACT;
  return /* @__PURE__ */ React26.createElement(Box, { marginTop }, /* @__PURE__ */ React26.createElement(
    Box,
    {
      className: [
        wide ? mobile ? dialogContentWideMobile : compactModeEnabled ? dialogContentCompactMode : dialogContentWideDesktop : dialogContent,
        mobile ? dialogContentMobile : null,
        mobile && bottomSheetOnMobile ? bottomSheetOverrides : null
      ].join(" ")
    },
    /* @__PURE__ */ React26.createElement(Box, { padding, paddingBottom: paddingBottom ?? padding }, children)
  ));
}

// src/components/ConnectModal/TomoConnectModal.tsx
import {
  ConnectMain,
  ConnectWalletMain,
  HeaderBackIcon,
  HeaderCloseIcon,
  Popup,
  PopupHeader
} from "@tomo-inc/uikit-lite";
import React36, { useContext as useContext10, useEffect as useEffect13, useMemo as useMemo13, useRef as useRef3, useState as useState10 } from "react";

// src/wallets/latestWalletId.ts
var storageKey4 = "rk-latest-id";
function getLatestWalletId() {
  return typeof localStorage !== "undefined" ? localStorage.getItem(storageKey4) || "" : "";
}
function addLatestWalletId(walletId) {
  localStorage.setItem(storageKey4, walletId);
}
function clearLatestWalletId() {
  localStorage.removeItem(storageKey4);
}

// src/components/ConnectOptions/ConnectDetails.tsx
import React32, { useContext as useContext8, useEffect as useEffect12 } from "react";

// src/utils/platforms.ts
import { UAParser } from "ua-parser-js";
var ua = UAParser();
var { os } = ua;
function isWindows() {
  return os.name === "Windows";
}
function isMacOS() {
  return os.name === "Mac OS";
}
function isLinux() {
  return ["Ubuntu", "Mint", "Fedora", "Debian", "Arch", "Linux"].includes(
    os.name
  );
}
function getPlatform() {
  if (isWindows())
    return "Windows" /* Windows */;
  if (isMacOS())
    return "macOS" /* MacOS */;
  if (isLinux())
    return "Linux" /* Linux */;
  return "Desktop" /* Desktop */;
}

// src/components/Icons/Connect.tsx
import React27 from "react";
var src3 = async () => (await import("./connect-MR6XDLIE.js")).default;
var preloadConnectIcon = () => loadImages(src3);
var ConnectIcon = () => /* @__PURE__ */ React27.createElement(
  AsyncImage,
  {
    background: "#515a70",
    borderColor: "generalBorder",
    borderRadius: "10",
    height: "48",
    src: src3,
    width: "48"
  }
);

// src/components/Icons/Create.tsx
import React28 from "react";
var src4 = async () => (await import("./create-X4WFHLCW.js")).default;
var preloadCreateIcon = () => loadImages(src4);
var CreateIcon = () => /* @__PURE__ */ React28.createElement(
  AsyncImage,
  {
    background: "#e3a5e8",
    borderColor: "generalBorder",
    borderRadius: "10",
    height: "48",
    src: src4,
    width: "48"
  }
);

// src/components/Icons/Refresh.tsx
import React29 from "react";
var src5 = async () => (await import("./refresh-HJGJRASX.js")).default;
var preloadRefreshIcon = () => loadImages(src5);
var RefreshIcon = () => /* @__PURE__ */ React29.createElement(
  AsyncImage,
  {
    background: "#515a70",
    borderColor: "generalBorder",
    borderRadius: "10",
    height: "48",
    src: src5,
    width: "48"
  }
);

// src/components/Icons/Scan.tsx
import React30 from "react";
var src6 = async () => (await import("./scan-DEOT2M37.js")).default;
var preloadScanIcon = () => loadImages(src6);
var ScanIcon = () => /* @__PURE__ */ React30.createElement(
  AsyncImage,
  {
    background: "#515a70",
    borderColor: "generalBorder",
    borderRadius: "10",
    height: "48",
    src: src6,
    width: "48"
  }
);

// src/components/QRCode/QRCode.tsx
import QRCodeUtil from "qrcode";
import React31, { useMemo as useMemo12 } from "react";

// src/components/ConnectOptions/DesktopOptions.css.ts
var QRCodeBackgroundClassName = "yz4m840";
var ScrollClassName = "yz4m842 _135hevf7a _135hevf7v";
var sidebar = "yz4m843";
var sidebarCompactMode = "yz4m844";

// src/components/QRCode/QRCode.tsx
var generateMatrix = (value, errorCorrectionLevel) => {
  const arr = Array.prototype.slice.call(
    QRCodeUtil.create(value, { errorCorrectionLevel }).modules.data,
    0
  );
  const sqrt = Math.sqrt(arr.length);
  return arr.reduce(
    (rows, key, index) => (index % sqrt === 0 ? rows.push([key]) : rows[rows.length - 1].push(key)) && rows,
    []
  );
};
function QRCode({
  ecl = "M",
  logoBackground,
  logoMargin = 10,
  logoSize = 50,
  logoUrl: logoUrl2,
  size: sizeProp = 200,
  uri
}) {
  const padding = "20";
  const size = sizeProp - Number.parseInt(padding, 10) * 2;
  const dots = useMemo12(() => {
    const dots2 = [];
    const matrix = generateMatrix(uri, ecl);
    const cellSize = size / matrix.length;
    const qrList = [
      { x: 0, y: 0 },
      { x: 1, y: 0 },
      { x: 0, y: 1 }
    ];
    qrList.forEach(({ x, y }) => {
      const x1 = (matrix.length - 7) * cellSize * x;
      const y1 = (matrix.length - 7) * cellSize * y;
      for (let i = 0; i < 3; i++) {
        dots2.push(
          /* @__PURE__ */ React31.createElement(
            "rect",
            {
              fill: i % 2 !== 0 ? "white" : "black",
              height: cellSize * (7 - i * 2),
              key: `${i}-${x}-${y}`,
              rx: (i - 2) * -5 + (i === 0 ? 2 : 0),
              ry: (i - 2) * -5 + (i === 0 ? 2 : 0),
              width: cellSize * (7 - i * 2),
              x: x1 + cellSize * i,
              y: y1 + cellSize * i
            }
          )
        );
      }
    });
    const clearArenaSize = Math.floor((logoSize + 25) / cellSize);
    const matrixMiddleStart = matrix.length / 2 - clearArenaSize / 2;
    const matrixMiddleEnd = matrix.length / 2 + clearArenaSize / 2 - 1;
    matrix.forEach((row, i) => {
      row.forEach((_, j) => {
        if (matrix[i][j]) {
          if (!(i < 7 && j < 7 || i > matrix.length - 8 && j < 7 || i < 7 && j > matrix.length - 8)) {
            if (!(i > matrixMiddleStart && i < matrixMiddleEnd && j > matrixMiddleStart && j < matrixMiddleEnd)) {
              dots2.push(
                /* @__PURE__ */ React31.createElement(
                  "circle",
                  {
                    cx: i * cellSize + cellSize / 2,
                    cy: j * cellSize + cellSize / 2,
                    fill: "black",
                    key: `circle-${i}-${j}`,
                    r: cellSize / 3
                  }
                )
              );
            }
          }
        }
      });
    });
    return dots2;
  }, [ecl, logoSize, size, uri]);
  const logoPosition = size / 2 - logoSize / 2;
  const logoWrapperSize = logoSize + logoMargin * 2;
  return /* @__PURE__ */ React31.createElement(
    Box,
    {
      borderColor: "generalBorder",
      borderRadius: "menuButton",
      borderStyle: "solid",
      borderWidth: "1",
      className: QRCodeBackgroundClassName,
      padding,
      width: "max"
    },
    /* @__PURE__ */ React31.createElement(
      Box,
      {
        style: {
          height: size,
          userSelect: "none",
          width: size
        },
        userSelect: "none"
      },
      /* @__PURE__ */ React31.createElement(
        Box,
        {
          display: "flex",
          justifyContent: "center",
          position: "relative",
          style: {
            height: 0,
            top: logoPosition,
            width: size
          },
          width: "full"
        },
        /* @__PURE__ */ React31.createElement(
          AsyncImage,
          {
            background: logoBackground,
            borderColor: { custom: "rgba(0, 0, 0, 0.06)" },
            borderRadius: "13",
            height: logoSize,
            src: logoUrl2,
            width: logoSize
          }
        )
      ),
      /* @__PURE__ */ React31.createElement("svg", { height: size, style: { all: "revert" }, width: size }, /* @__PURE__ */ React31.createElement("title", null, "QR Code"), /* @__PURE__ */ React31.createElement("defs", null, /* @__PURE__ */ React31.createElement("clipPath", { id: "clip-wrapper" }, /* @__PURE__ */ React31.createElement("rect", { height: logoWrapperSize, width: logoWrapperSize })), /* @__PURE__ */ React31.createElement("clipPath", { id: "clip-logo" }, /* @__PURE__ */ React31.createElement("rect", { height: logoSize, width: logoSize }))), /* @__PURE__ */ React31.createElement("rect", { fill: "transparent", height: size, width: size }), dots)
    )
  );
}

// src/components/ConnectOptions/ConnectDetails.tsx
var getBrowserSrc = async () => {
  const browser = getBrowser();
  switch (browser) {
    case "Arc" /* Arc */:
      return (await import("./Arc-R3PUWRPJ.js")).default;
    case "Brave" /* Brave */:
      return (await import("./Brave-24BM36UM.js")).default;
    case "Chrome" /* Chrome */:
      return (await import("./Chrome-TLI42HDP.js")).default;
    case "Edge" /* Edge */:
      return (await import("./Edge-AZ34LAFM.js")).default;
    case "Firefox" /* Firefox */:
      return (await import("./Firefox-ZDK7RHKK.js")).default;
    case "Opera" /* Opera */:
      return (await import("./Opera-BKMCKUXC.js")).default;
    case "Safari" /* Safari */:
      return (await import("./Safari-PXQIVS6N.js")).default;
    default:
      return (await import("./Browser-4R4QKTV2.js")).default;
  }
};
var preloadBrowserIcon = () => loadImages(getBrowserSrc);
var getPlatformSrc = async () => {
  const platform = getPlatform();
  switch (platform) {
    case "Windows" /* Windows */:
      return (await import("./Windows-GTAT3OTE.js")).default;
    case "macOS" /* MacOS */:
      return (await import("./Macos-5QL4JBJE.js")).default;
    case "Linux" /* Linux */:
      return (await import("./Linux-VYP66PDO.js")).default;
    default:
      return (await import("./Linux-VYP66PDO.js")).default;
  }
};
var preloadPlatformIcon = () => loadImages(getPlatformSrc);
function GetDetail({
  getWalletDownload,
  compactModeEnabled
}) {
  const wallets = useWalletConnectors().filter(
    (wallet) => wallet.isRainbowKitConnector
  );
  const shownWallets = wallets.splice(0, 5);
  const { i18n: i18n2 } = useContext8(I18nContext);
  return /* @__PURE__ */ React32.createElement(
    Box,
    {
      alignItems: "center",
      display: "flex",
      flexDirection: "column",
      height: "full",
      marginTop: "18",
      width: "full"
    },
    /* @__PURE__ */ React32.createElement(
      Box,
      {
        alignItems: "center",
        display: "flex",
        flexDirection: "column",
        gap: "28",
        height: "full",
        width: "full"
      },
      shownWallets?.filter(
        (wallet) => wallet.extensionDownloadUrl || wallet.desktopDownloadUrl || wallet.qrCode && wallet.downloadUrls?.qrCode
      ).map((wallet) => {
        const { downloadUrls, iconBackground, iconUrl, id, name, qrCode } = wallet;
        const hasMobileCompanionApp = downloadUrls?.qrCode && qrCode;
        const hasExtension = !!wallet.extensionDownloadUrl;
        const hasMobileAndExtension = downloadUrls?.qrCode && hasExtension;
        const hasMobileAndDesktop = downloadUrls?.qrCode && !!wallet.desktopDownloadUrl;
        return /* @__PURE__ */ React32.createElement(
          Box,
          {
            alignItems: "center",
            display: "flex",
            gap: "16",
            justifyContent: "space-between",
            key: wallet.id,
            width: "full"
          },
          /* @__PURE__ */ React32.createElement(
            Box,
            {
              alignItems: "center",
              display: "flex",
              flexDirection: "row",
              gap: "16"
            },
            /* @__PURE__ */ React32.createElement(
              AsyncImage,
              {
                background: iconBackground,
                borderColor: "actionButtonBorder",
                borderRadius: "10",
                height: "48",
                src: iconUrl,
                width: "48"
              }
            ),
            /* @__PURE__ */ React32.createElement(Box, { display: "flex", flexDirection: "column", gap: "2" }, /* @__PURE__ */ React32.createElement(Text, { color: "modalText", size: "14", weight: "bold" }, name), /* @__PURE__ */ React32.createElement(Text, { color: "modalTextSecondary", size: "14", weight: "medium" }, hasMobileAndExtension ? i18n2.t("get.mobile_and_extension.description") : hasMobileAndDesktop ? i18n2.t("get.mobile_and_desktop.description") : hasMobileCompanionApp ? i18n2.t("get.mobile.description") : hasExtension ? i18n2.t("get.extension.description") : null))
          ),
          /* @__PURE__ */ React32.createElement(Box, { display: "flex", flexDirection: "column", gap: "4" }, /* @__PURE__ */ React32.createElement(
            ActionButton,
            {
              label: i18n2.t("get.action.label"),
              onClick: () => getWalletDownload(id),
              type: "secondary"
            }
          ))
        );
      })
    ),
    /* @__PURE__ */ React32.createElement(
      Box,
      {
        alignItems: "center",
        borderRadius: "10",
        display: "flex",
        flexDirection: "column",
        gap: "8",
        justifyContent: "space-between",
        marginBottom: "4",
        paddingY: "8",
        style: { maxWidth: 275, textAlign: "center" }
      },
      /* @__PURE__ */ React32.createElement(Text, { color: "modalText", size: "14", weight: "bold" }, i18n2.t("get.looking_for.title")),
      /* @__PURE__ */ React32.createElement(Text, { color: "modalTextSecondary", size: "14", weight: "medium" }, compactModeEnabled ? i18n2.t("get.looking_for.desktop.compact_description") : i18n2.t("get.looking_for.desktop.wide_description"))
    )
  );
}
function QRCodeDisplay({
  iconBackground,
  iconUrl,
  compactModeEnabled = true,
  qrCodeUri
}) {
  const { width: windowWidth } = useWindowSize();
  const smallWindow = windowWidth && windowWidth < 768;
  return /* @__PURE__ */ React32.createElement(
    Box,
    {
      alignItems: "center",
      display: "flex",
      justifyContent: "center",
      marginTop: "32",
      marginBottom: "12"
    },
    /* @__PURE__ */ React32.createElement(
      QRCode,
      {
        logoBackground: iconBackground,
        logoSize: compactModeEnabled ? 60 : 72,
        logoUrl: iconUrl,
        size: compactModeEnabled ? 318 : smallWindow ? Math.max(280, Math.min(windowWidth - 308, 382)) : 382,
        uri: qrCodeUri
      }
    )
  );
}
function QRCodeAction({
  description,
  label,
  onClick
}) {
  return /* @__PURE__ */ React32.createElement(
    Box,
    {
      alignItems: "center",
      borderRadius: "10",
      display: "flex",
      flexDirection: "row",
      gap: "8",
      height: "28",
      justifyContent: "space-between"
    },
    /* @__PURE__ */ React32.createElement(React32.Fragment, null, /* @__PURE__ */ React32.createElement(Text, { color: "modalTextSecondary", size: "12", weight: "medium" }, description), /* @__PURE__ */ React32.createElement(
      ActionButton,
      {
        label,
        onClick,
        type: "secondary",
        size: "small"
      }
    ))
  );
}
var LOGO_SIZE = "44";
function ConnectDetail({
  changeWalletStep,
  compactModeEnabled,
  connectionError,
  onClose,
  qrCodeUri,
  reconnect,
  wallet
}) {
  const {
    downloadUrls,
    iconBackground,
    iconUrl,
    name,
    qrCode,
    ready,
    showWalletConnectModal,
    getDesktopUri
  } = wallet;
  const isDesktopDeepLinkAvailable = !!getDesktopUri;
  const safari = isSafari();
  const { i18n: i18n2 } = useContext8(I18nContext);
  const hasExtension = !!wallet.extensionDownloadUrl;
  const hasQrCodeAndExtension = downloadUrls?.qrCode && hasExtension;
  const hasQrCodeAndDesktop = downloadUrls?.qrCode && !!wallet.desktopDownloadUrl;
  const hasQrCode = qrCode && qrCodeUri;
  const onDesktopUri = async () => {
    const uri = await getDesktopUri?.();
    window.open(uri, safari ? "_blank" : "_self");
  };
  const secondaryAction = showWalletConnectModal ? {
    description: !compactModeEnabled ? i18n2.t("connect.walletconnect.description.full") : i18n2.t("connect.walletconnect.description.compact"),
    label: i18n2.t("connect.walletconnect.open.label"),
    onClick: () => {
      onClose();
      showWalletConnectModal();
    }
  } : hasQrCode ? {
    description: i18n2.t("connect.secondary_action.get.description", {
      wallet: name
    }),
    label: i18n2.t("connect.secondary_action.get.label"),
    onClick: () => changeWalletStep(
      hasQrCodeAndExtension || hasQrCodeAndDesktop ? "DOWNLOAD_OPTIONS" /* DownloadOptions */ : "DOWNLOAD" /* Download */
    )
  } : null;
  const { width: windowWidth } = useWindowSize();
  const smallWindow = windowWidth && windowWidth < 768;
  useEffect12(() => {
    preloadBrowserIcon();
    preloadPlatformIcon();
  }, []);
  return /* @__PURE__ */ React32.createElement(Box, { display: "flex", flexDirection: "column", height: "full", width: "full" }, hasQrCode ? /* @__PURE__ */ React32.createElement(
    QRCodeDisplay,
    {
      iconBackground,
      compactModeEnabled,
      iconUrl,
      qrCodeUri
    }
  ) : /* @__PURE__ */ React32.createElement(
    Box,
    {
      alignItems: "center",
      display: "flex",
      justifyContent: "center",
      style: { flexGrow: 1 }
    },
    /* @__PURE__ */ React32.createElement(
      Box,
      {
        alignItems: "center",
        display: "flex",
        flexDirection: "column",
        gap: "8"
      },
      /* @__PURE__ */ React32.createElement(Box, { borderRadius: "10", height: LOGO_SIZE, overflow: "hidden" }, /* @__PURE__ */ React32.createElement(
        AsyncImage,
        {
          useAsImage: !wallet.isRainbowKitConnector,
          height: LOGO_SIZE,
          src: iconUrl,
          width: LOGO_SIZE
        }
      )),
      /* @__PURE__ */ React32.createElement(
        Box,
        {
          alignItems: "center",
          display: "flex",
          flexDirection: "column",
          gap: "4",
          paddingX: "32",
          style: { textAlign: "center" }
        },
        /* @__PURE__ */ React32.createElement(Text, { color: "modalText", size: "18", weight: "bold" }, ready ? i18n2.t("connect.status.opening", {
          wallet: name
        }) : hasExtension ? i18n2.t("connect.status.not_installed", {
          wallet: name
        }) : i18n2.t("connect.status.not_available", {
          wallet: name
        })),
        !ready && hasExtension ? /* @__PURE__ */ React32.createElement(Box, { paddingTop: "20" }, /* @__PURE__ */ React32.createElement(
          ActionButton,
          {
            href: wallet.extensionDownloadUrl,
            label: i18n2.t("connect.secondary_action.install.label"),
            type: "secondary"
          }
        )) : null,
        ready && !hasQrCode && /* @__PURE__ */ React32.createElement(React32.Fragment, null, /* @__PURE__ */ React32.createElement(
          Box,
          {
            alignItems: "center",
            display: "flex",
            flexDirection: "column",
            justifyContent: "center"
          },
          /* @__PURE__ */ React32.createElement(
            Text,
            {
              color: "modalTextSecondary",
              size: "14",
              textAlign: "center",
              weight: "medium"
            },
            i18n2.t("connect.status.confirm")
          )
        ), /* @__PURE__ */ React32.createElement(
          Box,
          {
            alignItems: "center",
            color: "modalText",
            display: "flex",
            flexDirection: "row",
            height: "32",
            marginTop: "8"
          },
          connectionError ? /* @__PURE__ */ React32.createElement(
            ActionButton,
            {
              label: i18n2.t("connect.secondary_action.retry.label"),
              onClick: async () => {
                if (isDesktopDeepLinkAvailable)
                  onDesktopUri();
                reconnect(wallet);
              }
            }
          ) : /* @__PURE__ */ React32.createElement(Box, { color: "modalTextSecondary" }, /* @__PURE__ */ React32.createElement(SpinnerIcon, null))
        ))
      )
    )
  ), ready && secondaryAction && /* @__PURE__ */ React32.createElement(
    QRCodeAction,
    {
      description: secondaryAction.description,
      label: secondaryAction.label,
      onClick: secondaryAction.onClick
    }
  ));
}
var DownloadOptionsBox = ({
  actionLabel,
  description,
  // iconAccent,
  iconBackground,
  iconUrl,
  isCompact,
  onAction,
  title,
  url
  // variant,
}) => {
  const { mode: themeType } = useContext8(ThemeTypeContext);
  return /* @__PURE__ */ React32.createElement(
    Box,
    {
      alignItems: "center",
      borderRadius: "13",
      display: "flex",
      justifyContent: "center",
      overflow: "hidden",
      paddingX: isCompact ? "18" : "44",
      position: "relative",
      style: {
        // height: 'calc(50% - 5px)',
        height: 151
      },
      width: "full"
    },
    /* @__PURE__ */ React32.createElement(
      Box,
      {
        borderColor: "actionButtonBorder",
        borderRadius: "13",
        borderStyle: "solid",
        borderWidth: "1",
        style: {
          bottom: "0",
          left: "0",
          position: "absolute",
          right: "0",
          top: "0",
          zIndex: 1,
          background: themeType === "dark" ? "#121212" : "white",
          border: "1px solid #EBEBF4",
          display: "flex",
          alignItems: "center",
          justifyContent: "center",
          padding: "24px 12px",
          borderColor: themeType === "dark" ? "#444" : "#EBEBF4"
        }
      },
      /* @__PURE__ */ React32.createElement(
        Box,
        {
          alignItems: "flex-start",
          display: "flex",
          flexDirection: "column",
          gap: "12",
          height: "max",
          justifyContent: "center",
          style: { zIndex: 1 }
        },
        /* @__PURE__ */ React32.createElement(Box, { display: "flex", gap: "12" }, /* @__PURE__ */ React32.createElement(Box, { style: { flexGrow: 1, padding: 4 } }, /* @__PURE__ */ React32.createElement(
          AsyncImage,
          {
            height: "48",
            src: iconUrl,
            width: "48",
            ...iconBackground ? {
              background: iconBackground,
              borderColor: "generalBorder",
              borderRadius: "10"
            } : null
          }
        )), /* @__PURE__ */ React32.createElement(Box, null, /* @__PURE__ */ React32.createElement(
          Text,
          {
            color: "modalText",
            size: "16",
            weight: "bold",
            style: { marginBottom: 8 }
          },
          title
        ), /* @__PURE__ */ React32.createElement(
          Text,
          {
            color: "modalTextSecondary",
            size: "13",
            weight: "medium",
            style: themeType === "dark" ? {
              opacity: 0.4,
              color: "#fff"
            } : {}
          },
          description
        ))),
        /* @__PURE__ */ React32.createElement(
          Box,
          {
            display: "flex",
            gap: "4",
            style: { flex: 1, flexDirection: "row-reverse" },
            width: "full"
          },
          /* @__PURE__ */ React32.createElement(
            ActionButton,
            {
              href: url,
              label: actionLabel,
              onClick: onAction,
              size: "medium",
              darkLabel: themeType === "dark"
            }
          )
        )
      )
    )
  );
};
function DownloadOptionsDetail({
  changeWalletStep,
  wallet
}) {
  const browser = getBrowser();
  const platform = getPlatform();
  const modalSize = useContext8(ModalSizeContext);
  const isCompact = modalSize === "compact";
  const {
    desktop,
    desktopDownloadUrl,
    extension,
    extensionDownloadUrl,
    mobileDownloadUrl
  } = wallet;
  const { i18n: i18n2 } = useContext8(I18nContext);
  useEffect12(() => {
    preloadCreateIcon();
    preloadScanIcon();
    preloadRefreshIcon();
    preloadConnectIcon();
  }, []);
  return /* @__PURE__ */ React32.createElement(
    Box,
    {
      alignItems: "center",
      display: "flex",
      flexDirection: "column",
      gap: "24",
      height: "full",
      marginBottom: "8",
      marginTop: "4",
      width: "full"
    },
    /* @__PURE__ */ React32.createElement(
      Box,
      {
        alignItems: "center",
        display: "flex",
        flexDirection: "column",
        gap: "10",
        height: "full",
        justifyContent: "flex-start",
        width: "full",
        style: {
          padding: "12px 0"
        }
      },
      extensionDownloadUrl && /* @__PURE__ */ React32.createElement(
        DownloadOptionsBox,
        {
          actionLabel: i18n2.t("get_options.extension.download.label", {
            browser
          }),
          description: i18n2.t("get_options.extension.description"),
          iconUrl: getBrowserSrc,
          isCompact,
          onAction: () => changeWalletStep(
            extension?.instructions ? "INSTRUCTIONS_EXTENSION" /* InstructionsExtension */ : "CONNECT" /* Connect */
          ),
          title: i18n2.t("get_options.extension.title", {
            wallet: wallet.name,
            browser
          }),
          url: extensionDownloadUrl,
          variant: "browser"
        }
      ),
      desktopDownloadUrl && /* @__PURE__ */ React32.createElement(
        DownloadOptionsBox,
        {
          actionLabel: i18n2.t("get_options.desktop.download.label", {
            platform
          }),
          description: i18n2.t("get_options.desktop.description"),
          iconUrl: getPlatformSrc,
          isCompact,
          onAction: () => changeWalletStep(
            desktop?.instructions ? "INSTRUCTIONS_DESKTOP" /* InstructionsDesktop */ : "CONNECT" /* Connect */
          ),
          title: i18n2.t("get_options.desktop.title", {
            wallet: wallet.name,
            platform
          }),
          url: desktopDownloadUrl,
          variant: "desktop"
        }
      ),
      mobileDownloadUrl && /* @__PURE__ */ React32.createElement(
        DownloadOptionsBox,
        {
          actionLabel: i18n2.t("get_options.mobile.download.label", {
            wallet: wallet.name
          }),
          description: i18n2.t("get_options.mobile.description"),
          iconAccent: wallet.iconAccent,
          iconBackground: wallet.iconBackground,
          iconUrl: wallet.iconUrl,
          isCompact,
          onAction: () => {
            changeWalletStep("DOWNLOAD" /* Download */);
          },
          title: i18n2.t("get_options.mobile.title", { wallet: wallet.name }),
          variant: "app"
        }
      )
    )
  );
}
function DownloadDetail({
  // changeWalletStep,
  wallet
}) {
  const {
    downloadUrls
    /* qrCode */
  } = wallet;
  const { i18n: i18n2 } = useContext8(I18nContext);
  useEffect12(() => {
    preloadCreateIcon();
    preloadScanIcon();
  }, []);
  return /* @__PURE__ */ React32.createElement(
    Box,
    {
      alignItems: "center",
      display: "flex",
      flexDirection: "column",
      gap: "24",
      height: "full",
      width: "full",
      marginTop: "32"
    },
    /* @__PURE__ */ React32.createElement(Box, { style: { maxWidth: 220, textAlign: "center" } }, /* @__PURE__ */ React32.createElement(Text, { color: "modalTextSecondary", size: "12", weight: "semibold" }, i18n2.t("get_mobile.description"))),
    /* @__PURE__ */ React32.createElement(Box, { height: "full" }, downloadUrls?.qrCode ? /* @__PURE__ */ React32.createElement(QRCode, { logoSize: 0, size: 268, uri: downloadUrls.qrCode }) : null)
  );
}
var stepIcons = {
  connect: () => /* @__PURE__ */ React32.createElement(ConnectIcon, null),
  create: () => /* @__PURE__ */ React32.createElement(CreateIcon, null),
  install: (wallet) => /* @__PURE__ */ React32.createElement(
    AsyncImage,
    {
      background: wallet.iconBackground,
      borderColor: "generalBorder",
      borderRadius: "10",
      height: "48",
      src: wallet.iconUrl,
      width: "48"
    }
  ),
  refresh: () => /* @__PURE__ */ React32.createElement(RefreshIcon, null),
  scan: () => /* @__PURE__ */ React32.createElement(ScanIcon, null)
};
function InstructionMobileDetail({
  connectWallet,
  wallet
}) {
  const { i18n: i18n2 } = useContext8(I18nContext);
  return /* @__PURE__ */ React32.createElement(
    Box,
    {
      alignItems: "center",
      display: "flex",
      flexDirection: "column",
      height: "full",
      width: "full"
    },
    /* @__PURE__ */ React32.createElement(
      Box,
      {
        display: "flex",
        flexDirection: "column",
        gap: "28",
        height: "full",
        justifyContent: "center",
        paddingY: "32",
        style: { maxWidth: 320 }
      },
      wallet?.qrCode?.instructions?.steps.map((d, idx) => /* @__PURE__ */ React32.createElement(
        Box,
        {
          alignItems: "center",
          display: "flex",
          flexDirection: "row",
          gap: "16",
          key: idx
        },
        /* @__PURE__ */ React32.createElement(
          Box,
          {
            borderRadius: "10",
            height: "48",
            minWidth: "48",
            overflow: "hidden",
            position: "relative",
            width: "48"
          },
          stepIcons[d.step]?.(wallet)
        ),
        /* @__PURE__ */ React32.createElement(Box, { display: "flex", flexDirection: "column", gap: "4" }, /* @__PURE__ */ React32.createElement(Text, { color: "modalText", size: "14", weight: "bold" }, i18n2.t(d.title, void 0, {
          rawKeyIfTranslationMissing: true
        })), /* @__PURE__ */ React32.createElement(Text, { color: "modalTextSecondary", size: "14", weight: "medium" }, i18n2.t(d.description, void 0, {
          rawKeyIfTranslationMissing: true
        })))
      ))
    ),
    /* @__PURE__ */ React32.createElement(
      Box,
      {
        alignItems: "center",
        display: "flex",
        flexDirection: "column",
        gap: "12",
        justifyContent: "center",
        marginBottom: "16"
      },
      /* @__PURE__ */ React32.createElement(
        ActionButton,
        {
          label: i18n2.t("get_instructions.mobile.connect.label"),
          onClick: () => connectWallet(wallet)
        }
      ),
      /* @__PURE__ */ React32.createElement(
        Box,
        {
          as: "a",
          className: touchableStyles({ active: "shrink", hover: "grow" }),
          display: "block",
          href: wallet?.qrCode?.instructions?.learnMoreUrl,
          paddingX: "12",
          paddingY: "4",
          rel: "noreferrer",
          style: { willChange: "transform" },
          target: "_blank",
          transition: "default"
        },
        /* @__PURE__ */ React32.createElement(Text, { color: "accentColor", size: "14", weight: "bold" }, i18n2.t("get_instructions.mobile.learn_more.label"))
      )
    )
  );
}
function InstructionExtensionDetail({
  wallet
}) {
  const { i18n: i18n2 } = useContext8(I18nContext);
  return /* @__PURE__ */ React32.createElement(
    Box,
    {
      alignItems: "center",
      display: "flex",
      flexDirection: "column",
      height: "full",
      width: "full"
    },
    /* @__PURE__ */ React32.createElement(
      Box,
      {
        display: "flex",
        flexDirection: "column",
        gap: "28",
        height: "full",
        justifyContent: "center",
        paddingY: "32",
        style: { maxWidth: 320 }
      },
      wallet?.extension?.instructions?.steps.map((d, idx) => /* @__PURE__ */ React32.createElement(
        Box,
        {
          alignItems: "center",
          display: "flex",
          flexDirection: "row",
          gap: "16",
          key: idx
        },
        /* @__PURE__ */ React32.createElement(
          Box,
          {
            borderRadius: "10",
            height: "48",
            minWidth: "48",
            overflow: "hidden",
            position: "relative",
            width: "48"
          },
          stepIcons[d.step]?.(wallet)
        ),
        /* @__PURE__ */ React32.createElement(Box, { display: "flex", flexDirection: "column", gap: "4" }, /* @__PURE__ */ React32.createElement(Text, { color: "modalText", size: "14", weight: "bold" }, i18n2.t(d.title, void 0, {
          rawKeyIfTranslationMissing: true
        })), /* @__PURE__ */ React32.createElement(Text, { color: "modalTextSecondary", size: "14", weight: "medium" }, i18n2.t(d.description, void 0, {
          rawKeyIfTranslationMissing: true
        })))
      ))
    ),
    /* @__PURE__ */ React32.createElement(
      Box,
      {
        alignItems: "center",
        display: "flex",
        flexDirection: "column",
        gap: "12",
        justifyContent: "center",
        marginBottom: "16"
      },
      /* @__PURE__ */ React32.createElement(
        ActionButton,
        {
          label: i18n2.t("get_instructions.extension.refresh.label"),
          onClick: window.location.reload.bind(window.location)
        }
      ),
      /* @__PURE__ */ React32.createElement(
        Box,
        {
          as: "a",
          className: touchableStyles({ active: "shrink", hover: "grow" }),
          display: "block",
          href: wallet?.extension?.instructions?.learnMoreUrl,
          paddingX: "12",
          paddingY: "4",
          rel: "noreferrer",
          style: { willChange: "transform" },
          target: "_blank",
          transition: "default"
        },
        /* @__PURE__ */ React32.createElement(Text, { color: "accentColor", size: "14", weight: "bold" }, i18n2.t("get_instructions.extension.learn_more.label"))
      )
    )
  );
}
function InstructionDesktopDetail({
  connectWallet,
  wallet
}) {
  const { i18n: i18n2 } = useContext8(I18nContext);
  return /* @__PURE__ */ React32.createElement(
    Box,
    {
      alignItems: "center",
      display: "flex",
      flexDirection: "column",
      height: "full",
      width: "full"
    },
    /* @__PURE__ */ React32.createElement(
      Box,
      {
        display: "flex",
        flexDirection: "column",
        gap: "28",
        height: "full",
        justifyContent: "center",
        paddingY: "32",
        style: { maxWidth: 320 }
      },
      wallet?.desktop?.instructions?.steps.map((d, idx) => /* @__PURE__ */ React32.createElement(
        Box,
        {
          alignItems: "center",
          display: "flex",
          flexDirection: "row",
          gap: "16",
          key: idx
        },
        /* @__PURE__ */ React32.createElement(
          Box,
          {
            borderRadius: "10",
            height: "48",
            minWidth: "48",
            overflow: "hidden",
            position: "relative",
            width: "48"
          },
          stepIcons[d.step]?.(wallet)
        ),
        /* @__PURE__ */ React32.createElement(Box, { display: "flex", flexDirection: "column", gap: "4" }, /* @__PURE__ */ React32.createElement(Text, { color: "modalText", size: "14", weight: "bold" }, i18n2.t(d.title, void 0, {
          rawKeyIfTranslationMissing: true
        })), /* @__PURE__ */ React32.createElement(Text, { color: "modalTextSecondary", size: "14", weight: "medium" }, i18n2.t(d.description, void 0, {
          rawKeyIfTranslationMissing: true
        })))
      ))
    ),
    /* @__PURE__ */ React32.createElement(
      Box,
      {
        alignItems: "center",
        display: "flex",
        flexDirection: "column",
        gap: "12",
        justifyContent: "center",
        marginBottom: "16"
      },
      /* @__PURE__ */ React32.createElement(
        ActionButton,
        {
          label: i18n2.t("get_instructions.desktop.connect.label"),
          onClick: () => connectWallet(wallet)
        }
      ),
      /* @__PURE__ */ React32.createElement(
        Box,
        {
          as: "a",
          className: touchableStyles({ active: "shrink", hover: "grow" }),
          display: "block",
          href: wallet?.desktop?.instructions?.learnMoreUrl,
          paddingX: "12",
          paddingY: "4",
          rel: "noreferrer",
          style: { willChange: "transform" },
          target: "_blank",
          transition: "default"
        },
        /* @__PURE__ */ React32.createElement(Text, { color: "accentColor", size: "14", weight: "bold" }, i18n2.t("get_instructions.desktop.learn_more.label"))
      )
    )
  );
}

// src/components/ConnectModal/connectMobile.ts
var connectMobile = async (wallet) => {
  const { connect, id, name, getMobileUri, showWalletConnectModal } = wallet;
  const onMobileUri = async () => {
    const mobileUri = await getMobileUri?.();
    if (!mobileUri)
      return;
    if (mobileUri) {
      setWalletConnectDeepLink({ mobileUri, name });
    }
    if (mobileUri.startsWith("http")) {
      const link = document.createElement("a");
      link.href = mobileUri;
      link.target = "_blank";
      link.rel = "noreferrer noopener";
      link.click();
    } else {
      window.location.href = mobileUri;
    }
  };
  if (id !== "walletConnect")
    onMobileUri();
  if (showWalletConnectModal) {
    showWalletConnectModal();
    return;
  }
  connect?.();
};

// src/components/ConnectModal/ConnectModalIntro.tsx
import React35, { useContext as useContext9 } from "react";

// src/components/Disclaimer/DisclaimerLink.tsx
import React33 from "react";
var DisclaimerLink = ({
  children,
  href
}) => {
  return /* @__PURE__ */ React33.createElement(
    Box,
    {
      as: "a",
      color: "accentColor",
      href,
      rel: "noreferrer",
      target: "_blank"
    },
    children
  );
};

// src/components/Disclaimer/DisclaimerText.tsx
import React34 from "react";
var DisclaimerText = ({ children }) => {
  return /* @__PURE__ */ React34.createElement(Text, { color: "modalTextSecondary", size: "12", weight: "medium" }, children);
};

// src/components/ConnectModal/ConnectModalIntro.tsx
function ConnectModalIntro({
  compactModeEnabled = false,
  getWallet
}) {
  const { disclaimer: Disclaimer, learnMoreUrl } = useContext9(AppContext);
  const { i18n: i18n2 } = useContext9(I18nContext);
  return /* @__PURE__ */ React35.createElement(React35.Fragment, null, /* @__PURE__ */ React35.createElement(
    Box,
    {
      alignItems: "center",
      color: "accentColor",
      display: "flex",
      flexDirection: "column",
      height: "full",
      justifyContent: "space-around"
    },
    /* @__PURE__ */ React35.createElement(Box, { marginBottom: "10" }, !compactModeEnabled && /* @__PURE__ */ React35.createElement(Text, { color: "modalText", size: "18", weight: "heavy" }, i18n2.t("intro.title"))),
    /* @__PURE__ */ React35.createElement(
      Box,
      {
        display: "flex",
        flexDirection: "column",
        gap: "32",
        justifyContent: "center",
        marginY: "20",
        style: { maxWidth: 312 }
      },
      /* @__PURE__ */ React35.createElement(Box, { alignItems: "center", display: "flex", flexDirection: "row", gap: "16" }, /* @__PURE__ */ React35.createElement(Box, { borderRadius: "6", height: "48", minWidth: "48", width: "48" }, /* @__PURE__ */ React35.createElement(AssetsIcon, null)), /* @__PURE__ */ React35.createElement(Box, { display: "flex", flexDirection: "column", gap: "4" }, /* @__PURE__ */ React35.createElement(Text, { color: "modalText", size: "14", weight: "bold" }, i18n2.t("intro.digital_asset.title")), /* @__PURE__ */ React35.createElement(Text, { color: "modalTextSecondary", size: "14", weight: "medium" }, i18n2.t("intro.digital_asset.description")))),
      /* @__PURE__ */ React35.createElement(Box, { alignItems: "center", display: "flex", flexDirection: "row", gap: "16" }, /* @__PURE__ */ React35.createElement(Box, { borderRadius: "6", height: "48", minWidth: "48", width: "48" }, /* @__PURE__ */ React35.createElement(LoginIcon, null)), /* @__PURE__ */ React35.createElement(Box, { display: "flex", flexDirection: "column", gap: "4" }, /* @__PURE__ */ React35.createElement(Text, { color: "modalText", size: "14", weight: "bold" }, i18n2.t("intro.login.title")), /* @__PURE__ */ React35.createElement(Text, { color: "modalTextSecondary", size: "14", weight: "medium" }, i18n2.t("intro.login.description"))))
    ),
    /* @__PURE__ */ React35.createElement(
      Box,
      {
        alignItems: "center",
        display: "flex",
        flexDirection: "column",
        gap: "12",
        justifyContent: "center",
        margin: "10"
      },
      /* @__PURE__ */ React35.createElement(ActionButton, { label: i18n2.t("intro.get.label"), onClick: getWallet }),
      /* @__PURE__ */ React35.createElement(
        Box,
        {
          as: "a",
          className: touchableStyles({ active: "shrink", hover: "grow" }),
          display: "block",
          href: learnMoreUrl,
          paddingX: "12",
          paddingY: "4",
          rel: "noreferrer",
          style: { willChange: "transform" },
          target: "_blank",
          transition: "default"
        },
        /* @__PURE__ */ React35.createElement(Text, { color: "accentColor", size: "14", weight: "bold" }, i18n2.t("intro.learn_more.label"))
      )
    ),
    Disclaimer && !compactModeEnabled && /* @__PURE__ */ React35.createElement(Box, { marginBottom: "8", marginTop: "12", textAlign: "center" }, /* @__PURE__ */ React35.createElement(Disclaimer, { Link: DisclaimerLink, Text: DisclaimerText }))
  ));
}

// src/utils/uniqueBy.ts
function uniqueBy(items, key) {
  const filtered = [];
  for (const item of items) {
    if (!filtered.some((x) => x[key] === item[key])) {
      filtered.push(item);
    }
  }
  return filtered;
}

// src/components/ConnectModal/TomoConnectModal.tsx
function TomoConnectModalInner({ opened, onClose }) {
  const [selectedWallet, setSelectedWallet] = useState10();
  const [qrCodeUri, setQrCodeUri] = useState10();
  const hasQrCode = !!selectedWallet?.qrCode && qrCodeUri;
  const [connectionError, setConnectionError] = useState10(false);
  const safari = isSafari();
  const initialized = useRef3(false);
  const { connector } = useContext10(WalletButtonContext);
  const mergeEIP6963WithRkConnectors = !connector;
  const wallets = useWalletConnectors(mergeEIP6963WithRkConnectors).filter((wallet) => wallet.ready || !!wallet.extensionDownloadUrl).sort((a, b) => a.groupIndex - b.groupIndex);
  const unfilteredWallets = useWalletConnectors();
  useEffect13(() => {
    if (connector && !initialized.current) {
      changeWalletStep("CONNECT" /* Connect */);
      selectWallet(connector);
      initialized.current = true;
    }
  }, [connector]);
  const connectToWallet = (wallet) => {
    setConnectionError(false);
    if (wallet.ready) {
      wallet?.connect?.()?.catch(() => {
        setConnectionError(true);
      });
    }
  };
  const onDesktopUri = async (wallet) => {
    const sWallet = wallets.find((w) => wallet.id === w.id);
    if (!sWallet?.getDesktopUri)
      return;
    setTimeout(async () => {
      const uri = await sWallet?.getDesktopUri?.();
      if (uri)
        window.open(uri, safari ? "_blank" : "_self");
    }, 0);
  };
  const onQrCode = async (wallet) => {
    const sWallet = wallets.find((w) => wallet.id === w.id);
    const uri = await sWallet?.getQrCodeUri?.();
    setQrCodeUri(uri);
    setTimeout(
      () => {
        setSelectedWallet(sWallet);
        changeWalletStep("CONNECT" /* Connect */);
      },
      uri ? 0 : 50
    );
  };
  const selectWallet = async (wallet) => {
    addLatestWalletId(wallet.id);
    if (wallet.ready) {
      onQrCode(wallet);
      onDesktopUri(wallet);
    }
    connectToWallet(wallet);
    if (!wallet.ready) {
      setSelectedWallet(wallet);
      changeWalletStep(wallet?.extensionDownloadUrl ? "DOWNLOAD_OPTIONS" /* DownloadOptions */ : "CONNECT" /* Connect */);
    }
  };
  const getWalletDownload = (id) => {
    const sWallet = unfilteredWallets.find((w) => id === w.id);
    const isMobile2 = sWallet?.downloadUrls?.qrCode;
    const isDesktop = !!sWallet?.desktopDownloadUrl;
    const isExtension = !!sWallet?.extensionDownloadUrl;
    setSelectedWallet(sWallet);
    if (isMobile2 && (isExtension || isDesktop)) {
      changeWalletStep("DOWNLOAD_OPTIONS" /* DownloadOptions */);
    } else if (isMobile2) {
      changeWalletStep("DOWNLOAD" /* Download */);
    } else if (isDesktop) {
      changeWalletStep("INSTRUCTIONS_DESKTOP" /* InstructionsDesktop */);
    } else {
      changeWalletStep("INSTRUCTIONS_EXTENSION" /* InstructionsExtension */);
    }
  };
  const clearSelectedWallet = () => {
    setSelectedWallet(void 0);
    setQrCodeUri(void 0);
  };
  const changeWalletStep = (newWalletStep, isBack = false) => {
    if (isBack && newWalletStep === "GET" /* Get */ && initialWalletStep === "GET" /* Get */) {
      clearSelectedWallet();
    } else if (!isBack && newWalletStep === "GET" /* Get */) {
      setInitialWalletStep("GET" /* Get */);
    } else if (!isBack && newWalletStep === "CONNECT" /* Connect */) {
      setInitialWalletStep("CONNECT" /* Connect */);
    }
    setWalletStep(newWalletStep);
  };
  const [initialWalletStep, setInitialWalletStep] = useState10("NONE" /* None */);
  const [walletStep, setWalletStep] = useState10("NONE" /* None */);
  let walletContent = null;
  let headerLabel = null;
  let headerBackButtonLink = null;
  let headerBackButtonCallback;
  useEffect13(() => {
    setConnectionError(false);
  }, [walletStep, selectedWallet]);
  const hasExtension = !!selectedWallet?.extensionDownloadUrl;
  const hasExtensionAndMobile = !!(hasExtension && selectedWallet?.mobileDownloadUrl);
  const [walletOptions, setWalletOptions] = useState10([]);
  const tomoWallet = useMemo13(() => wallets.find((w) => w.id === "TomoWallet"), [wallets]);
  const { _noOtherWallets, socialsEnabled = true, socialsFirst = true } = useContext10(CustomConfigContext);
  useEffect13(() => {
    if (_noOtherWallets) {
      setWalletOptions([]);
      return;
    }
    let walletOpts = wallets.filter((w) => !isMobile() || w.ready).map((w) => {
      let desc = "";
      if (w.installed || w.groupName === "Installed")
        desc = "Installed";
      else {
        const platformList = [];
        if (w.downloadUrls?.browserExtension)
          platformList.push("Extension");
        if (w.downloadUrls?.android || w.downloadUrls?.ios)
          platformList.push("App");
        desc = platformList.join(" & ");
      }
      return {
        key: w.id,
        name: w.name,
        desc,
        icon: /* @__PURE__ */ React36.createElement(
          "div",
          {
            style: {
              borderRadius: 10,
              width: 48,
              height: 48,
              overflow: "hidden"
            }
          },
          /* @__PURE__ */ React36.createElement(
            AsyncImage,
            {
              background: "transparent",
              useAsImage: !w.isRainbowKitConnector,
              borderRadius: "6",
              src: w.iconUrl,
              fullWidth: true,
              fullHeight: true
            }
          )
        ),
        wallet: w
      };
    });
    walletOpts = walletOpts.filter(({ key }) => key !== "TomoWallet");
    walletOpts = uniqueBy(walletOpts, "name");
    setWalletOptions(walletOpts);
  }, [_noOtherWallets]);
  const compactModeEnabled = true;
  switch (walletStep) {
    case "NONE" /* None */:
      walletContent = /* @__PURE__ */ React36.createElement(ConnectModalIntro, { getWallet: () => changeWalletStep("GET" /* Get */) });
      break;
    case "LEARN_COMPACT" /* LearnCompact */:
      walletContent = /* @__PURE__ */ React36.createElement(ConnectModalIntro, { compactModeEnabled, getWallet: () => changeWalletStep("GET" /* Get */) });
      headerLabel = i18n.t("intro.title");
      headerBackButtonLink = "NONE" /* None */;
      break;
    case "GET" /* Get */:
      walletContent = /* @__PURE__ */ React36.createElement(GetDetail, { getWalletDownload, compactModeEnabled });
      headerLabel = i18n.t("get.title");
      headerBackButtonLink = compactModeEnabled ? "LEARN_COMPACT" /* LearnCompact */ : "NONE" /* None */;
      break;
    case "CONNECT" /* Connect */:
      walletContent = selectedWallet && /* @__PURE__ */ React36.createElement(
        ConnectDetail,
        {
          changeWalletStep,
          compactModeEnabled: true,
          connectionError,
          onClose,
          qrCodeUri,
          reconnect: connectToWallet,
          wallet: selectedWallet
        }
      );
      headerLabel = hasQrCode && (selectedWallet.name === "WalletConnect" ? i18n.t("connect_scan.fallback_title") : i18n.t("connect_scan.title", {
        wallet: selectedWallet.name
      }));
      headerBackButtonLink = compactModeEnabled ? connector ? null : "NONE" /* None */ : null;
      headerBackButtonCallback = compactModeEnabled ? !connector ? clearSelectedWallet : () => {
      } : () => {
      };
      break;
    case "DOWNLOAD_OPTIONS" /* DownloadOptions */:
      walletContent = selectedWallet && /* @__PURE__ */ React36.createElement(DownloadOptionsDetail, { changeWalletStep, wallet: selectedWallet });
      headerLabel = selectedWallet && i18n.t("get_options.short_title", { wallet: selectedWallet.name });
      headerBackButtonLink = connector ? "CONNECT" /* Connect */ : compactModeEnabled ? "NONE" /* None */ : initialWalletStep;
      break;
    case "DOWNLOAD" /* Download */:
      walletContent = selectedWallet && /* @__PURE__ */ React36.createElement(DownloadDetail, { changeWalletStep, wallet: selectedWallet });
      headerLabel = selectedWallet && i18n.t("get_mobile.title", { wallet: selectedWallet.name });
      headerBackButtonLink = hasExtensionAndMobile ? "DOWNLOAD_OPTIONS" /* DownloadOptions */ : initialWalletStep;
      break;
    case "INSTRUCTIONS_MOBILE" /* InstructionsMobile */:
      walletContent = selectedWallet && /* @__PURE__ */ React36.createElement(InstructionMobileDetail, { connectWallet: selectWallet, wallet: selectedWallet });
      headerLabel = selectedWallet && i18n.t("get_options.title", {
        wallet: compactModeEnabled ? selectedWallet.shortName || selectedWallet.name : selectedWallet.name
      });
      headerBackButtonLink = "DOWNLOAD" /* Download */;
      break;
    case "INSTRUCTIONS_EXTENSION" /* InstructionsExtension */:
      walletContent = selectedWallet && /* @__PURE__ */ React36.createElement(InstructionExtensionDetail, { wallet: selectedWallet });
      headerLabel = selectedWallet && i18n.t("get_options.title", {
        wallet: compactModeEnabled ? selectedWallet.shortName || selectedWallet.name : selectedWallet.name
      });
      headerBackButtonLink = "DOWNLOAD_OPTIONS" /* DownloadOptions */;
      break;
    case "INSTRUCTIONS_DESKTOP" /* InstructionsDesktop */:
      walletContent = selectedWallet && /* @__PURE__ */ React36.createElement(InstructionDesktopDetail, { connectWallet: selectWallet, wallet: selectedWallet });
      headerLabel = selectedWallet && i18n.t("get_options.title", {
        wallet: compactModeEnabled ? selectedWallet.shortName || selectedWallet.name : selectedWallet.name
      });
      headerBackButtonLink = "DOWNLOAD_OPTIONS" /* DownloadOptions */;
      break;
    default:
      break;
  }
  const theme = useContext10(ThemeTypeContext);
  const socialOptions = [
    {
      key: "google",
      icon: /* @__PURE__ */ React36.createElement(IconImg, { width: 30, height: 30, src: icon_google_default, alt: "google" })
    },
    {
      key: "twitter",
      icon: /* @__PURE__ */ React36.createElement(IconImg, { width: 30, height: 30, src: icon_x_default, alt: "x", theme: theme.mode })
    },
    {
      key: "kakao",
      icon: /* @__PURE__ */ React36.createElement(IconImg, { width: 30, height: 30, src: icon_kakao_default, alt: "kakao" })
    },
    {
      key: "telegram",
      icon: /* @__PURE__ */ React36.createElement(IconImg, { width: 30, height: 30, src: icon_telegram_default, alt: "telegram" })
    }
  ];
  const themeRootProps = useThemeRootProps();
  const getTomoSdk = async () => {
    const provider = await tomoWallet?.getProvider();
    return provider.core;
  };
  const loadUserSocialInfo = async () => {
    const tomoSdk = await getTomoSdk();
    const userSocialInfo = await tomoSdk.getUserSocialInfo();
    return userSocialInfo;
  };
  const secureAction = async (userSocialInfo) => {
    const tomoSDK = await getTomoSdk();
    const res = await tomoSDK?.onboarding();
    return res;
  };
  const approveLogin = async () => {
    const tomoSDK = await getTomoSdk();
    const requestAccountsRes = await tomoSDK?.requestAccounts();
    const isApprove = requestAccountsRes === "approve";
    if (isApprove) {
      tomoWallet?.connect();
    } else {
      await tomoSDK.logout();
    }
  };
  const login = async (loginType) => {
    const tomoSdk = await getTomoSdk();
    const ret = await tomoSdk.login(loginType);
    if (ret) {
      try {
        const res = await loadUserSocialInfo();
        console.log("loadUserSocialInfo", res);
        if (!res.recoveryEmail || !res.tradePasswordBound) {
          const isSecure = await secureAction(res);
          if (isSecure)
            return await approveLogin();
        }
        await approveLogin();
      } catch (e) {
        console.log("login error", e);
      }
      writeSocialLoginType(loginType);
    }
  };
  const emailContinue = async (email) => {
    const tomoSDK = await getTomoSdk();
    let result;
    try {
      result = await tomoSDK?.sendCode(email);
    } catch (e) {
      console.log("login error", e);
      return;
    }
    if (result) {
      const verifyEmailCodeResult = await tomoSDK?.verifyLoginEmail(email);
      console.log("verifyEmailCodeResult", verifyEmailCodeResult);
      if (verifyEmailCodeResult) {
        tomoSDK?.handleLoginByEmailSuccess(verifyEmailCodeResult);
      }
      if (verifyEmailCodeResult) {
        try {
          const res = await loadUserSocialInfo();
          console.log("loadUserSocialInfo", res);
          if (!res.recoveryEmail || !res.tradePasswordBound) {
            const isSecure = await secureAction(res);
            if (isSecure)
              return await approveLogin();
          }
          await approveLogin();
        } catch (e) {
          console.log("login error", e);
        }
        writeSocialLoginType("email");
      }
    }
  };
  const btnStyle = useMemo13(() => {
    const { accentColorForeground, accentColor } = theme?.colors || {};
    return {
      textColor: accentColorForeground,
      bgColor: accentColor
    };
  }, [theme]);
  return /* @__PURE__ */ React36.createElement(Popup, { opened, onClose, outsideClosable: false, fullScreenHeight: true }, (compactModeEnabled ? walletStep === "NONE" /* None */ : true) && /* @__PURE__ */ React36.createElement(React36.Fragment, null, socialsEnabled ? /* @__PURE__ */ React36.createElement(React36.Fragment, null, /* @__PURE__ */ React36.createElement(PopupHeader, { onClose, title: "Log in or sign up", close: true }), /* @__PURE__ */ React36.createElement(
    ConnectMain,
    {
      btnStyle,
      socialOptions,
      walletOptions,
      onClickInputArrow: emailContinue,
      onClickMainButton: async () => {
        login("telegram");
      },
      onClickSocialItem: async (s) => {
        login(s.key);
      },
      onClickWalletItem: (w) => {
        if (isMobile()) {
          connectMobile(w.wallet);
        } else {
          selectWallet(w.wallet);
        }
      },
      socialsFirst
    }
  )) : /* @__PURE__ */ React36.createElement(React36.Fragment, null, /* @__PURE__ */ React36.createElement(PopupHeader, { onClose, title: "Select your wallet", close: true }), /* @__PURE__ */ React36.createElement(
    ConnectWalletMain,
    {
      walletOptions,
      onClickWalletItem: (w) => {
        if (isMobile()) {
          connectMobile(w.wallet);
        } else {
          selectWallet(w.wallet);
        }
      }
    }
  ))), /* @__PURE__ */ React36.createElement(Box, { ...themeRootProps }, /* @__PURE__ */ React36.createElement(
    Box,
    {
      display: "flex",
      flexDirection: "row",
      style: {
        maxHeight: walletStep === "DOWNLOAD_OPTIONS" /* DownloadOptions */ ? 414 : 505
      }
    },
    walletStep !== "NONE" /* None */ && /* @__PURE__ */ React36.createElement(React36.Fragment, null, !compactModeEnabled && /* @__PURE__ */ React36.createElement(Box, { background: "generalBorder", minWidth: "1", width: "1" }), /* @__PURE__ */ React36.createElement(Box, { display: "flex", flexDirection: "column", margin: "20", style: { flexGrow: 1 } }, /* @__PURE__ */ React36.createElement(Box, { alignItems: "center", display: "flex", justifyContent: "space-between", marginBottom: "12" }, /* @__PURE__ */ React36.createElement(Box, { className: "flex items-center align-center", style: { display: "flex" } }, headerBackButtonLink && /* @__PURE__ */ React36.createElement(
      HeaderBackIcon,
      {
        className: "mt-2",
        onClick: () => {
          headerBackButtonLink && changeWalletStep(headerBackButtonLink, true);
          headerBackButtonCallback?.();
        }
      }
    )), /* @__PURE__ */ React36.createElement(Box, { display: "flex", justifyContent: "center", style: { flexGrow: 1 } }, headerLabel && /* @__PURE__ */ React36.createElement(
      Text,
      {
        color: "modalText",
        size: "18",
        textAlign: "center",
        weight: "heavy",
        style: {
          width: "100%",
          fontFamily: "SwitzerMedium"
        }
      },
      headerLabel
    )), /* @__PURE__ */ React36.createElement(HeaderCloseIcon, { onClick: onClose })), /* @__PURE__ */ React36.createElement(Box, { display: "flex", flexDirection: "column", style: { minHeight: 396, paddingBottom: 52 } }, /* @__PURE__ */ React36.createElement(
      Box,
      {
        alignItems: "center",
        display: "flex",
        flexDirection: "column",
        gap: "6",
        height: "full",
        justifyContent: "center",
        marginX: "8"
      },
      walletContent
    ))))
  )));
}
function TomoConnectModal(props) {
  return props.opened ? /* @__PURE__ */ React36.createElement(TomoConnectModalInner, { ...props }) : null;
}

// src/components/ConnectModal/ConnectModal.tsx
function ConnectModal({ onClose, open }) {
  const titleId = "rk_connect_title";
  const connectionStatus = useConnectionStatus();
  const { disconnect } = useDisconnect2();
  const { isConnecting } = useAccount8();
  const onAuthCancel = React37.useCallback(() => {
    onClose();
    disconnect();
    writeSocialLoginType("");
  }, [onClose, disconnect]);
  const onConnectModalCancel = React37.useCallback(() => {
    if (isConnecting) {
      disconnect();
      writeSocialLoginType("");
    }
    onClose();
  }, [onClose, disconnect, isConnecting]);
  if (connectionStatus === "disconnected") {
    return (
      // <Dialog onClose={onConnectModalCancel} open={open} titleId={titleId}>
      //   <DialogContent bottomSheetOnMobile padding="0" wide>
      //     <ConnectOptions onClose={onConnectModalCancel} />
      //   </DialogContent>
      // </Dialog>
      /* @__PURE__ */ React37.createElement(TomoConnectModal, { opened: open, onClose: onConnectModalCancel })
    );
  }
  if (connectionStatus === "unauthenticated") {
    return /* @__PURE__ */ React37.createElement(Dialog, { onClose: onAuthCancel, open, titleId }, /* @__PURE__ */ React37.createElement(DialogContent, { bottomSheetOnMobile: true, padding: "0" }, /* @__PURE__ */ React37.createElement(SignIn, { onClose: onAuthCancel, onCloseModal: onClose })));
  }
  return null;
}

// src/components/RainbowKitProvider/ModalContext.tsx
function useModalStateValue() {
  const [isModalOpen, setModalOpen] = useState11(false);
  return {
    closeModal: useCallback6(() => setModalOpen(false), []),
    isModalOpen,
    openModal: useCallback6(() => setModalOpen(true), [])
  };
}
var ModalContext = createContext12({
  accountModalOpen: false,
  chainModalOpen: false,
  connectModalOpen: false,
  isWalletConnectModalOpen: false,
  setIsWalletConnectModalOpen: () => {
  }
});
function ModalProvider({ children }) {
  const {
    closeModal: closeConnectModal,
    isModalOpen: connectModalOpen,
    openModal: openConnectModal
  } = useModalStateValue();
  const {
    closeModal: closeAccountModal,
    isModalOpen: accountModalOpen,
    openModal: openAccountModal
  } = useModalStateValue();
  const {
    closeModal: closeChainModal,
    isModalOpen: chainModalOpen,
    openModal: openChainModal
  } = useModalStateValue();
  const [isWalletConnectModalOpen, setIsWalletConnectModalOpen] = useState11(false);
  const connectionStatus = useConnectionStatus();
  const { chainId } = useAccount9();
  const { chains } = useConfig2();
  const isCurrentChainSupported = chains.some((chain) => chain.id === chainId);
  const closeModals = useCallback6(
    ({ keepConnectModalOpen = false } = {}) => {
      if (!keepConnectModalOpen) {
        closeConnectModal();
      }
      closeAccountModal();
      closeChainModal();
    },
    [closeConnectModal, closeAccountModal, closeChainModal]
  );
  const isUnauthenticated = useAuthenticationStatus() === "unauthenticated";
  useAccountEffect3({
    onConnect: () => closeModals({ keepConnectModalOpen: isUnauthenticated }),
    onDisconnect: () => closeModals()
  });
  useEffect14(() => {
    if (isUnauthenticated)
      closeModals();
  }, [isUnauthenticated, closeModals]);
  return /* @__PURE__ */ React38.createElement(
    ModalContext.Provider,
    {
      value: useMemo14(
        () => ({
          accountModalOpen,
          chainModalOpen,
          connectModalOpen,
          isWalletConnectModalOpen,
          openAccountModal: isCurrentChainSupported && connectionStatus === "connected" ? openAccountModal : void 0,
          openChainModal: connectionStatus === "connected" ? openChainModal : void 0,
          openConnectModal: connectionStatus === "disconnected" || connectionStatus === "unauthenticated" ? openConnectModal : void 0,
          setIsWalletConnectModalOpen
        }),
        [
          connectionStatus,
          accountModalOpen,
          chainModalOpen,
          connectModalOpen,
          openAccountModal,
          openChainModal,
          openConnectModal,
          isCurrentChainSupported,
          isWalletConnectModalOpen
        ]
      )
    },
    children,
    /* @__PURE__ */ React38.createElement(ConnectModal, { onClose: closeConnectModal, open: connectModalOpen }),
    /* @__PURE__ */ React38.createElement(AccountModal, { onClose: closeAccountModal, open: accountModalOpen }),
    /* @__PURE__ */ React38.createElement(ChainModal, { onClose: closeChainModal, open: chainModalOpen })
  );
}
function useModalState() {
  const { accountModalOpen, chainModalOpen, connectModalOpen } = useContext11(ModalContext);
  return {
    accountModalOpen,
    chainModalOpen,
    connectModalOpen
  };
}
function useAccountModal() {
  const { accountModalOpen, openAccountModal } = useContext11(ModalContext);
  return { accountModalOpen, openAccountModal };
}
function useChainModal() {
  const { chainModalOpen, openChainModal } = useContext11(ModalContext);
  return { chainModalOpen, openChainModal };
}
function useWalletConnectOpenState() {
  const { isWalletConnectModalOpen, setIsWalletConnectModalOpen } = useContext11(ModalContext);
  return { isWalletConnectModalOpen, setIsWalletConnectModalOpen };
}
function useConnectModal() {
  const { connectModalOpen, openConnectModal } = useContext11(ModalContext);
  const { isWalletConnectModalOpen } = useWalletConnectOpenState();
  return {
    connectModalOpen: connectModalOpen || isWalletConnectModalOpen,
    openConnectModal
  };
}

// src/utils/indexBy.ts
function indexBy(items, getKey) {
  const indexedItems = {};
  for (const item of items) {
    const key = getKey(item);
    if (!key) {
      continue;
    }
    indexedItems[key] = item;
  }
  return indexedItems;
}

// src/wallets/downloadUrls.ts
var getExtensionDownloadUrl = (wallet) => {
  const browser = getBrowser();
  return {
    ["Arc" /* Arc */]: wallet?.downloadUrls?.chrome,
    ["Brave" /* Brave */]: wallet?.downloadUrls?.chrome,
    ["Chrome" /* Chrome */]: wallet?.downloadUrls?.chrome,
    ["Edge" /* Edge */]: wallet?.downloadUrls?.edge || wallet?.downloadUrls?.chrome,
    ["Firefox" /* Firefox */]: wallet?.downloadUrls?.firefox,
    ["Opera" /* Opera */]: wallet?.downloadUrls?.opera || wallet?.downloadUrls?.chrome,
    ["Safari" /* Safari */]: wallet?.downloadUrls?.safari,
    ["Browser" /* Browser */]: wallet?.downloadUrls?.browserExtension
  }[browser] ?? wallet?.downloadUrls?.browserExtension;
};
var getMobileDownloadUrl = (wallet) => {
  const ios = isIOS();
  return (ios ? wallet?.downloadUrls?.ios : wallet?.downloadUrls?.android) ?? wallet?.downloadUrls?.mobile;
};
var getDesktopDownloadUrl = (wallet) => {
  const platform = getPlatform();
  return {
    ["Windows" /* Windows */]: wallet?.downloadUrls?.windows,
    ["macOS" /* MacOS */]: wallet?.downloadUrls?.macos,
    ["Linux" /* Linux */]: wallet?.downloadUrls?.linux,
    ["Desktop" /* Desktop */]: wallet?.downloadUrls?.desktop
  }[platform] ?? wallet?.downloadUrls?.desktop;
};

// src/wallets/groupedWallets.ts
var isRecentWallet = (recentWallets, walletId) => {
  return recentWallets.some((recentWallet) => recentWallet.id === walletId);
};
var isRainbowKitConnector = (wallet) => {
  return !!wallet.isRainbowKitConnector;
};
var isEIP6963Connector = (wallet) => {
  return !!(!wallet.isRainbowKitConnector && wallet.icon?.replace(/\n/g, "").startsWith("data:image") && wallet.uid && wallet.name);
};
var rainbowKitConnectorWithWalletConnect = (wallet, walletConnectModalConnector) => {
  const shouldUseWalletConnectModal = wallet.id === "walletConnect" && walletConnectModalConnector;
  return shouldUseWalletConnectModal ? { ...wallet, walletConnectModalConnector } : wallet;
};
var connectorsWithRecentWallets = ({
  wallets,
  recentWallets
}) => {
  return [
    ...recentWallets,
    ...wallets.filter((wallet) => !isRecentWallet(recentWallets, wallet.id))
  ];
};

// src/wallets/recentWalletIds.ts
var storageKey5 = "rk-recent";
function safeParseJsonArray(string) {
  try {
    const value = string ? JSON.parse(string) : [];
    return Array.isArray(value) ? value : [];
  } catch {
    return [];
  }
}
function getRecentWalletIds() {
  return typeof localStorage !== "undefined" ? safeParseJsonArray(localStorage.getItem(storageKey5)) : [];
}
function dedupe(array) {
  return [...new Set(array)];
}
function addRecentWalletId(walletId) {
  const newValue = dedupe([walletId, ...getRecentWalletIds()]);
  localStorage.setItem(storageKey5, JSON.stringify(newValue));
}

// src/wallets/useWalletConnectors.ts
function useWalletConnectors(mergeEIP6963WithRkConnectors = false) {
  const rainbowKitChains = useRainbowKitChains();
  const intialChainId = useInitialChainId();
  const { connectAsync, connectors: defaultConnectors_untyped } = useConnect();
  const defaultCreatedConnectors = defaultConnectors_untyped;
  const { setIsWalletConnectModalOpen } = useWalletConnectOpenState();
  const defaultConnectors = defaultCreatedConnectors.map((connector) => ({
    ...connector,
    // rkDetails is optional it does not exist in eip6963 connectors.
    // We only inject `rkDetails` in `connectorsForWallets` when we
    // want to have additional information in the connector.
    ...connector.rkDetails || {}
  }));
  async function connectWallet(connector) {
    const walletChainId = await connector.getChainId();
    const result = await connectAsync({
      chainId: (
        // The goal here is to ensure users are always on a supported chain when connecting.
        // If an `initialChain` prop was provided to RainbowKitProvider, use that.
        intialChainId ?? // Otherwise, if the wallet is already on a supported chain, use that to avoid a chain switch prompt.
        rainbowKitChains.find(({ id }) => id === walletChainId)?.id ?? // Finally, fall back to the first chain provided to RainbowKitProvider.
        rainbowKitChains[0]?.id
      ),
      connector
    });
    if (result) {
      addRecentWalletId(connector.id);
    }
    return result;
  }
  async function connectToWalletConnectModal(walletConnectModalConnector2) {
    try {
      setIsWalletConnectModalOpen(true);
      await connectWallet(walletConnectModalConnector2);
      setIsWalletConnectModalOpen(false);
    } catch (err) {
      const isUserRejection = (
        // @ts-expect-error - Web3Modal v1 error name
        err.name === "UserRejectedRequestError" || // @ts-expect-error - Web3Modal v2 error message on desktop
        err.message === "Connection request reset. Please try again."
      );
      setIsWalletConnectModalOpen(false);
      if (!isUserRejection) {
        throw err;
      }
    }
  }
  const getWalletConnectUri = async (connector, uriConverter) => {
    const provider = await connector.getProvider();
    if (connector.id === "coinbase") {
      return provider.qrUrl;
    }
    return new Promise(
      (resolve) => (
        // Wagmi v2 doesn't have a return type for provider yet
        // @ts-expect-error
        provider.once("display_uri", (uri) => {
          resolve(uriConverter(uri));
        })
      )
    );
  };
  const walletConnectModalConnector = defaultConnectors.find(
    (connector) => connector.id === "walletConnect" && connector.isWalletConnectModalConnector
  );
  const eip6963Connectors = defaultConnectors.filter(isEIP6963Connector).map((connector) => {
    return {
      ...connector,
      groupIndex: 0
    };
  });
  const rainbowKitConnectors = defaultConnectors.filter(isRainbowKitConnector).filter((wallet) => !wallet.isWalletConnectModalConnector).filter((wallet) => {
    if (!mergeEIP6963WithRkConnectors)
      return true;
    const existsInEIP6963Connectors = eip6963Connectors.some(
      (eip6963) => eip6963.id === wallet.rdns
    );
    return !existsInEIP6963Connectors;
  }).map(
    (wallet) => rainbowKitConnectorWithWalletConnect(
      wallet,
      walletConnectModalConnector
    )
  );
  const combinedConnectors = [...eip6963Connectors, ...rainbowKitConnectors];
  const walletInstanceById = indexBy(
    combinedConnectors,
    (walletInstance) => walletInstance.id
  );
  const MAX_RECENT_WALLETS = 3;
  const recentWallets = getRecentWalletIds().map((walletId) => walletInstanceById[walletId]).filter(Boolean).slice(0, MAX_RECENT_WALLETS);
  const walletConnectors = [];
  const combinedConnectorsWithRecentWallets = connectorsWithRecentWallets({
    wallets: combinedConnectors,
    recentWallets
  });
  for (const wallet of combinedConnectorsWithRecentWallets) {
    if (!wallet)
      continue;
    const eip6963 = isEIP6963Connector(wallet);
    const recent = isRecentWallet(recentWallets, wallet.id);
    if (eip6963) {
      walletConnectors.push({
        ...wallet,
        iconUrl: wallet.icon,
        ready: true,
        connect: () => connectWallet(wallet),
        groupName: "Installed",
        recent
      });
      continue;
    }
    walletConnectors.push({
      ...wallet,
      ready: wallet.installed ?? true,
      connect: () => connectWallet(wallet),
      desktopDownloadUrl: getDesktopDownloadUrl(wallet),
      extensionDownloadUrl: getExtensionDownloadUrl(wallet),
      groupName: wallet.groupName,
      mobileDownloadUrl: getMobileDownloadUrl(wallet),
      getQrCodeUri: wallet.qrCode?.getUri ? () => getWalletConnectUri(wallet, wallet.qrCode.getUri) : void 0,
      getDesktopUri: wallet.desktop?.getUri ? () => getWalletConnectUri(wallet, wallet.desktop.getUri) : void 0,
      getMobileUri: wallet.mobile?.getUri ? () => getWalletConnectUri(wallet, wallet.mobile?.getUri) : void 0,
      recent,
      showWalletConnectModal: wallet.walletConnectModalConnector ? () => connectToWalletConnectModal(wallet.walletConnectModalConnector) : void 0
    });
  }
  return walletConnectors;
}

// src/components/Icons/Back.tsx
import React39 from "react";
var BackIcon = () => /* @__PURE__ */ React39.createElement(
  "svg",
  {
    fill: "none",
    height: "17",
    viewBox: "0 0 11 17",
    width: "11",
    xmlns: "http://www.w3.org/2000/svg"
  },
  /* @__PURE__ */ React39.createElement("title", null, "Back"),
  /* @__PURE__ */ React39.createElement(
    "path",
    {
      d: "M0.99707 8.6543C0.99707 9.08496 1.15527 9.44531 1.51562 9.79688L8.16016 16.3096C8.43262 16.5732 8.74902 16.7051 9.13574 16.7051C9.90918 16.7051 10.5508 16.0811 10.5508 15.3076C10.5508 14.9121 10.3838 14.5605 10.0938 14.2705L4.30176 8.64551L10.0938 3.0293C10.3838 2.74805 10.5508 2.3877 10.5508 2.00098C10.5508 1.23633 9.90918 0.603516 9.13574 0.603516C8.74902 0.603516 8.43262 0.735352 8.16016 0.999023L1.51562 7.51172C1.15527 7.85449 1.00586 8.21484 0.99707 8.6543Z",
      fill: "currentColor"
    }
  )
);

// src/components/InfoButton/InfoButton.tsx
import React41 from "react";

// src/components/Icons/Info.tsx
import React40 from "react";
var InfoIcon = () => /* @__PURE__ */ React40.createElement(
  "svg",
  {
    fill: "none",
    height: "12",
    viewBox: "0 0 8 12",
    width: "8",
    xmlns: "http://www.w3.org/2000/svg"
  },
  /* @__PURE__ */ React40.createElement("title", null, "Info"),
  /* @__PURE__ */ React40.createElement(
    "path",
    {
      d: "M3.64258 7.99609C4.19336 7.99609 4.5625 7.73828 4.68555 7.24609C4.69141 7.21094 4.70312 7.16406 4.70898 7.13477C4.80859 6.60742 5.05469 6.35547 6.04492 5.76367C7.14648 5.10156 7.67969 4.3457 7.67969 3.24414C7.67969 1.39844 6.17383 0.255859 3.95898 0.255859C2.32422 0.255859 1.05859 0.894531 0.548828 1.86719C0.396484 2.14844 0.320312 2.44727 0.320312 2.74023C0.314453 3.37305 0.742188 3.79492 1.42188 3.79492C1.91406 3.79492 2.33594 3.54883 2.53516 3.11523C2.78711 2.47656 3.23242 2.21289 3.83594 2.21289C4.55664 2.21289 5.10742 2.65234 5.10742 3.29102C5.10742 3.9707 4.7793 4.29883 3.81836 4.87891C3.02148 5.36523 2.50586 5.92773 2.50586 6.76562V6.90039C2.50586 7.55664 2.96289 7.99609 3.64258 7.99609ZM3.67188 11.4473C4.42773 11.4473 5.04297 10.8672 5.04297 10.1406C5.04297 9.41406 4.42773 8.83984 3.67188 8.83984C2.91602 8.83984 2.30664 9.41406 2.30664 10.1406C2.30664 10.8672 2.91602 11.4473 3.67188 11.4473Z",
      fill: "currentColor"
    }
  )
);

// src/components/InfoButton/InfoButton.tsx
var InfoButton = ({
  "aria-label": ariaLabel = "Info",
  onClick
}) => {
  const mobile = isMobile();
  return /* @__PURE__ */ React41.createElement(
    Box,
    {
      alignItems: "center",
      "aria-label": ariaLabel,
      as: "button",
      background: "closeButtonBackground",
      borderColor: "actionButtonBorder",
      borderRadius: "full",
      borderStyle: "solid",
      borderWidth: mobile ? "0" : "1",
      className: touchableStyles({ active: "shrinkSm", hover: "growLg" }),
      color: "closeButton",
      display: "flex",
      height: mobile ? "30" : "28",
      justifyContent: "center",
      onClick,
      style: { willChange: "transform" },
      transition: "default",
      type: "button",
      width: mobile ? "30" : "28"
    },
    /* @__PURE__ */ React41.createElement(InfoIcon, null)
  );
};

// src/components/ModalSelection/ModalSelection.tsx
import React42 from "react";

// src/components/RainbowKitProvider/useCoolMode.ts
import { useContext as useContext12, useEffect as useEffect15, useRef as useRef4 } from "react";
var useCoolMode = (imageUrl) => {
  const ref = useRef4(null);
  const coolModeEnabled = useContext12(CoolModeContext);
  const resolvedImageUrl = useAsyncImage(imageUrl);
  useEffect15(() => {
    if (coolModeEnabled && ref.current && resolvedImageUrl) {
      return makeElementCool(ref.current, resolvedImageUrl);
    }
  }, [coolModeEnabled, resolvedImageUrl]);
  return ref;
};
var getContainer = () => {
  const id = "_rk_coolMode";
  const existingContainer = document.getElementById(id);
  if (existingContainer) {
    return existingContainer;
  }
  const container = document.createElement("div");
  container.setAttribute("id", id);
  container.setAttribute(
    "style",
    [
      "overflow:hidden",
      "position:fixed",
      "height:100%",
      "top:0",
      "left:0",
      "right:0",
      "bottom:0",
      "pointer-events:none",
      "z-index:2147483647"
    ].join(";")
  );
  document.body.appendChild(container);
  return container;
};
var instanceCounter = 0;
function makeElementCool(element2, imageUrl) {
  instanceCounter++;
  const sizes = [15, 20, 25, 35, 45];
  const limit = 35;
  let particles = [];
  let autoAddParticle = false;
  let mouseX = 0;
  let mouseY = 0;
  const container = getContainer();
  function createParticle() {
    const size = sizes[Math.floor(Math.random() * sizes.length)];
    const speedHorz = Math.random() * 10;
    const speedUp = Math.random() * 25;
    const spinVal = Math.random() * 360;
    const spinSpeed = Math.random() * 35 * (Math.random() <= 0.5 ? -1 : 1);
    const top = mouseY - size / 2;
    const left = mouseX - size / 2;
    const direction = Math.random() <= 0.5 ? -1 : 1;
    const particle = document.createElement("div");
    particle.innerHTML = `<img src="${imageUrl}" width="${size}" height="${size}" style="border-radius: 25%">`;
    particle.setAttribute(
      "style",
      [
        "position:absolute",
        "will-change:transform",
        `top:${top}px`,
        `left:${left}px`,
        `transform:rotate(${spinVal}deg)`
      ].join(";")
    );
    container.appendChild(particle);
    particles.push({
      direction,
      element: particle,
      left,
      size,
      speedHorz,
      speedUp,
      spinSpeed,
      spinVal,
      top
    });
  }
  function updateParticles() {
    for (const p of particles) {
      p.left = p.left - p.speedHorz * p.direction;
      p.top = p.top - p.speedUp;
      p.speedUp = Math.min(p.size, p.speedUp - 1);
      p.spinVal = p.spinVal + p.spinSpeed;
      if (p.top >= Math.max(window.innerHeight, document.body.clientHeight) + p.size) {
        particles = particles.filter((o) => o !== p);
        p.element.remove();
      }
      p.element.setAttribute(
        "style",
        [
          "position:absolute",
          "will-change:transform",
          `top:${p.top}px`,
          `left:${p.left}px`,
          `transform:rotate(${p.spinVal}deg)`
        ].join(";")
      );
    }
  }
  let animationFrame;
  function loop() {
    if (autoAddParticle && particles.length < limit) {
      createParticle();
    }
    updateParticles();
    animationFrame = requestAnimationFrame(loop);
  }
  loop();
  const isTouchInteraction = "ontouchstart" in window || // @ts-expect-error
  navigator.msMaxTouchPoints;
  const tap = isTouchInteraction ? "touchstart" : "mousedown";
  const tapEnd = isTouchInteraction ? "touchend" : "mouseup";
  const move = isTouchInteraction ? "touchmove" : "mousemove";
  const updateMousePosition = (e) => {
    if ("touches" in e) {
      mouseX = e.touches?.[0].clientX;
      mouseY = e.touches?.[0].clientY;
    } else {
      mouseX = e.clientX;
      mouseY = e.clientY;
    }
  };
  const tapHandler = (e) => {
    updateMousePosition(e);
    autoAddParticle = true;
  };
  const disableAutoAddParticle = () => {
    autoAddParticle = false;
  };
  element2.addEventListener(move, updateMousePosition, { passive: false });
  element2.addEventListener(tap, tapHandler);
  element2.addEventListener(tapEnd, disableAutoAddParticle);
  element2.addEventListener("mouseleave", disableAutoAddParticle);
  return () => {
    element2.removeEventListener(move, updateMousePosition);
    element2.removeEventListener(tap, tapHandler);
    element2.removeEventListener(tapEnd, disableAutoAddParticle);
    element2.removeEventListener("mouseleave", disableAutoAddParticle);
    const interval = setInterval(() => {
      if (animationFrame && particles.length === 0) {
        cancelAnimationFrame(animationFrame);
        clearInterval(interval);
        if (--instanceCounter === 0) {
          container.remove();
        }
      }
    }, 500);
  };
}

// src/components/ModalSelection/ModalSelection.css.ts
var transparentBorder = "nda3ju0";

// src/components/ModalSelection/ModalSelection.tsx
var ModalSelection = ({
  as = "button",
  currentlySelected = false,
  iconBackground,
  iconUrl,
  name,
  onClick,
  ready,
  recent,
  testId,
  isRainbowKitConnector: isRainbowKitConnector2,
  ...urlProps
}) => {
  const coolModeRef = useCoolMode(iconUrl);
  const [isMouseOver, setIsMouseOver] = React42.useState(false);
  const { i18n: i18n2 } = React42.useContext(I18nContext);
  return /* @__PURE__ */ React42.createElement(
    Box,
    {
      display: "flex",
      flexDirection: "column",
      onMouseEnter: () => setIsMouseOver(true),
      onMouseLeave: () => setIsMouseOver(false),
      ref: coolModeRef
    },
    /* @__PURE__ */ React42.createElement(
      Box,
      {
        as,
        borderRadius: "menuButton",
        borderStyle: "solid",
        borderWidth: "1",
        className: !currentlySelected ? [
          transparentBorder,
          touchableStyles({
            active: "shrink"
          })
        ] : void 0,
        disabled: currentlySelected,
        onClick,
        padding: "5",
        style: { willChange: "transform" },
        testId,
        transition: "default",
        width: "full",
        ...currentlySelected ? {
          background: "accentColor",
          borderColor: "selectedOptionBorder",
          boxShadow: "selectedWallet"
        } : {
          background: { hover: "menuItemBackground" }
        },
        ...urlProps
      },
      /* @__PURE__ */ React42.createElement(
        Box,
        {
          color: currentlySelected ? "accentColorForeground" : "modalText",
          disabled: !ready,
          fontFamily: "body",
          fontSize: "16",
          fontWeight: "bold",
          transition: "default"
        },
        /* @__PURE__ */ React42.createElement(Box, { alignItems: "center", display: "flex", flexDirection: "row", gap: "12" }, /* @__PURE__ */ React42.createElement(
          AsyncImage,
          {
            background: iconBackground,
            ...!isMouseOver && isRainbowKitConnector2 ? { borderColor: "actionButtonBorder" } : {},
            useAsImage: !isRainbowKitConnector2,
            borderRadius: "6",
            height: "28",
            src: iconUrl,
            width: "28"
          }
        ), /* @__PURE__ */ React42.createElement(Box, null, /* @__PURE__ */ React42.createElement(
          Box,
          {
            style: { marginTop: recent ? -2 : void 0 },
            maxWidth: "200"
          },
          name
        ), recent && /* @__PURE__ */ React42.createElement(
          Text,
          {
            color: currentlySelected ? "accentColorForeground" : "accentColor",
            size: "12",
            style: { lineHeight: 1, marginTop: -1 },
            weight: "medium"
          },
          i18n2.t("connect.recent")
        )))
      )
    )
  );
};
ModalSelection.displayName = "ModalSelection";

// src/components/ConnectOptions/DesktopOptions.tsx
function DesktopOptions({ onClose }) {
  const titleId = "rk_connect_title";
  const [selectedOptionId, setSelectedOptionId] = useState12();
  const [selectedWallet, setSelectedWallet] = useState12();
  const [qrCodeUri, setQrCodeUri] = useState12();
  const hasQrCode = !!selectedWallet?.qrCode && qrCodeUri;
  const [connectionError, setConnectionError] = useState12(false);
  const modalSize = useContext13(ModalSizeContext);
  const compactModeEnabled = modalSize === ModalSizeOptions.COMPACT;
  const { disclaimer: Disclaimer } = useContext13(AppContext);
  const { i18n: i18n2 } = useContext13(I18nContext);
  const safari = isSafari();
  const initialized = useRef5(false);
  const { connector } = useContext13(WalletButtonContext);
  const mergeEIP6963WithRkConnectors = !connector;
  const wallets = useWalletConnectors(mergeEIP6963WithRkConnectors).filter((wallet) => wallet.ready || !!wallet.extensionDownloadUrl).sort((a, b) => a.groupIndex - b.groupIndex);
  const unfilteredWallets = useWalletConnectors();
  const groupedWallets = groupBy(wallets, (wallet) => wallet.groupName);
  const supportedI18nGroupNames = [
    "Recommended",
    "Other",
    "Popular",
    "More",
    "Others",
    "Installed"
  ];
  useEffect16(() => {
    if (connector && !initialized.current) {
      changeWalletStep("CONNECT" /* Connect */);
      selectWallet(connector);
      initialized.current = true;
    }
  }, [connector]);
  const connectToWallet = (wallet) => {
    setConnectionError(false);
    if (wallet.ready) {
      wallet?.connect?.()?.catch(() => {
        setConnectionError(true);
      });
    }
  };
  const onDesktopUri = async (wallet) => {
    const sWallet = wallets.find((w) => wallet.id === w.id);
    if (!sWallet?.getDesktopUri)
      return;
    setTimeout(async () => {
      const uri = await sWallet?.getDesktopUri?.();
      if (uri)
        window.open(uri, safari ? "_blank" : "_self");
    }, 0);
  };
  const onQrCode = async (wallet) => {
    const sWallet = wallets.find((w) => wallet.id === w.id);
    const uri = await sWallet?.getQrCodeUri?.();
    setQrCodeUri(uri);
    setTimeout(
      () => {
        setSelectedWallet(sWallet);
        changeWalletStep("CONNECT" /* Connect */);
      },
      uri ? 0 : 50
    );
  };
  const selectWallet = async (wallet) => {
    addLatestWalletId(wallet.id);
    if (wallet.ready) {
      onQrCode(wallet);
      onDesktopUri(wallet);
    }
    connectToWallet(wallet);
    setSelectedOptionId(wallet.id);
    if (!wallet.ready) {
      setSelectedWallet(wallet);
      changeWalletStep(
        wallet?.extensionDownloadUrl ? "DOWNLOAD_OPTIONS" /* DownloadOptions */ : "CONNECT" /* Connect */
      );
    }
  };
  const getWalletDownload = (id) => {
    const sWallet = unfilteredWallets.find((w) => id === w.id);
    const isMobile2 = sWallet?.downloadUrls?.qrCode;
    const isDesktop = !!sWallet?.desktopDownloadUrl;
    const isExtension = !!sWallet?.extensionDownloadUrl;
    setSelectedWallet(sWallet);
    if (isMobile2 && (isExtension || isDesktop)) {
      changeWalletStep("DOWNLOAD_OPTIONS" /* DownloadOptions */);
    } else if (isMobile2) {
      changeWalletStep("DOWNLOAD" /* Download */);
    } else if (isDesktop) {
      changeWalletStep("INSTRUCTIONS_DESKTOP" /* InstructionsDesktop */);
    } else {
      changeWalletStep("INSTRUCTIONS_EXTENSION" /* InstructionsExtension */);
    }
  };
  const clearSelectedWallet = () => {
    setSelectedOptionId(void 0);
    setSelectedWallet(void 0);
    setQrCodeUri(void 0);
  };
  const changeWalletStep = (newWalletStep, isBack = false) => {
    if (isBack && newWalletStep === "GET" /* Get */ && initialWalletStep === "GET" /* Get */) {
      clearSelectedWallet();
    } else if (!isBack && newWalletStep === "GET" /* Get */) {
      setInitialWalletStep("GET" /* Get */);
    } else if (!isBack && newWalletStep === "CONNECT" /* Connect */) {
      setInitialWalletStep("CONNECT" /* Connect */);
    }
    setWalletStep(newWalletStep);
  };
  const [initialWalletStep, setInitialWalletStep] = useState12(
    "NONE" /* None */
  );
  const [walletStep, setWalletStep] = useState12("NONE" /* None */);
  let walletContent = null;
  let headerLabel = null;
  let headerBackButtonLink = null;
  let headerBackButtonCallback;
  useEffect16(() => {
    setConnectionError(false);
  }, [walletStep, selectedWallet]);
  const hasExtension = !!selectedWallet?.extensionDownloadUrl;
  const hasExtensionAndMobile = !!(hasExtension && selectedWallet?.mobileDownloadUrl);
  switch (walletStep) {
    case "NONE" /* None */:
      walletContent = /* @__PURE__ */ React43.createElement(ConnectModalIntro, { getWallet: () => changeWalletStep("GET" /* Get */) });
      break;
    case "LEARN_COMPACT" /* LearnCompact */:
      walletContent = /* @__PURE__ */ React43.createElement(
        ConnectModalIntro,
        {
          compactModeEnabled,
          getWallet: () => changeWalletStep("GET" /* Get */)
        }
      );
      headerLabel = i18n2.t("intro.title");
      headerBackButtonLink = "NONE" /* None */;
      break;
    case "GET" /* Get */:
      walletContent = /* @__PURE__ */ React43.createElement(
        GetDetail,
        {
          getWalletDownload,
          compactModeEnabled
        }
      );
      headerLabel = i18n2.t("get.title");
      headerBackButtonLink = compactModeEnabled ? "LEARN_COMPACT" /* LearnCompact */ : "NONE" /* None */;
      break;
    case "CONNECT" /* Connect */:
      walletContent = selectedWallet && /* @__PURE__ */ React43.createElement(
        ConnectDetail,
        {
          changeWalletStep,
          compactModeEnabled,
          connectionError,
          onClose,
          qrCodeUri,
          reconnect: connectToWallet,
          wallet: selectedWallet
        }
      );
      headerLabel = hasQrCode && (selectedWallet.name === "WalletConnect" ? i18n2.t("connect_scan.fallback_title") : i18n2.t("connect_scan.title", {
        wallet: selectedWallet.name
      }));
      headerBackButtonLink = compactModeEnabled ? connector ? null : "NONE" /* None */ : null;
      headerBackButtonCallback = compactModeEnabled ? !connector ? clearSelectedWallet : () => {
      } : () => {
      };
      break;
    case "DOWNLOAD_OPTIONS" /* DownloadOptions */:
      walletContent = selectedWallet && /* @__PURE__ */ React43.createElement(
        DownloadOptionsDetail,
        {
          changeWalletStep,
          wallet: selectedWallet
        }
      );
      headerLabel = selectedWallet && i18n2.t("get_options.short_title", { wallet: selectedWallet.name });
      headerBackButtonLink = connector ? "CONNECT" /* Connect */ : compactModeEnabled ? "NONE" /* None */ : initialWalletStep;
      break;
    case "DOWNLOAD" /* Download */:
      walletContent = selectedWallet && /* @__PURE__ */ React43.createElement(
        DownloadDetail,
        {
          changeWalletStep,
          wallet: selectedWallet
        }
      );
      headerLabel = selectedWallet && i18n2.t("get_mobile.title", { wallet: selectedWallet.name });
      headerBackButtonLink = hasExtensionAndMobile ? "DOWNLOAD_OPTIONS" /* DownloadOptions */ : initialWalletStep;
      break;
    case "INSTRUCTIONS_MOBILE" /* InstructionsMobile */:
      walletContent = selectedWallet && /* @__PURE__ */ React43.createElement(
        InstructionMobileDetail,
        {
          connectWallet: selectWallet,
          wallet: selectedWallet
        }
      );
      headerLabel = selectedWallet && i18n2.t("get_options.title", {
        wallet: compactModeEnabled ? selectedWallet.shortName || selectedWallet.name : selectedWallet.name
      });
      headerBackButtonLink = "DOWNLOAD" /* Download */;
      break;
    case "INSTRUCTIONS_EXTENSION" /* InstructionsExtension */:
      walletContent = selectedWallet && /* @__PURE__ */ React43.createElement(InstructionExtensionDetail, { wallet: selectedWallet });
      headerLabel = selectedWallet && i18n2.t("get_options.title", {
        wallet: compactModeEnabled ? selectedWallet.shortName || selectedWallet.name : selectedWallet.name
      });
      headerBackButtonLink = "DOWNLOAD_OPTIONS" /* DownloadOptions */;
      break;
    case "INSTRUCTIONS_DESKTOP" /* InstructionsDesktop */:
      walletContent = selectedWallet && /* @__PURE__ */ React43.createElement(
        InstructionDesktopDetail,
        {
          connectWallet: selectWallet,
          wallet: selectedWallet
        }
      );
      headerLabel = selectedWallet && i18n2.t("get_options.title", {
        wallet: compactModeEnabled ? selectedWallet.shortName || selectedWallet.name : selectedWallet.name
      });
      headerBackButtonLink = "DOWNLOAD_OPTIONS" /* DownloadOptions */;
      break;
    default:
      break;
  }
  return /* @__PURE__ */ React43.createElement(
    Box,
    {
      display: "flex",
      flexDirection: "row",
      style: { maxHeight: compactModeEnabled ? 468 : 504 }
    },
    (compactModeEnabled ? walletStep === "NONE" /* None */ : true) && /* @__PURE__ */ React43.createElement(
      Box,
      {
        className: compactModeEnabled ? sidebarCompactMode : sidebar,
        display: "flex",
        flexDirection: "column",
        marginTop: "16"
      },
      /* @__PURE__ */ React43.createElement(Box, { display: "flex", justifyContent: "space-between" }, compactModeEnabled && Disclaimer && /* @__PURE__ */ React43.createElement(Box, { marginLeft: "16", width: "28" }, /* @__PURE__ */ React43.createElement(
        InfoButton,
        {
          onClick: () => changeWalletStep("LEARN_COMPACT" /* LearnCompact */)
        }
      )), compactModeEnabled && !Disclaimer && /* @__PURE__ */ React43.createElement(Box, { marginLeft: "16", width: "28" }), /* @__PURE__ */ React43.createElement(
        Box,
        {
          marginLeft: compactModeEnabled ? "0" : "6",
          paddingBottom: "8",
          paddingTop: "2",
          paddingX: "18"
        },
        /* @__PURE__ */ React43.createElement(
          Text,
          {
            as: "h1",
            color: "modalText",
            id: titleId,
            size: "18",
            weight: "heavy",
            testId: "connect-header-label"
          },
          "??? ",
          i18n2.t("connect.title")
        )
      ), compactModeEnabled && /* @__PURE__ */ React43.createElement(Box, { marginRight: "16" }, /* @__PURE__ */ React43.createElement(CloseButton, { onClose }))),
      /* @__PURE__ */ React43.createElement(Box, { className: ScrollClassName, paddingBottom: "18" }, Object.entries(groupedWallets).map(
        ([groupName, wallets2], index) => wallets2.length > 0 && /* @__PURE__ */ React43.createElement(Fragment, { key: index }, groupName ? /* @__PURE__ */ React43.createElement(Box, { marginBottom: "8", marginTop: "16", marginX: "6" }, /* @__PURE__ */ React43.createElement(
          Text,
          {
            color: groupName === "Installed" ? "accentColor" : "modalTextSecondary",
            size: "14",
            weight: "bold"
          },
          supportedI18nGroupNames.includes(groupName) ? i18n2.t(
            `connector_group.${groupName.toLowerCase()}`
          ) : groupName
        )) : null, /* @__PURE__ */ React43.createElement(Box, { display: "flex", flexDirection: "column", gap: "4" }, wallets2.map((wallet) => {
          return /* @__PURE__ */ React43.createElement(
            ModalSelection,
            {
              currentlySelected: wallet.id === selectedOptionId,
              iconBackground: wallet.iconBackground,
              iconUrl: wallet.iconUrl,
              key: wallet.id,
              name: wallet.name,
              onClick: () => selectWallet(wallet),
              ready: wallet.ready,
              recent: wallet.recent,
              testId: `wallet-option-${wallet.id}`,
              isRainbowKitConnector: wallet.isRainbowKitConnector
            }
          );
        })))
      )),
      compactModeEnabled && /* @__PURE__ */ React43.createElement(React43.Fragment, null, /* @__PURE__ */ React43.createElement(Box, { background: "generalBorder", height: "1", marginTop: "-1" }), Disclaimer ? /* @__PURE__ */ React43.createElement(Box, { paddingX: "24", paddingY: "16", textAlign: "center" }, /* @__PURE__ */ React43.createElement(Disclaimer, { Link: DisclaimerLink, Text: DisclaimerText })) : /* @__PURE__ */ React43.createElement(
        Box,
        {
          alignItems: "center",
          display: "flex",
          justifyContent: "space-between",
          paddingX: "24",
          paddingY: "16"
        },
        /* @__PURE__ */ React43.createElement(Box, { paddingY: "4" }, /* @__PURE__ */ React43.createElement(Text, { color: "modalTextSecondary", size: "14", weight: "medium" }, i18n2.t("connect.new_to_ethereum.description"))),
        /* @__PURE__ */ React43.createElement(
          Box,
          {
            alignItems: "center",
            display: "flex",
            flexDirection: "row",
            gap: "4",
            justifyContent: "center"
          },
          /* @__PURE__ */ React43.createElement(
            Box,
            {
              className: touchableStyles({
                active: "shrink",
                hover: "grow"
              }),
              cursor: "pointer",
              onClick: () => changeWalletStep("LEARN_COMPACT" /* LearnCompact */),
              paddingY: "4",
              style: { willChange: "transform" },
              transition: "default"
            },
            /* @__PURE__ */ React43.createElement(Text, { color: "accentColor", size: "14", weight: "bold" }, i18n2.t("connect.new_to_ethereum.learn_more.label"))
          )
        )
      ))
    ),
    (compactModeEnabled ? walletStep !== "NONE" /* None */ : true) && /* @__PURE__ */ React43.createElement(React43.Fragment, null, !compactModeEnabled && /* @__PURE__ */ React43.createElement(Box, { background: "generalBorder", minWidth: "1", width: "1" }), /* @__PURE__ */ React43.createElement(
      Box,
      {
        display: "flex",
        flexDirection: "column",
        margin: "16",
        style: { flexGrow: 1 }
      },
      /* @__PURE__ */ React43.createElement(
        Box,
        {
          alignItems: "center",
          display: "flex",
          justifyContent: "space-between",
          marginBottom: "12"
        },
        /* @__PURE__ */ React43.createElement(Box, { width: "28" }, headerBackButtonLink && /* @__PURE__ */ React43.createElement(
          Box,
          {
            as: "button",
            className: touchableStyles({
              active: "shrinkSm",
              hover: "growLg"
            }),
            color: "accentColor",
            onClick: () => {
              headerBackButtonLink && changeWalletStep(headerBackButtonLink, true);
              headerBackButtonCallback?.();
            },
            paddingX: "8",
            paddingY: "4",
            style: {
              boxSizing: "content-box",
              height: 17,
              willChange: "transform"
            },
            transition: "default",
            type: "button"
          },
          /* @__PURE__ */ React43.createElement(BackIcon, null)
        )),
        /* @__PURE__ */ React43.createElement(
          Box,
          {
            display: "flex",
            justifyContent: "center",
            style: { flexGrow: 1 }
          },
          headerLabel && /* @__PURE__ */ React43.createElement(
            Text,
            {
              color: "modalText",
              size: "18",
              textAlign: "center",
              weight: "heavy"
            },
            headerLabel
          )
        ),
        /* @__PURE__ */ React43.createElement(CloseButton, { onClose })
      ),
      /* @__PURE__ */ React43.createElement(
        Box,
        {
          display: "flex",
          flexDirection: "column",
          style: { minHeight: compactModeEnabled ? 396 : 432 }
        },
        /* @__PURE__ */ React43.createElement(
          Box,
          {
            alignItems: "center",
            display: "flex",
            flexDirection: "column",
            gap: "6",
            height: "full",
            justifyContent: "center",
            marginX: "8"
          },
          walletContent
        )
      )
    ))
  );
}

// src/components/ConnectOptions/MobileOptions.tsx
import React44, {
  useCallback as useCallback7,
  useContext as useContext14,
  useEffect as useEffect17,
  useRef as useRef6,
  useState as useState13
} from "react";

// src/components/ConnectOptions/MobileOptions.css.ts
var rotatingBorder = "_11s58022";
var scroll = "_11s58020";
var spinner = "_11s58023";

// src/components/ConnectOptions/MobileOptions.tsx
var LoadingSpinner = ({ wallet }) => {
  const width = 80;
  const height = 80;
  const radiusFactor = 20;
  const perimeter = 2 * (width + height - 4 * radiusFactor);
  return /* @__PURE__ */ React44.createElement("svg", { className: spinner, viewBox: "0 0 86 86", width: "86", height: "86" }, /* @__PURE__ */ React44.createElement("title", null, "Loading"), /* @__PURE__ */ React44.createElement(
    "rect",
    {
      x: "3",
      y: "3",
      width,
      height,
      rx: radiusFactor,
      ry: radiusFactor,
      strokeDasharray: `${perimeter / 3} ${2 * perimeter / 3}`,
      strokeDashoffset: perimeter,
      className: rotatingBorder,
      style: {
        // Prop style passing works only in `@vanilla-extract/recipes`.
        // Instead downloading packages we can do this
        // manually without passing props
        stroke: wallet?.iconAccent || "#0D3887"
      }
    }
  ));
};
function WalletButton({
  onClose,
  wallet,
  connecting
}) {
  const {
    connect,
    iconBackground,
    iconUrl,
    id,
    name,
    getMobileUri,
    ready,
    shortName,
    showWalletConnectModal
  } = wallet;
  const coolModeRef = useCoolMode(iconUrl);
  const initialized = useRef6(false);
  const { i18n: i18n2 } = useContext14(I18nContext);
  const onConnect = useCallback7(async () => {
    const onMobileUri = async () => {
      const mobileUri = await getMobileUri?.();
      if (!mobileUri)
        return;
      if (mobileUri) {
        setWalletConnectDeepLink({ mobileUri, name });
      }
      if (mobileUri.startsWith("http")) {
        const link = document.createElement("a");
        link.href = mobileUri;
        link.target = "_blank";
        link.rel = "noreferrer noopener";
        link.click();
      } else {
        window.location.href = mobileUri;
      }
    };
    if (id !== "walletConnect")
      onMobileUri();
    if (showWalletConnectModal) {
      showWalletConnectModal();
      onClose?.();
      return;
    }
    connect?.();
  }, [connect, getMobileUri, showWalletConnectModal, onClose, name, id]);
  useEffect17(() => {
    if (connecting && !initialized.current) {
      onConnect();
      initialized.current = true;
    }
  }, [connecting, onConnect]);
  return /* @__PURE__ */ React44.createElement(
    Box,
    {
      as: "button",
      color: ready ? "modalText" : "modalTextSecondary",
      disabled: !ready,
      fontFamily: "body",
      key: id,
      onClick: onConnect,
      ref: coolModeRef,
      style: { overflow: "visible", textAlign: "center" },
      testId: `wallet-option-${id}`,
      type: "button",
      width: "full"
    },
    /* @__PURE__ */ React44.createElement(
      Box,
      {
        alignItems: "center",
        display: "flex",
        flexDirection: "column",
        justifyContent: "center"
      },
      /* @__PURE__ */ React44.createElement(
        Box,
        {
          display: "flex",
          alignItems: "center",
          justifyContent: "center",
          paddingBottom: "8",
          paddingTop: "10",
          position: "relative"
        },
        connecting ? /* @__PURE__ */ React44.createElement(LoadingSpinner, { wallet }) : null,
        /* @__PURE__ */ React44.createElement(
          AsyncImage,
          {
            background: iconBackground,
            borderRadius: "13",
            boxShadow: "walletLogo",
            height: "60",
            src: iconUrl,
            width: "60"
          }
        )
      ),
      !connecting ? /* @__PURE__ */ React44.createElement(Box, { display: "flex", flexDirection: "column", textAlign: "center" }, /* @__PURE__ */ React44.createElement(
        Text,
        {
          as: "h2",
          color: wallet.ready ? "modalText" : "modalTextSecondary",
          size: "13",
          weight: "medium"
        },
        /* @__PURE__ */ React44.createElement(Box, { as: "span", position: "relative" }, shortName ?? name, !wallet.ready && " (unsupported)")
      ), wallet.recent && /* @__PURE__ */ React44.createElement(Text, { color: "accentColor", size: "12", weight: "medium" }, i18n2.t("connect.recent"))) : null
    )
  );
}
function MobileOptions({ onClose }) {
  const titleId = "rk_connect_title";
  const wallets = useWalletConnectors().filter(
    (wallet) => wallet.isRainbowKitConnector
  );
  const { disclaimer: Disclaimer, learnMoreUrl } = useContext14(AppContext);
  let headerLabel = null;
  let walletContent = null;
  let headerBackgroundContrast = false;
  let headerBackButtonLink = null;
  const [walletStep, setWalletStep] = useState13(
    "CONNECT" /* Connect */
  );
  const { i18n: i18n2 } = useContext14(I18nContext);
  const ios = isIOS();
  switch (walletStep) {
    case "CONNECT" /* Connect */: {
      headerLabel = i18n2.t("connect.title");
      headerBackgroundContrast = true;
      walletContent = /* @__PURE__ */ React44.createElement(Box, null, /* @__PURE__ */ React44.createElement(
        Box,
        {
          background: "profileForeground",
          className: scroll,
          display: "flex",
          paddingBottom: "20",
          paddingTop: "6"
        },
        /* @__PURE__ */ React44.createElement(Box, { display: "flex", style: { margin: "0 auto" } }, wallets.filter((wallet) => wallet.ready).map((wallet) => {
          return /* @__PURE__ */ React44.createElement(Box, { key: wallet.id, paddingX: "20" }, /* @__PURE__ */ React44.createElement(Box, { width: "60" }, /* @__PURE__ */ React44.createElement(WalletButton, { onClose, wallet })));
        }))
      ), /* @__PURE__ */ React44.createElement(
        Box,
        {
          background: "generalBorder",
          height: "1",
          marginBottom: "32",
          marginTop: "-1"
        }
      ), /* @__PURE__ */ React44.createElement(
        Box,
        {
          alignItems: "center",
          display: "flex",
          flexDirection: "column",
          gap: "32",
          paddingX: "32",
          style: { textAlign: "center" }
        },
        /* @__PURE__ */ React44.createElement(
          Box,
          {
            display: "flex",
            flexDirection: "column",
            gap: "8",
            textAlign: "center"
          },
          /* @__PURE__ */ React44.createElement(Text, { color: "modalText", size: "16", weight: "bold" }, i18n2.t("intro.title")),
          /* @__PURE__ */ React44.createElement(Text, { color: "modalTextSecondary", size: "16" }, i18n2.t("intro.description"))
        )
      ), /* @__PURE__ */ React44.createElement(Box, { paddingTop: "32", paddingX: "20" }, /* @__PURE__ */ React44.createElement(Box, { display: "flex", gap: "14", justifyContent: "center" }, /* @__PURE__ */ React44.createElement(
        ActionButton,
        {
          label: i18n2.t("intro.get.label"),
          onClick: () => setWalletStep("GET" /* Get */),
          size: "large",
          type: "secondary"
        }
      ), /* @__PURE__ */ React44.createElement(
        ActionButton,
        {
          href: learnMoreUrl,
          label: i18n2.t("intro.learn_more.label"),
          size: "large",
          type: "secondary"
        }
      ))), Disclaimer && /* @__PURE__ */ React44.createElement(Box, { marginTop: "28", marginX: "32", textAlign: "center" }, /* @__PURE__ */ React44.createElement(Disclaimer, { Link: DisclaimerLink, Text: DisclaimerText })));
      break;
    }
    case "GET" /* Get */: {
      headerLabel = i18n2.t("get.title");
      headerBackButtonLink = "CONNECT" /* Connect */;
      const mobileWallets = wallets?.filter(
        (wallet) => wallet.downloadUrls?.ios || wallet.downloadUrls?.android || wallet.downloadUrls?.mobile
      )?.splice(0, 3);
      walletContent = /* @__PURE__ */ React44.createElement(Box, null, /* @__PURE__ */ React44.createElement(
        Box,
        {
          alignItems: "center",
          display: "flex",
          flexDirection: "column",
          height: "full",
          marginBottom: "36",
          marginTop: "5",
          paddingTop: "12",
          width: "full"
        },
        mobileWallets.map((wallet, index) => {
          const { downloadUrls, iconBackground, iconUrl, name } = wallet;
          if (!downloadUrls?.ios && !downloadUrls?.android && !downloadUrls?.mobile) {
            return null;
          }
          return /* @__PURE__ */ React44.createElement(
            Box,
            {
              display: "flex",
              gap: "16",
              key: wallet.id,
              paddingX: "20",
              width: "full"
            },
            /* @__PURE__ */ React44.createElement(Box, { style: { minHeight: 48, minWidth: 48 } }, /* @__PURE__ */ React44.createElement(
              AsyncImage,
              {
                background: iconBackground,
                borderColor: "generalBorder",
                borderRadius: "10",
                height: "48",
                src: iconUrl,
                width: "48"
              }
            )),
            /* @__PURE__ */ React44.createElement(Box, { display: "flex", flexDirection: "column", width: "full" }, /* @__PURE__ */ React44.createElement(Box, { alignItems: "center", display: "flex", height: "48" }, /* @__PURE__ */ React44.createElement(Box, { width: "full" }, /* @__PURE__ */ React44.createElement(Text, { color: "modalText", size: "18", weight: "bold" }, name)), /* @__PURE__ */ React44.createElement(
              ActionButton,
              {
                href: (ios ? downloadUrls?.ios : downloadUrls?.android) || downloadUrls?.mobile,
                label: i18n2.t("get.action.label"),
                size: "small",
                type: "secondary"
              }
            )), index < mobileWallets.length - 1 && /* @__PURE__ */ React44.createElement(
              Box,
              {
                background: "generalBorderDim",
                height: "1",
                marginY: "10",
                width: "full"
              }
            ))
          );
        })
      ), /* @__PURE__ */ React44.createElement(Box, { style: { marginBottom: "42px" } }), /* @__PURE__ */ React44.createElement(
        Box,
        {
          alignItems: "center",
          display: "flex",
          flexDirection: "column",
          gap: "36",
          paddingX: "36",
          style: { textAlign: "center" }
        },
        /* @__PURE__ */ React44.createElement(
          Box,
          {
            display: "flex",
            flexDirection: "column",
            gap: "12",
            textAlign: "center"
          },
          /* @__PURE__ */ React44.createElement(Text, { color: "modalText", size: "16", weight: "bold" }, i18n2.t("get.looking_for.title")),
          /* @__PURE__ */ React44.createElement(Text, { color: "modalTextSecondary", size: "16" }, i18n2.t("get.looking_for.mobile.description"))
        )
      ));
      break;
    }
  }
  return /* @__PURE__ */ React44.createElement(Box, { display: "flex", flexDirection: "column", paddingBottom: "36" }, /* @__PURE__ */ React44.createElement(
    Box,
    {
      background: headerBackgroundContrast ? "profileForeground" : "modalBackground",
      display: "flex",
      flexDirection: "column",
      paddingBottom: "4",
      paddingTop: "14"
    },
    /* @__PURE__ */ React44.createElement(
      Box,
      {
        display: "flex",
        justifyContent: "center",
        paddingBottom: "6",
        paddingX: "20",
        position: "relative"
      },
      headerBackButtonLink && /* @__PURE__ */ React44.createElement(
        Box,
        {
          display: "flex",
          position: "absolute",
          style: {
            left: 0,
            marginBottom: -20,
            marginTop: -20
          }
        },
        /* @__PURE__ */ React44.createElement(
          Box,
          {
            alignItems: "center",
            as: "button",
            className: touchableStyles({
              active: "shrinkSm",
              hover: "growLg"
            }),
            color: "accentColor",
            display: "flex",
            marginLeft: "4",
            marginTop: "20",
            onClick: () => setWalletStep(headerBackButtonLink),
            padding: "16",
            style: { height: 17, willChange: "transform" },
            transition: "default",
            type: "button"
          },
          /* @__PURE__ */ React44.createElement(BackIcon, null)
        )
      ),
      /* @__PURE__ */ React44.createElement(Box, { marginTop: "4", textAlign: "center", width: "full" }, /* @__PURE__ */ React44.createElement(
        Text,
        {
          as: "h1",
          color: "modalText",
          id: titleId,
          size: "20",
          weight: "bold"
        },
        headerLabel
      )),
      /* @__PURE__ */ React44.createElement(
        Box,
        {
          alignItems: "center",
          display: "flex",
          height: "32",
          paddingRight: "14",
          position: "absolute",
          right: "0"
        },
        /* @__PURE__ */ React44.createElement(
          Box,
          {
            style: { marginBottom: -20, marginTop: -20 }
          },
          /* @__PURE__ */ React44.createElement(CloseButton, { onClose })
        )
      )
    )
  ), /* @__PURE__ */ React44.createElement(Box, { display: "flex", flexDirection: "column" }, walletContent));
}

// src/__private__/index.ts
var __private__ = {
  DesktopOptions,
  dialogContent,
  dialogContentMobile,
  MobileOptions
};

// src/components/ConnectButton/ConnectButton.tsx
import React48, { useContext as useContext17, useEffect as useEffect20, useState as useState16 } from "react";

// src/components/Avatar/Avatar.tsx
import React45, { useContext as useContext15 } from "react";
function Avatar({ address, imageUrl, loading, size }) {
  const AvatarComponent = useContext15(AvatarContext);
  return /* @__PURE__ */ React45.createElement(
    Box,
    {
      "aria-hidden": true,
      borderRadius: "full",
      overflow: "hidden",
      position: "relative",
      style: {
        height: `${size}px`,
        width: `${size}px`
      },
      userSelect: "none"
    },
    /* @__PURE__ */ React45.createElement(
      Box,
      {
        alignItems: "center",
        borderRadius: "full",
        display: "flex",
        justifyContent: "center",
        overflow: "hidden",
        position: "absolute",
        style: {
          fontSize: `${Math.round(size * 0.55)}px`,
          height: `${size}px`,
          transform: loading ? "scale(0.72)" : void 0,
          transition: ".25s ease",
          transitionDelay: loading ? void 0 : ".1s",
          width: `${size}px`,
          willChange: "transform"
        },
        userSelect: "none"
      },
      /* @__PURE__ */ React45.createElement(AvatarComponent, { address, ensImage: imageUrl, size })
    ),
    loading && /* @__PURE__ */ React45.createElement(
      Box,
      {
        color: "accentColor",
        display: "flex",
        height: "full",
        position: "absolute",
        width: "full"
      },
      /* @__PURE__ */ React45.createElement(SpinnerIcon, { height: "100%", width: "100%" })
    )
  );
}

// src/components/Icons/Dropdown.tsx
import React46 from "react";
var DropdownIcon = () => /* @__PURE__ */ React46.createElement("svg", { fill: "none", height: "7", width: "14", xmlns: "http://www.w3.org/2000/svg" }, /* @__PURE__ */ React46.createElement("title", null, "Dropdown"), /* @__PURE__ */ React46.createElement(
  "path",
  {
    d: "M12.75 1.54001L8.51647 5.0038C7.77974 5.60658 6.72026 5.60658 5.98352 5.0038L1.75 1.54001",
    stroke: "currentColor",
    strokeLinecap: "round",
    strokeLinejoin: "round",
    strokeWidth: "2.5",
    xmlns: "http://www.w3.org/2000/svg"
  }
));

// src/components/ConnectButton/ConnectButtonRenderer.tsx
import React47, { useContext as useContext16 } from "react";
import { useAccount as useAccount11, useConfig as useConfig3 } from "wagmi";

// src/hooks/useIsMounted.ts
import { useCallback as useCallback8, useEffect as useEffect18, useState as useState14 } from "react";
function useIsMounted() {
  const [isMounted, setIsMounted] = useState14(false);
  useEffect18(() => {
    setIsMounted(true);
    return () => {
      setIsMounted(false);
    };
  }, []);
  return useCallback8(() => isMounted, [isMounted]);
}

// src/hooks/useProfile.ts
import { useBalance as useBalance2 } from "wagmi";

// src/hooks/useMainnetEnsAvatar.ts
import { normalize } from "viem/ens";
import { useEnsAvatar } from "wagmi";
import { mainnet as mainnet2 } from "wagmi/chains";

// src/hooks/useIsMainnetConfigured.ts
import { mainnet } from "wagmi/chains";
function useIsMainnetConfigured() {
  const rainbowKitChains = useRainbowKitChains();
  const chainId = mainnet.id;
  const configured = rainbowKitChains.some(
    (rainbowKitChain) => rainbowKitChain.id === chainId
  );
  return configured;
}

// src/hooks/useMainnetEnsAvatar.ts
function useMainnetEnsAvatar(name) {
  const mainnetConfigured = useIsMainnetConfigured();
  const safeNormalize = (ensName) => {
    try {
      return normalize(ensName);
    } catch {
    }
  };
  const { data: ensAvatar } = useEnsAvatar({
    chainId: mainnet2.id,
    name: name ? safeNormalize(name) : void 0,
    query: {
      enabled: mainnetConfigured
    }
  });
  return ensAvatar;
}

// src/hooks/useMainnetEnsName.ts
import { useQuery } from "@tanstack/react-query";
import { useEnsName } from "wagmi";
import { mainnet as mainnet3 } from "wagmi/chains";

// src/core/network/internal/rainbowFetch.ts
async function rainbowFetch(url, opts) {
  opts = {
    headers: {},
    method: "get",
    ...opts,
    // Any other fetch options
    timeout: opts.timeout ?? 1e4
    // 10 secs
  };
  if (!url)
    throw new Error("rainbowFetch: Missing url argument");
  const controller = new AbortController();
  const id = setTimeout(() => controller.abort(), opts.timeout);
  const { body, params, headers, ...otherOpts } = opts;
  const requestBody = body && typeof body === "object" ? JSON.stringify(opts.body) : opts.body;
  const response = await fetch(`${url}${createParams(params)}`, {
    ...otherOpts,
    body: requestBody,
    headers: {
      Accept: "application/json",
      "Content-Type": "application/json",
      ...headers
    },
    signal: controller.signal
  });
  clearTimeout(id);
  const responseBody = await getBody(response);
  if (response.ok) {
    const { headers: headers2, status } = response;
    return { data: responseBody, headers: headers2, status };
  }
  const errorResponseBody = typeof responseBody === "string" ? { error: responseBody } : responseBody;
  const error = generateError({
    requestBody: body,
    response,
    responseBody: errorResponseBody
  });
  throw error;
}
function getBody(response) {
  const contentType = response.headers.get("Content-Type");
  if (contentType?.startsWith("application/json")) {
    return response.json();
  }
  return response.text();
}
function createParams(params) {
  return params && Object.keys(params).length ? `?${new URLSearchParams(params)}` : "";
}
function generateError({
  requestBody,
  response,
  responseBody
}) {
  const message = responseBody?.error || response?.statusText || "There was an error with the request.";
  const error = new Error(message);
  error.response = response;
  error.responseBody = responseBody;
  error.requestBody = requestBody;
  return error;
}
var RainbowFetchClient = class {
  constructor(opts = {}) {
    const { baseUrl = "", ...otherOpts } = opts;
    this.baseUrl = baseUrl;
    this.opts = otherOpts;
  }
  /**
   * Perform a GET request with the RainbowFetchClient.
   */
  get(url, opts) {
    return rainbowFetch(`${this.baseUrl}${url}`, {
      ...this.opts,
      ...opts || {},
      method: "get"
    });
  }
  /**
   * Perform a DELETE request with the RainbowFetchClient.
   */
  delete(url, opts) {
    return rainbowFetch(`${this.baseUrl}${url}`, {
      ...this.opts,
      ...opts || {},
      method: "delete"
    });
  }
  /**
   * Perform a HEAD request with the RainbowFetchClient.
   */
  head(url, opts) {
    return rainbowFetch(`${this.baseUrl}${url}`, {
      ...this.opts,
      ...opts || {},
      method: "head"
    });
  }
  /**
   * Perform a OPTIONS request with the RainbowFetchClient.
   */
  options(url, opts) {
    return rainbowFetch(`${this.baseUrl}${url}`, {
      ...this.opts,
      ...opts || {},
      method: "options"
    });
  }
  /**
   * Perform a POST request with the RainbowFetchClient.
   */
  post(url, body, opts) {
    return rainbowFetch(`${this.baseUrl}${url}`, {
      ...this.opts,
      ...opts || {},
      body,
      method: "post"
    });
  }
  /**
   * Perform a PUT request with the RainbowFetchClient.
   */
  put(url, body, opts) {
    return rainbowFetch(`${this.baseUrl}${url}`, {
      ...this.opts,
      ...opts || {},
      body,
      method: "put"
    });
  }
  /**
   * Perform a PATCH request with the RainbowFetchClient.
   */
  patch(url, body, opts) {
    return rainbowFetch(`${this.baseUrl}${url}`, {
      ...this.opts,
      ...opts || {},
      body,
      method: "patch"
    });
  }
};

// src/core/network/internal/createHttpClient.ts
function createHttpClient({
  baseUrl,
  headers,
  params,
  timeout
}) {
  return new RainbowFetchClient({ baseUrl, headers, params, timeout });
}

// src/core/network/enhancedProvider.ts
var ENHANCED_PROVIDER_ENABLED = Boolean(
  typeof process !== "undefined" && typeof process.env !== "undefined" && process.env.RAINBOW_PROVIDER_API_KEY
);
var enhancedProviderHttp = createHttpClient({
  baseUrl: "https://enhanced-provider.rainbow.me",
  headers: {
    "x-api-key": typeof process !== "undefined" && typeof process.env !== "undefined" && process.env.RAINBOW_PROVIDER_API_KEY || "undefined"
  }
});

// src/core/react-query/createQuery.ts
function createQueryKey(key, args, config = {}) {
  return [key, args, config];
}

// src/utils/ens.ts
import { isAddress } from "viem";
function getStorageEnsNameKey(address) {
  return `rk-ens-name-${address}`;
}
function safeParseJsonData2(string) {
  try {
    const value = string ? JSON.parse(string) : null;
    return typeof value === "object" ? value : null;
  } catch {
    return null;
  }
}
function addEnsName(address, ensName) {
  if (!isAddress(address))
    return;
  const now = /* @__PURE__ */ new Date();
  const expiry = new Date(now.getTime() + 180 * 6e4);
  localStorage.setItem(
    getStorageEnsNameKey(address),
    JSON.stringify({
      ensName,
      expires: expiry.getTime()
    })
  );
}
function getEnsName(address) {
  const data = safeParseJsonData2(
    localStorage.getItem(getStorageEnsNameKey(address))
  );
  if (!data)
    return null;
  const { ensName, expires } = data;
  if (typeof ensName !== "string" || Number.isNaN(Number(expires))) {
    localStorage.removeItem(getStorageEnsNameKey(address));
    return null;
  }
  const now = /* @__PURE__ */ new Date();
  if (now.getTime() > Number(expires)) {
    localStorage.removeItem(getStorageEnsNameKey(address));
    return null;
  }
  return ensName;
}

// src/hooks/useMainnetEnsName.ts
async function getEnhancedProviderEnsName({ address }) {
  const ensName = getEnsName(address);
  if (ensName)
    return ensName;
  const response = await enhancedProviderHttp.get("/v1/resolve-ens", { params: { address } });
  const enhancedProviderEnsName = response.data.data;
  if (enhancedProviderEnsName) {
    addEnsName(address, enhancedProviderEnsName);
  }
  return enhancedProviderEnsName;
}
function useMainnetEnsName(address) {
  const mainnetConfigured = useIsMainnetConfigured();
  const { data: ensName } = useEnsName({
    chainId: mainnet3.id,
    address,
    query: {
      enabled: mainnetConfigured
    }
  });
  const { data: enhancedProviderEnsName } = useQuery({
    queryKey: createQueryKey("address", address),
    queryFn: () => getEnhancedProviderEnsName({ address }),
    enabled: !mainnetConfigured && !!address && ENHANCED_PROVIDER_ENABLED,
    staleTime: 10 * (60 * 1e3),
    // 10 minutes
    retry: 1
    // Retry once before returning undefined if the request fails
  });
  return ensName || enhancedProviderEnsName;
}

// src/hooks/useProfile.ts
function useProfile({ address, includeBalance }) {
  const ensName = useMainnetEnsName(address);
  const ensAvatar = useMainnetEnsAvatar(ensName);
  const { data: balance } = useBalance2({
    address: includeBalance ? address : void 0
  });
  return { ensName, ensAvatar, balance };
}

// src/transactions/useRecentTransactions.ts
import { useEffect as useEffect19, useState as useState15 } from "react";
import { useAccount as useAccount10 } from "wagmi";
function useRecentTransactions() {
  const store = useTransactionStore();
  const { address } = useAccount10();
  const chainId = useChainId2();
  const [transactions, setTransactions] = useState15(
    () => store && address && chainId ? store.getTransactions(address, chainId) : []
  );
  useEffect19(() => {
    if (store && address && chainId) {
      setTransactions(store.getTransactions(address, chainId));
      return store.onChange(() => {
        setTransactions(store.getTransactions(address, chainId));
      });
    }
  }, [store, address, chainId]);
  return transactions;
}

// src/components/ConnectButton/abbreviateETHBalance.ts
var units = ["k", "m", "b", "t"];
function toPrecision(number, precision = 1) {
  return number.toString().replace(new RegExp(`(.+\\.\\d{${precision}})\\d+`), "$1").replace(/(\.[1-9]*)0+$/, "$1").replace(/\.$/, "");
}
function abbreviateETHBalance(number) {
  if (number < 1)
    return toPrecision(number, 3);
  if (number < 10 ** 2)
    return toPrecision(number, 2);
  if (number < 10 ** 4)
    return new Intl.NumberFormat().format(
      Number.parseFloat(toPrecision(number, 1))
    );
  const decimalsDivisor = 10 ** 1;
  let result = String(number);
  for (let i = units.length - 1; i >= 0; i--) {
    const size = 10 ** ((i + 1) * 3);
    if (size <= number) {
      number = number * decimalsDivisor / size / decimalsDivisor;
      result = toPrecision(number, 1) + units[i];
      break;
    }
  }
  return result;
}

// src/components/ConnectButton/formatAddress.ts
function formatAddress(address) {
  const leadingChars = 4;
  const trailingChars = 4;
  return address.length < leadingChars + trailingChars ? address : `${address.substring(0, leadingChars)}\u2026${address.substring(
    address.length - trailingChars
  )}`;
}

// src/components/ConnectButton/formatENS.ts
function formatENS(name) {
  if (!name)
    return "";
  const parts = name.split(".");
  const last = parts.pop();
  if (parts.join(".").length > 24) {
    return `${parts.join(".").substring(0, 24)}...`;
  }
  return `${parts.join(".")}.${last}`;
}

// src/components/ConnectButton/ConnectButtonRenderer.tsx
var noop = () => {
};
function ConnectButtonRenderer({
  children
}) {
  const isMounted = useIsMounted();
  const { address } = useAccount11();
  const { chainId } = useAccount11();
  const { chains: wagmiChains } = useConfig3();
  const isCurrentChainSupported = wagmiChains.some(
    (chain) => chain.id === chainId
  );
  const rainbowkitChainsById = useRainbowKitChainsById();
  const authenticationStatus = useAuthenticationStatus() ?? void 0;
  const rainbowKitChain = chainId ? rainbowkitChainsById[chainId] : void 0;
  const chainName = rainbowKitChain?.name ?? void 0;
  const chainIconUrl = rainbowKitChain?.iconUrl ?? void 0;
  const chainIconBackground = rainbowKitChain?.iconBackground ?? void 0;
  const resolvedChainIconUrl = useAsyncImage(chainIconUrl);
  const showRecentTransactions = useContext16(ShowRecentTransactionsContext);
  const hasPendingTransactions = useRecentTransactions().some(({ status }) => status === "pending") && showRecentTransactions;
  const { showBalance } = useShowBalance();
  const computeShouldShowBalance = () => {
    if (typeof showBalance === "boolean") {
      return showBalance;
    }
    if (showBalance) {
      return normalizeResponsiveValue(showBalance)[isMobile() ? "smallScreen" : "largeScreen"];
    }
    return true;
  };
  const shouldShowBalance = computeShouldShowBalance();
  const { balance, ensAvatar, ensName } = useProfile({
    address,
    includeBalance: shouldShowBalance
  });
  const displayBalance = balance ? `${abbreviateETHBalance(Number.parseFloat(balance.formatted))} ${balance.symbol}` : void 0;
  const { openConnectModal } = useConnectModal();
  const { openChainModal } = useChainModal();
  const { openAccountModal } = useAccountModal();
  const { accountModalOpen, chainModalOpen, connectModalOpen } = useModalState();
  return /* @__PURE__ */ React47.createElement(React47.Fragment, null, children({
    account: address ? {
      address,
      balanceDecimals: balance?.decimals,
      balanceFormatted: balance?.formatted,
      balanceSymbol: balance?.symbol,
      displayBalance,
      displayName: ensName ? formatENS(ensName) : formatAddress(address),
      ensAvatar: ensAvatar ?? void 0,
      ensName: ensName ?? void 0,
      hasPendingTransactions
    } : void 0,
    accountModalOpen,
    authenticationStatus,
    chain: chainId ? {
      hasIcon: Boolean(chainIconUrl),
      iconBackground: chainIconBackground,
      iconUrl: resolvedChainIconUrl,
      id: chainId,
      name: chainName,
      unsupported: !isCurrentChainSupported
    } : void 0,
    chainModalOpen,
    connectModalOpen,
    mounted: isMounted(),
    openAccountModal: openAccountModal ?? noop,
    openChainModal: openChainModal ?? noop,
    openConnectModal: openConnectModal ?? noop
  }));
}
ConnectButtonRenderer.displayName = "ConnectButton.Custom";

// src/components/ConnectButton/ConnectButton.tsx
var defaultProps = {
  accountStatus: "full",
  chainStatus: { largeScreen: "full", smallScreen: "icon" },
  label: "Connect Wallet",
  showBalance: { largeScreen: true, smallScreen: false }
};
function ConnectButton({
  accountStatus = defaultProps.accountStatus,
  chainStatus = defaultProps.chainStatus,
  label = defaultProps.label,
  showBalance = defaultProps.showBalance
}) {
  const chains = useRainbowKitChains();
  const connectionStatus = useConnectionStatus();
  const { setShowBalance } = useShowBalance();
  const [ready, setReady] = useState16(false);
  const { i18n: i18n2 } = useContext17(I18nContext);
  useEffect20(() => {
    setShowBalance(showBalance);
    if (!ready)
      setReady(true);
  }, [showBalance, setShowBalance]);
  return ready ? /* @__PURE__ */ React48.createElement(ConnectButtonRenderer, null, ({
    account,
    chain,
    mounted,
    openAccountModal,
    openChainModal,
    openConnectModal
  }) => {
    const ready2 = mounted && connectionStatus !== "loading";
    const unsupportedChain = chain?.unsupported ?? false;
    return /* @__PURE__ */ React48.createElement(
      Box,
      {
        display: "flex",
        gap: "12",
        ...!ready2 && {
          "aria-hidden": true,
          style: {
            opacity: 0,
            pointerEvents: "none",
            userSelect: "none"
          }
        }
      },
      ready2 && account && connectionStatus === "connected" ? /* @__PURE__ */ React48.createElement(React48.Fragment, null, chain && (chains.length > 1 || unsupportedChain) && /* @__PURE__ */ React48.createElement(
        Box,
        {
          alignItems: "center",
          "aria-label": "Chain Selector",
          as: "button",
          background: unsupportedChain ? "connectButtonBackgroundError" : "connectButtonBackground",
          borderRadius: "connectButton",
          boxShadow: "connectButton",
          className: touchableStyles({
            active: "shrink",
            hover: "grow"
          }),
          color: unsupportedChain ? "connectButtonTextError" : "connectButtonText",
          display: mapResponsiveValue(
            chainStatus,
            (value) => value === "none" ? "none" : "flex"
          ),
          fontFamily: "body",
          fontWeight: "bold",
          gap: "6",
          key: (
            // Force re-mount to prevent CSS transition
            unsupportedChain ? "unsupported" : "supported"
          ),
          onClick: openChainModal,
          paddingX: "10",
          paddingY: "8",
          testId: unsupportedChain ? "wrong-network-button" : "chain-button",
          transition: "default",
          type: "button"
        },
        unsupportedChain ? /* @__PURE__ */ React48.createElement(
          Box,
          {
            alignItems: "center",
            display: "flex",
            height: "24",
            paddingX: "4"
          },
          i18n2.t("connect_wallet.wrong_network.label")
        ) : /* @__PURE__ */ React48.createElement(Box, { alignItems: "center", display: "flex", gap: "6" }, chain.hasIcon ? /* @__PURE__ */ React48.createElement(
          Box,
          {
            display: mapResponsiveValue(
              chainStatus,
              (value) => value === "full" || value === "icon" ? "block" : "none"
            ),
            height: "24",
            width: "24"
          },
          /* @__PURE__ */ React48.createElement(
            AsyncImage,
            {
              alt: chain.name ?? "Chain icon",
              background: chain.iconBackground,
              borderRadius: "full",
              height: "24",
              src: chain.iconUrl,
              width: "24"
            }
          )
        ) : null, /* @__PURE__ */ React48.createElement(
          Box,
          {
            display: mapResponsiveValue(chainStatus, (value) => {
              if (value === "icon" && !chain.iconUrl) {
                return "block";
              }
              return value === "full" || value === "name" ? "block" : "none";
            })
          },
          chain.name ?? chain.id
        )),
        /* @__PURE__ */ React48.createElement(DropdownIcon, null)
      ), !unsupportedChain && /* @__PURE__ */ React48.createElement(
        Box,
        {
          alignItems: "center",
          as: "button",
          background: "connectButtonBackground",
          borderRadius: "connectButton",
          boxShadow: "connectButton",
          className: touchableStyles({
            active: "shrink",
            hover: "grow"
          }),
          color: "connectButtonText",
          display: "flex",
          fontFamily: "body",
          fontWeight: "bold",
          onClick: openAccountModal,
          testId: "account-button",
          transition: "default",
          type: "button"
        },
        account.displayBalance && /* @__PURE__ */ React48.createElement(
          Box,
          {
            display: mapResponsiveValue(
              showBalance,
              (value) => value ? "block" : "none"
            ),
            padding: "8",
            paddingLeft: "12"
          },
          account.displayBalance
        ),
        /* @__PURE__ */ React48.createElement(
          Box,
          {
            background: normalizeResponsiveValue(showBalance)[isMobile() ? "smallScreen" : "largeScreen"] ? "connectButtonInnerBackground" : "connectButtonBackground",
            borderColor: "connectButtonBackground",
            borderRadius: "connectButton",
            borderStyle: "solid",
            borderWidth: "2",
            color: "connectButtonText",
            fontFamily: "body",
            fontWeight: "bold",
            paddingX: "8",
            paddingY: "6",
            transition: "default"
          },
          /* @__PURE__ */ React48.createElement(
            Box,
            {
              alignItems: "center",
              display: "flex",
              gap: "6",
              height: "24"
            },
            /* @__PURE__ */ React48.createElement(
              Box,
              {
                display: mapResponsiveValue(
                  accountStatus,
                  (value) => value === "full" || value === "avatar" ? "block" : "none"
                )
              },
              /* @__PURE__ */ React48.createElement(
                Avatar,
                {
                  address: account.address,
                  imageUrl: account.ensAvatar,
                  loading: account.hasPendingTransactions,
                  size: 24
                }
              )
            ),
            /* @__PURE__ */ React48.createElement(Box, { alignItems: "center", display: "flex", gap: "6" }, /* @__PURE__ */ React48.createElement(
              Box,
              {
                display: mapResponsiveValue(
                  accountStatus,
                  (value) => value === "full" || value === "address" ? "block" : "none"
                )
              },
              account.displayName
            ), /* @__PURE__ */ React48.createElement(DropdownIcon, null))
          )
        )
      )) : /* @__PURE__ */ React48.createElement(
        Box,
        {
          as: "button",
          background: "accentColor",
          borderRadius: "connectButton",
          boxShadow: "connectButton",
          className: touchableStyles({
            active: "shrink",
            hover: "grow"
          }),
          color: "accentColorForeground",
          fontFamily: "body",
          fontWeight: "bold",
          height: "40",
          key: "connect",
          onClick: openConnectModal,
          paddingX: "14",
          testId: "connect-button",
          transition: "default",
          type: "button"
        },
        mounted && label === "Connect Wallet" ? i18n2.t("connect_wallet.label") : label
      )
    );
  }) : /* @__PURE__ */ React48.createElement(React48.Fragment, null);
}
ConnectButton.__defaultProps = defaultProps;
ConnectButton.Custom = ConnectButtonRenderer;

// src/components/WalletButton/WalletButton.tsx
import React50, { useContext as useContext19 } from "react";

// src/components/WalletButton/WalletButton.css.ts
var border = "h29u7v0";
var maxWidth = "h29u7v1";

// src/components/WalletButton/WalletButtonRenderer.tsx
import React49, {
  useContext as useContext18,
  useEffect as useEffect21,
  useMemo as useMemo15,
  useState as useState17
} from "react";
import { useAccount as useAccount12, useAccountEffect as useAccountEffect4 } from "wagmi";
function WalletButtonRenderer({
  // Wallet is the same as `connector.id` which is injected into
  // wagmi connectors
  wallet = "rainbow",
  children
}) {
  const isMounted = useIsMounted();
  const { openConnectModal } = useConnectModal();
  const { connectModalOpen } = useModalState();
  const { connector, setConnector } = useContext18(WalletButtonContext);
  const [firstConnector] = useWalletConnectors().filter((wallet2) => wallet2.isRainbowKitConnector).filter((_wallet) => _wallet.id.toLowerCase() === wallet.toLowerCase()).sort((a, b) => a.groupIndex - b.groupIndex);
  if (!firstConnector) {
    throw new Error("Connector not found");
  }
  const connectionStatus = useConnectionStatus();
  const [loading, setLoading] = useState17(false);
  const [isError, setIsError] = useState17(false);
  const mobile = isMobile();
  useEffect21(() => {
    if (!connectModalOpen && connector)
      setConnector(null);
  }, [connectModalOpen, connector, setConnector]);
  const { isConnected, isConnecting } = useAccount12();
  useAccountEffect4({
    onConnect: () => {
      if (isError)
        setIsError(false);
    },
    onDisconnect: clearLatestWalletId
  });
  const isLastWalletIdConnected = useMemo15(() => {
    const lastWalletId = getLatestWalletId();
    if (!lastWalletId || !firstConnector?.id) {
      return false;
    }
    if (!isConnected)
      return false;
    return lastWalletId === firstConnector?.id;
  }, [isConnected, firstConnector]);
  const connectWallet = async () => {
    try {
      setLoading(true);
      if (isError)
        setIsError(false);
      await firstConnector?.connect?.();
    } catch {
      setIsError(true);
    } finally {
      setLoading(false);
    }
  };
  const isStatusLoading = connectionStatus === "loading";
  const ready = !isConnecting && !!openConnectModal && firstConnector && !isStatusLoading;
  const isNotSupported = !firstConnector?.installed || !firstConnector?.ready;
  return /* @__PURE__ */ React49.createElement(React49.Fragment, null, children({
    error: isError,
    loading,
    connected: isLastWalletIdConnected,
    ready,
    mounted: isMounted(),
    connector: firstConnector,
    connect: async () => {
      addLatestWalletId(firstConnector?.id || "");
      if (mobile || isNotSupported) {
        openConnectModal?.();
        setConnector(firstConnector);
        return;
      }
      await connectWallet();
    }
  }));
}

// src/components/WalletButton/WalletButton.tsx
var WalletButton2 = ({ wallet }) => {
  return /* @__PURE__ */ React50.createElement(WalletButtonRenderer, { wallet }, ({ ready, connect, connected, mounted, connector, loading }) => {
    const isDisabled = !ready || loading;
    const { i18n: i18n2 } = useContext19(I18nContext);
    const connectorName = connector?.name || "";
    if (!mounted)
      return;
    return /* @__PURE__ */ React50.createElement(
      Box,
      {
        display: "flex",
        flexDirection: "column",
        alignItems: "center",
        disabled: isDisabled,
        pointerEvents: isDisabled ? "none" : "all"
      },
      /* @__PURE__ */ React50.createElement(
        Box,
        {
          as: "button",
          borderRadius: "menuButton",
          borderStyle: "solid",
          borderWidth: "1",
          className: [
            maxWidth,
            border,
            touchableStyles({
              active: "shrink",
              hover: "grow"
            })
          ],
          minHeight: "44",
          onClick: connect,
          disabled: !ready || loading,
          padding: "6",
          style: { willChange: "transform" },
          testId: `wallet-button-${connector?.id || ""}`,
          transition: "default",
          width: "full",
          background: "connectButtonBackground"
        },
        /* @__PURE__ */ React50.createElement(
          Box,
          {
            color: "modalText",
            fontFamily: "body",
            fontSize: "16",
            fontWeight: "bold",
            transition: "default",
            display: "flex",
            alignItems: "center"
          },
          /* @__PURE__ */ React50.createElement(
            Box,
            {
              alignItems: "center",
              display: "flex",
              flexDirection: "row",
              gap: "12",
              paddingRight: "6"
            },
            /* @__PURE__ */ React50.createElement(Box, null, loading ? /* @__PURE__ */ React50.createElement(SpinnerIcon, null) : /* @__PURE__ */ React50.createElement(
              AsyncImage,
              {
                background: connector?.iconBackground,
                borderRadius: "6",
                height: "28",
                src: connector?.iconUrl,
                width: "28"
              }
            )),
            /* @__PURE__ */ React50.createElement(
              Box,
              {
                alignItems: "center",
                display: "flex",
                flexDirection: "column",
                color: "modalText"
              },
              /* @__PURE__ */ React50.createElement(Box, { testId: `wallet-button-label-${connector?.id || ""}` }, loading ? i18n2.t("connect.status.connecting", {
                wallet: connectorName
              }) : connectorName)
            ),
            connected ? /* @__PURE__ */ React50.createElement(
              Box,
              {
                background: "connectionIndicator",
                borderColor: "selectedOptionBorder",
                borderRadius: "full",
                borderStyle: "solid",
                borderWidth: "1",
                height: "8",
                width: "8"
              }
            ) : null
          )
        )
      )
    );
  });
};
WalletButton2.Custom = WalletButtonRenderer;

// src/config/getDefaultConfig.ts
import { createConfig, createConnector, http } from "wagmi";
import { injected } from "wagmi/connectors";

// src/wallets/computeWalletConnectMetaData.ts
var computeWalletConnectMetaData = ({
  appName,
  appDescription,
  appUrl,
  appIcon
}) => {
  return {
    name: appName,
    description: appDescription ?? appName,
    url: appUrl ?? (typeof window !== "undefined" ? window.location.href : ""),
    icons: [...appIcon ? [appIcon] : []]
  };
};

// src/utils/colors.ts
var isHexString = (color) => {
  return /^#([0-9a-f]{3}){1,2}$/i.test(color);
};

// src/utils/omitUndefinedValues.ts
function omitUndefinedValues(obj) {
  return Object.fromEntries(
    //@ts-ignore
    Object.entries(obj).filter(([_key, value]) => value !== void 0)
  );
}

// src/wallets/connectorsForWallets.ts
var connectorsForWallets = (walletList, {
  projectId,
  walletConnectParameters,
  appName,
  appDescription,
  appUrl,
  appIcon
}) => {
  if (!walletList.length) {
    throw new Error("No wallet list was provided");
  }
  for (const { wallets, groupName } of walletList) {
    if (!wallets.length) {
      throw new Error(`No wallets provided for group: ${groupName}`);
    }
  }
  let index = -1;
  const connectors = [];
  const visibleWallets = [];
  const potentiallyHiddenWallets = [];
  const walletConnectMetaData = computeWalletConnectMetaData({
    appName,
    appDescription,
    appUrl,
    appIcon
  });
  for (const [groupIndex, { groupName, wallets }] of walletList.entries()) {
    for (const createWallet of wallets) {
      index++;
      const wallet = createWallet({
        projectId,
        appName,
        appIcon,
        // `option` is being used only for `walletConnectWallet` wallet
        options: {
          metadata: walletConnectMetaData,
          ...walletConnectParameters
        },
        // Every other wallet that supports walletConnect flow and is not
        // `walletConnectWallet` wallet will have `walletConnectParameters` property
        walletConnectParameters: {
          metadata: walletConnectMetaData,
          ...walletConnectParameters
        }
      });
      if (wallet?.iconAccent && !isHexString(wallet?.iconAccent)) {
        throw new Error(
          `Property \`iconAccent\` is not a hex value for wallet: ${wallet.name}`
        );
      }
      const walletListItem = {
        ...wallet,
        groupIndex: groupIndex + 1,
        groupName,
        index
      };
      if (typeof wallet.hidden === "function") {
        potentiallyHiddenWallets.push(walletListItem);
      } else {
        visibleWallets.push(walletListItem);
      }
    }
  }
  const walletListItems = uniqueBy(
    [...visibleWallets, ...potentiallyHiddenWallets],
    "id"
  );
  for (const {
    createConnector: createConnector3,
    groupIndex,
    groupName,
    hidden,
    ...walletMeta
  } of walletListItems) {
    if (typeof hidden === "function") {
      const isHidden = hidden();
      if (isHidden) {
        continue;
      }
    }
    const walletMetaData = (additionalRkParams) => {
      return {
        rkDetails: omitUndefinedValues({
          ...walletMeta,
          groupIndex,
          groupName,
          isRainbowKitConnector: true,
          // These additional params will be used in rainbowkit react tree to
          // merge `walletConnectWallet` and `walletConnect` connector from wagmi with
          // showQrModal: true. This way we can let the user choose if they want to
          // connect via QR code or open the official walletConnect modal instead
          ...additionalRkParams ? additionalRkParams : {}
        })
      };
    };
    const isWalletConnectConnector = walletMeta.id === "walletConnect";
    if (isWalletConnectConnector) {
      connectors.push(
        createConnector3(
          walletMetaData({
            isWalletConnectModalConnector: true,
            showQrModal: true
          })
        )
      );
    }
    const connector = createConnector3(walletMetaData());
    connectors.push(connector);
  }
  return connectors;
};

// src/config/getDefaultConfig.ts
var createDefaultTransports = (chains) => {
  const transportsObject = chains.reduce((acc, chain) => {
    const key = chain.id;
    acc[key] = http();
    return acc;
  }, {});
  return transportsObject;
};
var logoUrl = "https://d13t1x9bdoguib.cloudfront.net/static/logo.svg";
function makeTomoWalletFn({
  clientId = "",
  connect,
  relayBase,
  walletDomain
}) {
  return () => {
    let provider;
    return {
      id: "TomoWallet",
      name: "Tomo Wallet",
      iconUrl: logoUrl,
      installed: true,
      iconBackground: "#000000",
      createConnector: (walletDetails) => {
        return createConnector((config) => ({
          ...injected({
            // shimDisconnect: false
          })(config),
          ...walletDetails.rkDetails,
          getProvider: async () => {
            if (provider || typeof window === "undefined")
              return provider;
            const socialSdk = await import("@tomo-inc/social-wallet-sdk");
            const { TomoSDK, EthereumProvider } = socialSdk;
            const tomoSDK = new TomoSDK({
              clientId,
              ethereumProvider: new EthereumProvider({ connectUrl: connect }),
              connect,
              relayBase,
              walletDomain: walletDomain || "https://tomotg.tomo.inc"
            });
            const ethereum = tomoSDK.ethereumProvider;
            provider = ethereum;
            return ethereum;
          }
        }));
      }
    };
  };
}
var getDefaultConfig = ({
  appName,
  appDescription,
  appUrl,
  appIcon,
  wallets,
  projectId,
  clientId,
  devOption: { connect, relayBase, walletDomain } = {},
  ...wagmiParameters
}) => {
  const { transports, chains, ...restWagmiParameters } = wagmiParameters;
  const metadata = computeWalletConnectMetaData({
    appName,
    appDescription,
    appUrl,
    appIcon
  });
  if (!clientId)
    console.error("please enter your tomo client id");
  const tomoWallet = makeTomoWalletFn({
    clientId: clientId || "",
    connect,
    relayBase,
    walletDomain
  });
  const connectors = connectorsForWallets(
    wallets ? [
      {
        groupName: "Default",
        wallets: [tomoWallet]
      },
      ...wallets
    ] : [
      {
        groupName: "Popular",
        wallets: [tomoWallet]
      }
    ],
    {
      projectId,
      appName,
      appDescription,
      appUrl,
      appIcon,
      walletConnectParameters: { metadata }
    }
  );
  return createConfig({
    connectors,
    chains,
    transports: transports || createDefaultTransports(chains),
    ...restWagmiParameters
  });
};

// src/transactions/useAddRecentTransaction.ts
import { useCallback as useCallback9 } from "react";
import { useAccount as useAccount13 } from "wagmi";
function useAddRecentTransaction() {
  const store = useTransactionStore();
  const { address } = useAccount13();
  const chainId = useChainId2();
  return useCallback9(
    (transaction) => {
      if (!address || !chainId) {
        throw new Error("No address or chain ID found");
      }
      store.addTransaction(address, chainId, transaction);
    },
    [store, address, chainId]
  );
}

// src/wallets/getDefaultWallets.ts
function getDefaultWallets(parameters) {
  const wallets = [
    {
      groupName: "Popular",
      wallets: [
        safeWallet,
        rainbowWallet,
        coinbaseWallet,
        metaMaskWallet,
        walletConnectWallet
      ]
    }
  ];
  if (parameters) {
    return {
      connectors: connectorsForWallets(wallets, parameters),
      wallets
    };
  }
  return {
    wallets
  };
}

// src/onboard/Onboard.tsx
import { useConnections as useConnections2, useDisconnect as useDisconnect4, WagmiProvider } from "wagmi";
import { QueryClient, QueryClientProvider } from "@tanstack/react-query";
import React51, { useCallback as useCallback11, useEffect as useEffect23, useMemo as useMemo16, useState as useState19 } from "react";
import { createRoot } from "react-dom/client";

// src/onboard/hooks.tsx
import { useAccount as useAccount14, useConfig as useConfig4, useConnections, useDisconnect as useDisconnect3, useSwitchChain as useSwitchChain2 } from "wagmi";
import { useCallback as useCallback10, useEffect as useEffect22, useState as useState18 } from "react";
import { getConnections } from "@wagmi/core";

// src/onboard/transforms.ts
import bowser from "bowser";
import { createConnector as createConnector2 } from "wagmi";
import EventEmitter from "eventemitter3";
import { injected as injected2 } from "wagmi/connectors";
function getDevice() {
  if (typeof window !== "undefined") {
    const parsed = bowser.getParser(window.navigator.userAgent);
    const os2 = parsed.getOS();
    const browser = parsed.getBrowser();
    const { type } = parsed.getPlatform();
    return {
      type,
      os: os2,
      browser
    };
  } else {
    return {
      type: null,
      os: null,
      browser: null
    };
  }
}
function getFlatWalletModules(walletInits) {
  const walletModules = walletInits.map((w) => w({ device: getDevice() }));
  const walletModulesFlatted = walletModules.flat().filter((i) => !!i);
  return walletModulesFlatted;
}
async function transformOnboardWalletToCreateWalletFn(walletModule) {
  const itf = await walletModule.getInterface({
    chains: [],
    appMetadata: {
      name: "test"
    },
    EventEmitter
  });
  return () => ({
    id: walletModule.label,
    name: walletModule.label,
    iconUrl: walletModule.getIcon,
    iconBackground: "#fff",
    createConnector: (walletDetail) => {
      return createConnector2((config) => ({
        ...injected2()(config),
        ...walletDetail.rkDetails,
        getProvider: async () => {
          return itf.provider;
        }
      }));
    }
  });
}
var rkWalletList = null;
async function mapOnboardWalletToRkWallet(walletModule) {
  if (!rkWalletList) {
    const rkWallets = await import("./walletConnectors-SMUBATJL.js");
    rkWalletList = Object.values(rkWallets);
  }
  const createWalletFn = rkWalletList.find((rw) => rw({ projectId: "mock" }).name === walletModule.label);
  return createWalletFn;
}
async function resolveWallet(wallet) {
  try {
    const createWalletFn = await transformOnboardWalletToCreateWalletFn(wallet);
    return createWalletFn;
  } catch (e) {
  }
  try {
    const createWalletFn = await mapOnboardWalletToRkWallet(wallet);
    if (!createWalletFn)
      throw "not found";
    return createWalletFn;
  } catch (e) {
  }
}
async function mapOnboardWallets(wallets) {
  const walletModules = getFlatWalletModules(wallets);
  const rkWalletCreators = (await Promise.all(
    walletModules.map(async (wallet) => {
      return await resolveWallet(wallet);
    })
  )).filter((i) => !!i);
  return rkWalletCreators;
}
async function TransformWagmiConnectionsToWalletState(connection) {
  const conn = connection;
  const provider = await conn.connector?.getProvider?.();
  if (!provider)
    return null;
  const wallet = {
    label: conn.connector.name,
    icon: conn.connector.icon || "",
    provider,
    chains: [{ id: String(conn.chainId), namespace: "evm" }],
    wagmiConnector: conn.connector,
    accounts: conn.accounts.map((acc) => ({
      address: acc,
      ens: null,
      uns: null,
      balance: null,
      secondaryTokens: null
    }))
  };
  return wallet;
}
function transformOnboardChainToWagmiChain(chain) {
  return {
    id: Number(chain.id),
    name: chain.label || "--",
    iconBackground: "#fff",
    iconUrl: chain.icon,
    nativeCurrency: {
      name: chain.token || "--",
      symbol: chain.token || "--",
      decimals: 18
      // TODO suppose to always be 18
    },
    rpcUrls: {
      default: {
        http: [chain.rpcUrl || "--"]
      }
    }
  };
}

// src/onboard/hooks.tsx
function useConnectWalletPromise() {
  const { openConnectModal } = useConnectModal();
  const { openAccountModal } = useAccountModal();
  const { isConnected } = useAccount14();
  const config = useConfig4();
  const [connectWalletResolve, setConnectWalletResolve] = useState18(null);
  const connectWallet = useCallback10(
    (_args) => {
      const promise = new Promise((resolve) => {
        setConnectWalletResolve({ resolve });
        if (openConnectModal) {
          openConnectModal();
        } else if (openAccountModal) {
          openAccountModal();
        } else {
          console.error("openConnectModal and openAccountModal is both unavailable");
        }
      });
      return promise;
    },
    [openAccountModal, openConnectModal]
  );
  useEffect22(() => {
    if (connectWalletResolve && isConnected) {
      const connections = getConnections(config);
      Promise.all(
        connections.map(async (conn) => {
          return await TransformWagmiConnectionsToWalletState(conn);
        })
      ).then((wallets) => wallets.filter((i) => !!i)).then((wallets) => {
        connectWalletResolve.resolve(wallets);
        setConnectWalletResolve(null);
      });
    }
  }, [isConnected, connectWalletResolve]);
  return connectWallet;
}
function useDisconnectWalletPromise() {
  const { disconnectAsync } = useDisconnect3();
  const connections = useConnections();
  const disconnectFunc = useCallback10(
    async (_option = {}) => {
      await disconnectAsync();
      return [];
    },
    // eslint-disable-next-line react-hooks/exhaustive-deps
    [connections, disconnectAsync]
    // disconnect function should update when connections changes
  );
  return disconnectFunc;
}
function useSetChainPromise() {
  const { switchChainAsync } = useSwitchChain2();
  const setChain = useCallback10(
    async (option) => {
      try {
        await switchChainAsync({
          chainId: Number(option.chainId),
          addEthereumChainParameter: {
            chainName: option.label,
            nativeCurrency: option.token ? {
              name: option.token,
              symbol: option.token,
              decimals: 18
              // todo default suppose to be 18
            } : void 0,
            rpcUrls: option.rpcUrl ? [option.rpcUrl] : void 0
          }
        });
        return true;
      } catch (e) {
        return false;
      }
    },
    [switchChainAsync]
  );
  return setChain;
}

// src/onboard/pseudoOnboardState.ts
import { BehaviorSubject, Subject } from "rxjs";
import { distinctUntilKeyChanged, map, filter } from "rxjs/operators";
var APP_INITIAL_STATE = {
  wallets: [],
  walletModules: [],
  chains: [],
  accountCenter: {
    enabled: true,
    position: "bottomRight",
    expanded: false,
    minimal: true
  },
  notify: {
    enabled: true,
    position: "topRight",
    replacement: {
      gasPriceProbability: {
        speedup: 80,
        cancel: 95
      }
    }
  },
  notifications: [],
  locale: "",
  connect: {
    showSidebar: true,
    disableClose: false
  },
  appMetadata: null,
  wagmiConfig: null
};
var notNullish = (value) => value != null;
var _store = new BehaviorSubject(APP_INITIAL_STATE);
var _stateUpdates = new Subject();
_stateUpdates.subscribe(_store);
function select(stateKey) {
  if (!stateKey)
    return _stateUpdates.asObservable();
  const validStateKeys = Object.keys(_store.getValue());
  if (!validStateKeys.includes(String(stateKey))) {
    throw new Error(`key: ${stateKey} does not exist on this store`);
  }
  return _stateUpdates.asObservable().pipe(
    distinctUntilKeyChanged(stateKey),
    map((x) => x?.[stateKey]),
    filter(notNullish)
  );
}
function get() {
  return _store.getValue();
}
function updateStateWallets(wallets) {
  const state2 = _store.getValue();
  _stateUpdates.next({ ...state2, wallets });
}
var pseudoState = {
  select,
  get
};

// src/onboard/pseudoOnboardInstance.ts
function makeFnPlaceholder(fnName) {
  return () => {
    throw new Error(`function "${fnName}" is not implemented`);
  };
}
var state = {
  get: pseudoState.get,
  select: pseudoState.select,
  actions: {
    setWalletModules: makeFnPlaceholder("setWalletModules"),
    setLocale: makeFnPlaceholder("setLocale"),
    updateNotify: makeFnPlaceholder("updateNotify"),
    customNotification: makeFnPlaceholder("customNotification"),
    updateBalances: makeFnPlaceholder("updateBalances"),
    updateAccountCenter: makeFnPlaceholder("updateAccountCenter"),
    setPrimaryWallet: makeFnPlaceholder("setPrimaryWallet"),
    updateTheme: makeFnPlaceholder("updateTheme"),
    updateAppMetadata: makeFnPlaceholder("updateAppMetadata")
  }
};
var onboardInstance = { state };

// src/onboard/Onboard.tsx
var queryClient = new QueryClient();
function OnboardDummy({ onMount, autoReconnect = true }) {
  const connectWallet = useConnectWalletPromise();
  const disconnectWallet = useDisconnectWalletPromise();
  const setChain = useSetChainPromise();
  const { disconnect } = useDisconnect4();
  const connections = useConnections2();
  useEffect23(() => {
    if (!autoReconnect) {
      window.onbeforeunload = () => {
        disconnect();
        writeSocialLoginType("");
      };
    }
    return () => {
      if (window.onbeforeunload)
        window.onbeforeunload = null;
    };
  }, [autoReconnect, disconnect]);
  useEffect23(() => {
    Promise.all(
      connections.map(async (conn) => {
        return await TransformWagmiConnectionsToWalletState(conn);
      })
    ).then((wallets) => wallets.filter((i) => !!i)).then((wallets) => {
      updateStateWallets(wallets);
    });
  }, [connections]);
  useEffect23(() => {
    onboardInstance.connectWallet = connectWallet;
  }, [connectWallet]);
  useEffect23(() => {
    onboardInstance.disconnectWallet = disconnectWallet;
  }, [disconnectWallet]);
  useEffect23(() => {
    onboardInstance.setChain = setChain;
  }, [setChain]);
  useEffect23(() => {
    onMount();
  }, []);
  return /* @__PURE__ */ React51.createElement(React51.Fragment, null);
}
function OnboardWrapper(props) {
  const {
    /* config, */
    onMount,
    appInfo,
    wallets = [],
    chains,
    projectId = "",
    clientId,
    theme: themeInput = "default",
    autoReconnect
  } = props;
  const [theme, setTheme] = useState19(themeInput);
  const updateTheme = useCallback11(
    (theme2) => {
      if (typeof theme2 === "string" && ["light", "dark", "system", "default"].includes(theme2)) {
        setTheme(theme2);
      }
    },
    [setTheme]
  );
  useEffect23(() => {
    onboardInstance.state.actions.updateTheme = updateTheme;
  }, [updateTheme]);
  const themeVal = useMemo16(() => {
    switch (theme) {
      case "default":
      case "light":
        return lightTheme();
      case "dark":
        return darkTheme();
      case "system":
      default:
        return {
          lightMode: lightTheme(),
          darkMode: darkTheme()
        };
    }
  }, [theme]);
  const config = useMemo16(
    () => getDefaultConfig({
      appName: appInfo?.appName || "Tomo Evm Kit Onboard",
      chains,
      wallets: wallets.length ? [
        {
          groupName: "default",
          wallets
        }
      ] : [],
      projectId,
      clientId
    }),
    [appInfo?.appName, chains, clientId, projectId, wallets]
  );
  return /* @__PURE__ */ React51.createElement(WagmiProvider, { config }, /* @__PURE__ */ React51.createElement(QueryClientProvider, { client: queryClient }, /* @__PURE__ */ React51.createElement(
    RainbowKitProvider,
    {
      appInfo: {
        appName: appInfo.appName
      },
      theme: themeVal
    },
    /* @__PURE__ */ React51.createElement(OnboardDummy, { onMount, autoReconnect })
  )));
}
async function Onboard({
  chains,
  wallets,
  appMetadata,
  projectId,
  clientId,
  theme,
  connect
}) {
  const div = document.createElement("div");
  div.id = "tomo-evm-kit-modal";
  div.style.position = "relative";
  div.style.zIndex = "1000";
  document.body.appendChild(div);
  const root = createRoot(div);
  const _chains = chains.map(transformOnboardChainToWagmiChain);
  const _wallets = await mapOnboardWallets(wallets);
  await new Promise((resolve) => {
    root.render(
      /* @__PURE__ */ React51.createElement(
        OnboardWrapper,
        {
          appInfo: { appName: appMetadata?.name || "Tomo Evm Kit Onboard" },
          wallets: _wallets,
          chains: _chains,
          onMount: resolve,
          projectId,
          clientId,
          theme,
          autoReconnect: connect?.autoConnectLastWallet
        }
      )
    );
  });
  return onboardInstance;
}

// src/index.ts
export * from "@tomo-inc/shared-type";
export {
  ConnectButton,
  DownloadDetail,
  DownloadOptionsBox,
  EvmKitThemeProvider,
  Onboard,
  QRCodeAction,
  QRCodeDisplay,
  RainbowKitAuthenticationProvider,
  RainbowKitProvider as TomoEVMKitProvider,
  WalletButton2 as WalletButton,
  __private__,
  connectorsForWallets,
  createAuthenticationAdapter,
  cssObjectFromTheme,
  cssStringFromTheme,
  darkTheme,
  getBrowser,
  getBrowserSrc,
  getDefaultConfig,
  getDefaultWallets,
  getWalletConnectConnector,
  lightTheme,
  midnightTheme,
  useAccountModal,
  useAddRecentTransaction,
  useChainModal,
  useConnectModal,
  useWalletConnectors
};
