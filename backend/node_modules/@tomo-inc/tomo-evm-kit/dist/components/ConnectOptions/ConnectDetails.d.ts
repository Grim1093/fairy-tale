import React from "react";
import { type WalletConnector } from "../../wallets/useWalletConnectors";
import { WalletStep } from "./DesktopOptions";
export declare const getBrowserSrc: () => Promise<string>;
export declare function GetDetail({ getWalletDownload, compactModeEnabled, }: {
    getWalletDownload: (walletId: string) => void;
    compactModeEnabled: boolean;
}): React.JSX.Element;
export declare function QRCodeDisplay({ iconBackground, iconUrl, compactModeEnabled, qrCodeUri, }: {
    iconBackground?: string;
    compactModeEnabled?: boolean;
    iconUrl?: string | (() => Promise<string>);
    qrCodeUri: string;
}): React.JSX.Element;
export declare function QRCodeAction({ description, label, onClick, }: {
    description: string;
    label: string;
    onClick?: () => any | void;
}): React.JSX.Element;
export declare function ConnectDetail({ changeWalletStep, compactModeEnabled, connectionError, onClose, qrCodeUri, reconnect, wallet, }: {
    changeWalletStep: (newWalletStep: WalletStep) => void;
    compactModeEnabled: boolean;
    connectionError: boolean;
    qrCodeUri?: string;
    reconnect: (wallet: WalletConnector) => void;
    wallet: WalletConnector;
    onClose: () => void;
}): React.JSX.Element;
export declare const DownloadOptionsBox: ({ actionLabel, description, iconBackground, iconUrl, isCompact, onAction, title, url, }: {
    iconAccent?: string;
    title: string;
    description: string;
    onAction?: () => void;
    actionLabel: string;
    url?: string;
    isCompact: boolean;
    iconUrl: string | (() => Promise<string>);
    iconBackground?: string;
    variant: "browser" | "app" | "desktop";
}) => React.JSX.Element;
export declare function DownloadOptionsDetail({ changeWalletStep, wallet, }: {
    changeWalletStep: (newWalletStep: WalletStep) => void;
    wallet: WalletConnector;
}): React.JSX.Element;
export declare function DownloadDetail({ wallet, }: {
    changeWalletStep: (newWalletStep: WalletStep) => void;
    wallet: WalletConnector;
}): React.JSX.Element;
export declare function InstructionMobileDetail({ connectWallet, wallet, }: {
    connectWallet: (wallet: WalletConnector) => void;
    wallet: WalletConnector;
}): React.JSX.Element;
export declare function InstructionExtensionDetail({ wallet, }: {
    wallet: WalletConnector;
}): React.JSX.Element;
export declare function InstructionDesktopDetail({ connectWallet, wallet, }: {
    connectWallet: (wallet: WalletConnector) => void;
    wallet: WalletConnector;
}): React.JSX.Element;
//# sourceMappingURL=ConnectDetails.d.ts.map